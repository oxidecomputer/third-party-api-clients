//! The data types sent to and returned from the API client.
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};

/// The AccountBrands resource enables you to use account-level brands to customize the styles and text that recipients see.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountBrands {
    /**
     * The AccountBrands resource enables you to use account-level brands to customize the styles and text that recipients see.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub brands: Vec<Brand>,
    /**
     * The AccountBrands resource enables you to use account-level brands to customize the styles and text that recipients see.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientBrandIdDefault"
    )]
    pub recipient_brand_id_default: String,
    /**
     * The AccountBrands resource enables you to use account-level brands to customize the styles and text that recipients see.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderBrandIdDefault"
    )]
    pub sender_brand_id_default: String,
}

/// Details about account consumer disclosures.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountConsumerDisclosures {
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountEsignId"
    )]
    pub account_esign_id: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowCDWithdraw"
    )]
    pub allow_cd_withdraw: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowCDWithdrawMetadata"
    )]
    pub allow_cd_withdraw_metadata: Option<SettingsMetadata>,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "changeEmail"
    )]
    pub change_email: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "changeEmailOther"
    )]
    pub change_email_other: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "companyName"
    )]
    pub company_name: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "companyPhone"
    )]
    pub company_phone: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "copyCostPerPage"
    )]
    pub copy_cost_per_page: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "copyFeeCollectionMethod"
    )]
    pub copy_fee_collection_method: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "copyRequestEmail"
    )]
    pub copy_request_email: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub custom: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableEsign"
    )]
    pub enable_esign: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "esignAgreement"
    )]
    pub esign_agreement: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "esignText"
    )]
    pub esign_text: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "languageCode"
    )]
    pub language_code: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mustAgreeToEsign"
    )]
    pub must_agree_to_esign: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pdfId"
    )]
    pub pdf_id: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useBrand"
    )]
    pub use_brand: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useConsumerDisclosureWithinAccount"
    )]
    pub use_consumer_disclosure_within_account: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useConsumerDisclosureWithinAccountMetadata"
    )]
    pub use_consumer_disclosure_within_account_metadata: Option<SettingsMetadata>,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawAddressLine1"
    )]
    pub withdraw_address_line_1: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawAddressLine2"
    )]
    pub withdraw_address_line_2: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawByEmail"
    )]
    pub withdraw_by_email: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawByMail"
    )]
    pub withdraw_by_mail: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawByPhone"
    )]
    pub withdraw_by_phone: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawCity"
    )]
    pub withdraw_city: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawConsequences"
    )]
    pub withdraw_consequences: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawEmail"
    )]
    pub withdraw_email: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawOther"
    )]
    pub withdraw_other: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawPhone"
    )]
    pub withdraw_phone: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawPostalCode"
    )]
    pub withdraw_postal_code: String,
    /**
     * Details about account consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawState"
    )]
    pub withdraw_state: String,
}

/// An `accountCustomField` is an envelope custom field that you set at the account level. Applying custom fields enables account administators to group and manage envelopes.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountCustomFields {
    /**
     * An `accountCustomField` is an envelope custom field that you set at the account level. Applying custom fields enables account administators to group and manage envelopes.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "listCustomFields"
    )]
    pub list_custom_fields: Vec<ListCustomField>,
    /**
     * An `accountCustomField` is an envelope custom field that you set at the account level. Applying custom fields enables account administators to group and manage envelopes.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "textCustomFields"
    )]
    pub text_custom_fields: Vec<TextCustomField>,
}

/// Contains details about the password rules for an account.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountPasswordRules {
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expirePassword"
    )]
    pub expire_password: String,
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expirePasswordDays"
    )]
    pub expire_password_days: String,
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "expirePasswordDaysMetadata"
    )]
    pub expire_password_days_metadata: Option<AccountPasswordExpireDays>,
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockoutDurationMinutes"
    )]
    pub lockout_duration_minutes: String,
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockoutDurationMinutesMetadata"
    )]
    pub lockout_duration_minutes_metadata: Option<AccountPasswordLockoutDurationMinutes>,
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockoutDurationType"
    )]
    pub lockout_duration_type: String,
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockoutDurationTypeMetadata"
    )]
    pub lockout_duration_type_metadata: Option<AccountPasswordLockoutDurationType>,
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "minimumPasswordAgeDays"
    )]
    pub minimum_password_age_days: String,
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minimumPasswordAgeDaysMetadata"
    )]
    pub minimum_password_age_days_metadata: Option<AccountPasswordMinimumAgeDays>,
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "minimumPasswordLength"
    )]
    pub minimum_password_length: String,
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minimumPasswordLengthMetadata"
    )]
    pub minimum_password_length_metadata: Option<AccountMinimumPasswordLength>,
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordIncludeDigit"
    )]
    pub password_include_digit: String,
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordIncludeDigitOrSpecialCharacter"
    )]
    pub password_include_digit_or_special_character: String,
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordIncludeLowerCase"
    )]
    pub password_include_lower_case: String,
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordIncludeSpecialCharacter"
    )]
    pub password_include_special_character: String,
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordIncludeUpperCase"
    )]
    pub password_include_upper_case: String,
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordStrengthType"
    )]
    pub password_strength_type: String,
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordStrengthTypeMetadata"
    )]
    pub password_strength_type_metadata: Option<AccountPasswordStrengthType>,
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "questionsRequired"
    )]
    pub questions_required: String,
    /**
     * Contains details about the password rules for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "questionsRequiredMetadata"
    )]
    pub questions_required_metadata: Option<AccountPasswordQuestionsRequired>,
}

/// The AccountPermissionProfiles resource provides methods that allow you to manage permission profiles for groups of account users.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountPermissionProfiles {
    /**
     * The AccountPermissionProfiles resource provides methods that allow you to manage permission profiles for groups of account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "modifiedByUsername"
    )]
    pub modified_by_username: String,
    /**
     * The AccountPermissionProfiles resource provides methods that allow you to manage permission profiles for groups of account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "modifiedDateTime"
    )]
    pub modified_date_time: String,
    /**
     * The AccountPermissionProfiles resource provides methods that allow you to manage permission profiles for groups of account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "permissionProfileId"
    )]
    pub permission_profile_id: String,
    /**
     * The AccountPermissionProfiles resource provides methods that allow you to manage permission profiles for groups of account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "permissionProfileName"
    )]
    pub permission_profile_name: String,
    /**
     * The AccountPermissionProfiles resource provides methods that allow you to manage permission profiles for groups of account users.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<AccountRoleSettings>,
    /**
     * The AccountPermissionProfiles resource provides methods that allow you to manage permission profiles for groups of account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userCount"
    )]
    pub user_count: String,
    /**
     * The AccountPermissionProfiles resource provides methods that allow you to manage permission profiles for groups of account users.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub users: Vec<UserInformation>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountSealProviders {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub seals: Vec<SealIdentifier>,
}

/// This resource provides information on the Standards Based Signature providers that have been provisioned for an account.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountSignatureProviders {
    /**
     * This resource provides information on the Standards Based Signature providers that have been provisioned for an account.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signatureProviders"
    )]
    pub signature_providers: Vec<AccountSignatureProvider>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountSignatures {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "adoptedDateTime"
    )]
    pub adopted_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdDateTime"
    )]
    pub created_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customField"
    )]
    pub custom_field: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dateStampProperties"
    )]
    pub date_stamp_properties: Option<DateStampProperties>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disallowUserResizeStamp"
    )]
    pub disallow_user_resize_stamp: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalID"
    )]
    pub external_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "imageBase64"
    )]
    pub image_base_64: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "imageType"
    )]
    pub image_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initials150ImageId"
    )]
    pub initials_150_image_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initialsImageUri"
    )]
    pub initials_image_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDefault"
    )]
    pub is_default: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModifiedDateTime"
    )]
    pub last_modified_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nrdsId"
    )]
    pub nrds_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nrdsLastName"
    )]
    pub nrds_last_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nrdsStatus"
    )]
    pub nrds_status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "phoneticName"
    )]
    pub phonetic_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signature150ImageId"
    )]
    pub signature_150_image_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureFont"
    )]
    pub signature_font: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signatureGroups"
    )]
    pub signature_groups: Vec<SignatureGroup>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureId"
    )]
    pub signature_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureImageUri"
    )]
    pub signature_image_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureInitials"
    )]
    pub signature_initials: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureName"
    )]
    pub signature_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureRights"
    )]
    pub signature_rights: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureType"
    )]
    pub signature_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signatureUsers"
    )]
    pub signature_users: Vec<SignatureUser>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampFormat"
    )]
    pub stamp_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampImageUri"
    )]
    pub stamp_image_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampSizeMM"
    )]
    pub stamp_size_mm: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampType"
    )]
    pub stamp_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
}

/// Tab settings determine the tab types and tab functionality that are enabled for an account.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountTabSettings {
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowTabOrder"
    )]
    pub allow_tab_order: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowTabOrderMetadata"
    )]
    pub allow_tab_order_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "approveDeclineTabsEnabled"
    )]
    pub approve_decline_tabs_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approveDeclineTabsMetadata"
    )]
    pub approve_decline_tabs_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "calculatedFieldsEnabled"
    )]
    pub calculated_fields_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "calculatedFieldsMetadata"
    )]
    pub calculated_fields_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "checkBoxTabsMetadata"
    )]
    pub check_box_tabs_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "checkboxTabsEnabled"
    )]
    pub checkbox_tabs_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "dataFieldRegexEnabled"
    )]
    pub data_field_regex_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataFieldRegexMetadata"
    )]
    pub data_field_regex_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "dataFieldSizeEnabled"
    )]
    pub data_field_size_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataFieldSizeMetadata"
    )]
    pub data_field_size_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "drawTabsEnabled"
    )]
    pub draw_tabs_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "drawTabsMetadata"
    )]
    pub draw_tabs_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "firstLastEmailTabsEnabled"
    )]
    pub first_last_email_tabs_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "firstLastEmailTabsMetadata"
    )]
    pub first_last_email_tabs_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "listTabsEnabled"
    )]
    pub list_tabs_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "listTabsMetadata"
    )]
    pub list_tabs_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "noteTabsEnabled"
    )]
    pub note_tabs_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteTabsMetadata"
    )]
    pub note_tabs_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "prefillTabsEnabled"
    )]
    pub prefill_tabs_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "prefillTabsMetadata"
    )]
    pub prefill_tabs_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "radioTabsEnabled"
    )]
    pub radio_tabs_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "radioTabsMetadata"
    )]
    pub radio_tabs_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "savingCustomTabsEnabled"
    )]
    pub saving_custom_tabs_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "savingCustomTabsMetadata"
    )]
    pub saving_custom_tabs_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderToChangeTabAssignmentsEnabled"
    )]
    pub sender_to_change_tab_assignments_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "senderToChangeTabAssignmentsMetadata"
    )]
    pub sender_to_change_tab_assignments_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sharedCustomTabsEnabled"
    )]
    pub shared_custom_tabs_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharedCustomTabsMetadata"
    )]
    pub shared_custom_tabs_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabDataLabelEnabled"
    )]
    pub tab_data_label_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabDataLabelMetadata"
    )]
    pub tab_data_label_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLocationEnabled"
    )]
    pub tab_location_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLocationMetadata"
    )]
    pub tab_location_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLockingEnabled"
    )]
    pub tab_locking_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLockingMetadata"
    )]
    pub tab_locking_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabScaleEnabled"
    )]
    pub tab_scale_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabScaleMetadata"
    )]
    pub tab_scale_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabTextFormattingEnabled"
    )]
    pub tab_text_formatting_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTextFormattingMetadata"
    )]
    pub tab_text_formatting_metadata: Option<SettingsMetadata>,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "textTabsEnabled"
    )]
    pub text_tabs_enabled: String,
    /**
     * Tab settings determine the tab types and tab functionality that are enabled for an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "textTabsMetadata"
    )]
    pub text_tabs_metadata: Option<SettingsMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountWatermarks {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayAngle"
    )]
    pub display_angle: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "imageBase64"
    )]
    pub image_base_64: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub transparency: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "watermarkText"
    )]
    pub watermark_text: String,
}

/// Account management
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Accounts {
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountIdGuid"
    )]
    pub account_id_guid: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountName"
    )]
    pub account_name: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accountSettings"
    )]
    pub account_settings: Option<AccountSettingsInformation>,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowTransactionRooms"
    )]
    pub allow_transaction_rooms: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "billingPeriodDaysRemaining"
    )]
    pub billing_period_days_remaining: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "billingPeriodEndDate"
    )]
    pub billing_period_end_date: Option<chrono::NaiveDate>,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "billingPeriodEnvelopesAllowed"
    )]
    pub billing_period_envelopes_allowed: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "billingPeriodEnvelopesSent"
    )]
    pub billing_period_envelopes_sent: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "billingPeriodStartDate"
    )]
    pub billing_period_start_date: Option<chrono::NaiveDate>,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "billingProfile"
    )]
    pub billing_profile: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canUpgrade"
    )]
    pub can_upgrade: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "connectPermission"
    )]
    pub connect_permission: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "createdDate"
    )]
    pub created_date: Option<chrono::NaiveDate>,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currencyCode"
    )]
    pub currency_code: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currentPlanId"
    )]
    pub current_plan_id: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayApplianceStartUrl"
    )]
    pub display_appliance_start_url: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayApplianceUrl"
    )]
    pub display_appliance_url: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "distributorCode"
    )]
    pub distributor_code: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "docuSignLandingUrl"
    )]
    pub docu_sign_landing_url: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "dssValues"
    )]
    pub dss_values: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeSendingBlocked"
    )]
    pub envelope_sending_blocked: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeUnitPrice"
    )]
    pub envelope_unit_price: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalAccountId"
    )]
    pub external_account_id: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "forgottenPasswordQuestionsCount"
    )]
    pub forgotten_password_questions_count: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDowngrade"
    )]
    pub is_downgrade: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentMethod"
    )]
    pub payment_method: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "planClassification"
    )]
    pub plan_classification: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "planEndDate"
    )]
    pub plan_end_date: Option<chrono::NaiveDate>,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "planName"
    )]
    pub plan_name: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "planStartDate"
    )]
    pub plan_start_date: Option<chrono::NaiveDate>,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientDomains"
    )]
    pub recipient_domains: Vec<RecipientDomain>,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "seatsAllowed"
    )]
    pub seats_allowed: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "seatsInUse"
    )]
    pub seats_in_use: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "status21CFRPart11"
    )]
    pub status_21cfr_part_11: String,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "suspensionDate"
    )]
    pub suspension_date: Option<chrono::NaiveDate>,
    /**
     * Account management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "suspensionStatus"
    )]
    pub suspension_status: String,
    /**
     * Account management
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "useDisplayAppliance"
    )]
    pub use_display_appliance: bool,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ApplianceInfo {}

/// The `EmailArchive` resource provides methods for managing your email archive configuration, which consists of the BCC email address or addresses that you want to use to archive DocuSign emails. Each account can use up to five BCC email addresses for archiving purposes.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BccEmailArchive {
    /**
     * The `EmailArchive` resource provides methods for managing your email archive configuration, which consists of the BCC email address or addresses that you want to use to archive DocuSign emails. Each account can use up to five BCC email addresses for archiving purposes.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "bccEmailArchiveHistory"
    )]
    pub bcc_email_archive_history: Vec<BccEmailArchiveHistory>,
    /**
     * The `EmailArchive` resource provides methods for managing your email archive configuration, which consists of the BCC email address or addresses that you want to use to archive DocuSign emails. Each account can use up to five BCC email addresses for archiving purposes.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     * The `EmailArchive` resource provides methods for managing your email archive configuration, which consists of the BCC email address or addresses that you want to use to archive DocuSign emails. Each account can use up to five BCC email addresses for archiving purposes.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     * The `EmailArchive` resource provides methods for managing your email archive configuration, which consists of the BCC email address or addresses that you want to use to archive DocuSign emails. Each account can use up to five BCC email addresses for archiving purposes.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     * The `EmailArchive` resource provides methods for managing your email archive configuration, which consists of the BCC email address or addresses that you want to use to archive DocuSign emails. Each account can use up to five BCC email addresses for archiving purposes.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     * The `EmailArchive` resource provides methods for managing your email archive configuration, which consists of the BCC email address or addresses that you want to use to archive DocuSign emails. Each account can use up to five BCC email addresses for archiving purposes.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     * The `EmailArchive` resource provides methods for managing your email archive configuration, which consists of the BCC email address or addresses that you want to use to archive DocuSign emails. Each account can use up to five BCC email addresses for archiving purposes.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

/// Billing plans
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingPlans {
    /**
     * Billing plans
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "billingAddress"
    )]
    pub billing_address: Option<AccountAddress>,
    /**
     * Billing plans
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "billingAddressIsCreditCardAddress"
    )]
    pub billing_address_is_credit_card_address: String,
    /**
     * Billing plans
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "billingPlan"
    )]
    pub billing_plan: Option<AccountBillingPlan>,
    /**
     * Billing plans
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "creditCardInformation"
    )]
    pub credit_card_information: Option<CreditCardInformation>,
    /**
     * Billing plans
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "directDebitProcessorInformation"
    )]
    pub direct_debit_processor_information: Option<DirectDebitProcessorInformation>,
    /**
     * Billing plans
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "downgradePlanInformation"
    )]
    pub downgrade_plan_information: Option<DowngradePlanUpdateResponse>,
    /**
     * Billing plans
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentMethod"
    )]
    pub payment_method: String,
    /**
     * Billing plans
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "paymentProcessorInformation"
    )]
    pub payment_processor_information: Option<PaymentProcessorInformation>,
    /**
     * Billing plans
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "referralInformation"
    )]
    pub referral_information: Option<ReferralInformation>,
    /**
     * Billing plans
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "successorPlans"
    )]
    pub successor_plans: Vec<BillingPlan>,
}

/// The bulk send list resource provides methods that enable you to create and manage bulk sending lists, which you can use to send multiple copies of an envelope in a single batch.
///
/// **Note**: The Bulk Send feature is only available on Business Pro plans that are using EasySign.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkSend {
    /**
     * The bulk send list resource provides methods that enable you to create and manage bulk sending lists, which you can use to send multiple copies of an envelope in a single batch.
     *  
     *  \*\*Note\*\*: The Bulk Send feature is only available on Business Pro plans that are using EasySign.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "bulkCopies"
    )]
    pub bulk_copies: Vec<BulkSendingCopy>,
    /**
     * The bulk send list resource provides methods that enable you to create and manage bulk sending lists, which you can use to send multiple copies of an envelope in a single batch.
     *  
     *  \*\*Note\*\*: The Bulk Send feature is only available on Business Pro plans that are using EasySign.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "listId"
    )]
    pub list_id: String,
    /**
     * The bulk send list resource provides methods that enable you to create and manage bulk sending lists, which you can use to send multiple copies of an envelope in a single batch.
     *  
     *  \*\*Note\*\*: The Bulk Send feature is only available on Business Pro plans that are using EasySign.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/// The ChunkedUploads resource provides methods to complete integrity checks, and to add, commit, retrieve, initiate and delete chunked uploads.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ChunkedUploads {
    /**
     * The ChunkedUploads resource provides methods to complete integrity checks, and to add, commit, retrieve, initiate and delete chunked uploads.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub checksum: String,
    /**
     * The ChunkedUploads resource provides methods to complete integrity checks, and to add, commit, retrieve, initiate and delete chunked uploads.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "chunkedUploadId"
    )]
    pub chunked_upload_id: String,
    /**
     * The ChunkedUploads resource provides methods to complete integrity checks, and to add, commit, retrieve, initiate and delete chunked uploads.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "chunkedUploadParts"
    )]
    pub chunked_upload_parts: Vec<ChunkedUploadPart>,
    /**
     * The ChunkedUploads resource provides methods to complete integrity checks, and to add, commit, retrieve, initiate and delete chunked uploads.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "chunkedUploadUri"
    )]
    pub chunked_upload_uri: String,
    /**
     * The ChunkedUploads resource provides methods to complete integrity checks, and to add, commit, retrieve, initiate and delete chunked uploads.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub committed: String,
    /**
     * The ChunkedUploads resource provides methods to complete integrity checks, and to add, commit, retrieve, initiate and delete chunked uploads.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expirationDateTime"
    )]
    pub expiration_date_time: String,
    /**
     * The ChunkedUploads resource provides methods to complete integrity checks, and to add, commit, retrieve, initiate and delete chunked uploads.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxChunkedUploadParts"
    )]
    pub max_chunked_upload_parts: String,
    /**
     * The ChunkedUploads resource provides methods to complete integrity checks, and to add, commit, retrieve, initiate and delete chunked uploads.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxTotalSize"
    )]
    pub max_total_size: String,
    /**
     * The ChunkedUploads resource provides methods to complete integrity checks, and to add, commit, retrieve, initiate and delete chunked uploads.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSize"
    )]
    pub total_size: String,
}

/// Cloud storage
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CloudStorage {
    /**
     * Cloud storage
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     * Cloud storage
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ExternalDocServiceErrorDetails>,
    /**
     * Cloud storage
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Cloud storage
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub items: Vec<ExternalFile>,
    /**
     * Cloud storage
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Cloud storage
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     * Cloud storage
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     * Cloud storage
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     * Cloud storage
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     * Cloud storage
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

/// The CloudStorageProviders resource provides methods that allow you to manage the cloud storage providers associate with an account.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CloudStorageProviders {
    /**
     * The CloudStorageProviders resource provides methods that allow you to manage the cloud storage providers associate with an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "storageProviders"
    )]
    pub storage_providers: Vec<CloudStorageProvider>,
}

/// Details about envelope comments.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Comments {
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub hmac: String,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub mentions: Vec<String>,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub read: bool,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentByEmail"
    )]
    pub sent_by_email: String,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentByFullName"
    )]
    pub sent_by_full_name: String,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentByImageId"
    )]
    pub sent_by_image_id: String,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentByInitials"
    )]
    pub sent_by_initials: String,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentByRecipientId"
    )]
    pub sent_by_recipient_id: String,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentByUserId"
    )]
    pub sent_by_user_id: String,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupId"
    )]
    pub signing_group_id: String,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupName"
    )]
    pub signing_group_name: String,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub subject: String,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub text: String,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "threadId"
    )]
    pub thread_id: String,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "threadOriginatorId"
    )]
    pub thread_originator_id: String,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "timeStampFormatted"
    )]
    pub time_stamp_formatted: String,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timestamp: String,
    /**
     * Details about envelope comments.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "visibleTo"
    )]
    pub visible_to: Vec<String>,
}

/// Contains information about a DocuSign Connect configuration.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConnectConfigurations {
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allUsers"
    )]
    pub all_users: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowEnvelopePublish"
    )]
    pub allow_envelope_publish: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSalesforcePublish"
    )]
    pub allow_salesforce_publish: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "configurationType"
    )]
    pub configuration_type: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "connectId"
    )]
    pub connect_id: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableLog"
    )]
    pub enable_log: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeEvents"
    )]
    pub envelope_events: Vec<String>,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventData")]
    pub event_data: Option<ConnectEventData>,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalFolderId"
    )]
    pub external_folder_id: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalFolderLabel"
    )]
    pub external_folder_label: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeCertSoapHeader"
    )]
    pub include_cert_soap_header: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeCertificateOfCompletion"
    )]
    pub include_certificate_of_completion: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeDocumentFields"
    )]
    pub include_document_fields: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeDocuments"
    )]
    pub include_documents: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeEnvelopeVoidReason"
    )]
    pub include_envelope_void_reason: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeHMAC"
    )]
    pub include_hmac: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeSenderAccountasCustomField"
    )]
    pub include_sender_accountas_custom_field: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeTimeZoneInformation"
    )]
    pub include_time_zone_information: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientEvents"
    )]
    pub recipient_events: Vec<String>,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireMutualTls"
    )]
    pub require_mutual_tls: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requiresAcknowledgement"
    )]
    pub requires_acknowledgement: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "salesforceApiVersion"
    )]
    pub salesforce_api_version: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "salesforceAuthcode"
    )]
    pub salesforce_authcode: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "salesforceCallBackUrl"
    )]
    pub salesforce_call_back_url: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "salesforceDocumentsAsContentFiles"
    )]
    pub salesforce_documents_as_content_files: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderOverride"
    )]
    pub sender_override: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "senderSelectableItems"
    )]
    pub sender_selectable_items: Vec<String>,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "sfObjects"
    )]
    pub sf_objects: Vec<ConnectSalesforceObject>,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signMessageWithX509Certificate"
    )]
    pub sign_message_with_x509_certificate: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "soapNamespace"
    )]
    pub soap_namespace: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "urlToPublishTo"
    )]
    pub url_to_publish_to: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useSoapInterface"
    )]
    pub use_soap_interface: String,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "userIds"
    )]
    pub user_ids: Vec<String>,
    /**
     * Contains information about a DocuSign Connect configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userName"
    )]
    pub user_name: String,
}

/// Connect event logging information. This object contains sections for regular Connect logs and for Connect failures.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConnectEvents {
    /**
     * Connect event logging information. This object contains sections for regular Connect logs and for Connect failures.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub failures: Vec<ConnectLog>,
    /**
     * Connect event logging information. This object contains sections for regular Connect logs and for Connect failures.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub logs: Vec<ConnectLog>,
    /**
     * Connect event logging information. This object contains sections for regular Connect logs and for Connect failures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalRecords"
    )]
    pub total_records: String,
    /**
     * Connect event logging information. This object contains sections for regular Connect logs and for Connect failures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConnectSecret {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub failures: Vec<ConnectLog>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub logs: Vec<ConnectLog>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalRecords"
    )]
    pub total_records: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

/// The `Contacts` resource enables you to manage the contact in an account's address book.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Contacts {
    /**
     * The `Contacts` resource enables you to manage the contact in an account's address book.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "cloudProvider"
    )]
    pub cloud_provider: String,
    /**
     * The `Contacts` resource enables you to manage the contact in an account's address book.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "cloudProviderContainerId"
    )]
    pub cloud_provider_container_id: String,
    /**
     * The `Contacts` resource enables you to manage the contact in an account's address book.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "contactId"
    )]
    pub contact_id: String,
    /**
     * The `Contacts` resource enables you to manage the contact in an account's address book.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "contactPhoneNumbers"
    )]
    pub contact_phone_numbers: Vec<ContactPhoneNumber>,
    /**
     * The `Contacts` resource enables you to manage the contact in an account's address book.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "contactUri"
    )]
    pub contact_uri: String,
    /**
     * The `Contacts` resource enables you to manage the contact in an account's address book.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub emails: Vec<String>,
    /**
     * The `Contacts` resource enables you to manage the contact in an account's address book.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * The `Contacts` resource enables you to manage the contact in an account's address book.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "isOwner"
    )]
    pub is_owner: bool,
    /**
     * The `Contacts` resource enables you to manage the contact in an account's address book.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * The `Contacts` resource enables you to manage the contact in an account's address book.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub organization: String,
    /**
     * The `Contacts` resource enables you to manage the contact in an account's address book.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     * The `Contacts` resource enables you to manage the contact in an account's address book.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroup"
    )]
    pub signing_group: String,
    /**
     * The `Contacts` resource enables you to manage the contact in an account's address book.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupName"
    )]
    pub signing_group_name: String,
}

/// Custom tabs
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CustomTabs {
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub anchor: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub collaborative: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "concealValueOnDocument"
    )]
    pub conceal_value_on_document: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdByDisplayName"
    )]
    pub created_by_display_name: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdByUserId"
    )]
    pub created_by_user_id: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableAutoSize"
    )]
    pub disable_auto_size: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub editable: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includedInEmail"
    )]
    pub included_in_email: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initialValue"
    )]
    pub initial_value: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub items: Vec<String>,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModified"
    )]
    pub last_modified: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModifiedByDisplayName"
    )]
    pub last_modified_by_display_name: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModifiedByUserId"
    )]
    pub last_modified_by_user_id: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maximumLength"
    )]
    pub maximum_length: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentItemCode"
    )]
    pub payment_item_code: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentItemDescription"
    )]
    pub payment_item_description: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentItemName"
    )]
    pub payment_item_name: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireAll"
    )]
    pub require_all: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireInitialOnSharedChange"
    )]
    pub require_initial_on_shared_change: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "scaleValue"
    )]
    pub scale_value: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub selected: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampType"
    )]
    pub stamp_type: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stampTypeMetadata"
    )]
    pub stamp_type_metadata: Option<PropertyMetadata>,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationMessage"
    )]
    pub validation_message: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationPattern"
    )]
    pub validation_pattern: String,
    /**
     * Custom tabs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
}

/// This resource is used to create a responsive preview of a specific document.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DocumentResponsiveHtmlPreview {
    /**
     * This resource is used to create a responsive preview of a specific document.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "htmlDefinitions"
    )]
    pub html_definitions: Vec<String>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ENoteConfigurations {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "apiKey"
    )]
    pub api_key: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "connectConfigured"
    )]
    pub connect_configured: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "eNoteConfigured"
    )]
    pub e_note_configured: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub organization: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userName"
    )]
    pub user_name: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeAttachments {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessControl"
    )]
    pub access_control: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "attachmentId"
    )]
    pub attachment_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "attachmentType"
    )]
    pub attachment_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/// Details about envelope consumer disclosures.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeConsumerDisclosures {
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountEsignId"
    )]
    pub account_esign_id: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowCDWithdraw"
    )]
    pub allow_cd_withdraw: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowCDWithdrawMetadata"
    )]
    pub allow_cd_withdraw_metadata: Option<SettingsMetadata>,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "changeEmail"
    )]
    pub change_email: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "changeEmailOther"
    )]
    pub change_email_other: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "companyName"
    )]
    pub company_name: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "companyPhone"
    )]
    pub company_phone: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "copyCostPerPage"
    )]
    pub copy_cost_per_page: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "copyFeeCollectionMethod"
    )]
    pub copy_fee_collection_method: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "copyRequestEmail"
    )]
    pub copy_request_email: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub custom: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableEsign"
    )]
    pub enable_esign: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "esignAgreement"
    )]
    pub esign_agreement: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "esignText"
    )]
    pub esign_text: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "languageCode"
    )]
    pub language_code: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mustAgreeToEsign"
    )]
    pub must_agree_to_esign: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pdfId"
    )]
    pub pdf_id: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useBrand"
    )]
    pub use_brand: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useConsumerDisclosureWithinAccount"
    )]
    pub use_consumer_disclosure_within_account: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useConsumerDisclosureWithinAccountMetadata"
    )]
    pub use_consumer_disclosure_within_account_metadata: Option<SettingsMetadata>,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawAddressLine1"
    )]
    pub withdraw_address_line_1: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawAddressLine2"
    )]
    pub withdraw_address_line_2: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawByEmail"
    )]
    pub withdraw_by_email: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawByMail"
    )]
    pub withdraw_by_mail: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawByPhone"
    )]
    pub withdraw_by_phone: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawCity"
    )]
    pub withdraw_city: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawConsequences"
    )]
    pub withdraw_consequences: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawEmail"
    )]
    pub withdraw_email: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawOther"
    )]
    pub withdraw_other: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawPhone"
    )]
    pub withdraw_phone: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawPostalCode"
    )]
    pub withdraw_postal_code: String,
    /**
     * Details about envelope consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawState"
    )]
    pub withdraw_state: String,
}

/// An envelope custom field enables you to collect custom data about envelopes on a per-envelope basis. You can then use the custom data for sorting, organizing, searching, and other downstream processes. For example, you can use custom fields to copy envelopes or data to multiple areas in Salesforce. eOriginal customers can eVault their documents from the web app on a per-envelope basis by setting an envelope custom field with a name like "eVault with eOriginal?" to "Yes" or "No".
///
/// When a user creates an envelope, the envelope custom fields display in the **Envelope Settings** section of the DocuSign console. Envelope recipients do not see the envelope custom fields. For more information, see [Envelope Custom Fields](https://support.docusign.com/en/guides/ndse-admin-guide-document-labels).
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeCustomFields {
    /**
     * An envelope custom field enables you to collect custom data about envelopes on a per-envelope basis. You can then use the custom data for sorting, organizing, searching, and other downstream processes. For example, you can use custom fields to copy envelopes or data to multiple areas in Salesforce. eOriginal customers can eVault their documents from the web app on a per-envelope basis by setting an envelope custom field with a name like "eVault with eOriginal?" to "Yes" or "No".
     *  
     *  When a user creates an envelope, the envelope custom fields display in the \*\*Envelope Settings\*\* section of the DocuSign console. Envelope recipients do not see the envelope custom fields. For more information, see [Envelope Custom Fields](https://support.docusign.com/en/guides/ndse-admin-guide-document-labels).
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "listCustomFields"
    )]
    pub list_custom_fields: Vec<ListCustomField>,
    /**
     * An envelope custom field enables you to collect custom data about envelopes on a per-envelope basis. You can then use the custom data for sorting, organizing, searching, and other downstream processes. For example, you can use custom fields to copy envelopes or data to multiple areas in Salesforce. eOriginal customers can eVault their documents from the web app on a per-envelope basis by setting an envelope custom field with a name like "eVault with eOriginal?" to "Yes" or "No".
     *  
     *  When a user creates an envelope, the envelope custom fields display in the \*\*Envelope Settings\*\* section of the DocuSign console. Envelope recipients do not see the envelope custom fields. For more information, see [Envelope Custom Fields](https://support.docusign.com/en/guides/ndse-admin-guide-document-labels).
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "textCustomFields"
    )]
    pub text_custom_fields: Vec<TextCustomField>,
}

/// Envelope document fields
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeDocumentFields {
    /**
     * Envelope document fields
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentFields"
    )]
    pub document_fields: Vec<NameValue>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeDocumentHtmlDefinitions {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "htmlDefinitions"
    )]
    pub html_definitions: Vec<DocumentHtmlDefinitionOriginal>,
}

/// Envelope Document Tabs resource
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeDocumentTabs {
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "approveTabs"
    )]
    pub approve_tabs: Vec<Approve>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "checkboxTabs"
    )]
    pub checkbox_tabs: Vec<Checkbox>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commentThreadTabs"
    )]
    pub comment_thread_tabs: Vec<CommentThread>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionCountyTabs"
    )]
    pub commission_county_tabs: Vec<CommissionCounty>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionExpirationTabs"
    )]
    pub commission_expiration_tabs: Vec<CommissionExpiration>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionNumberTabs"
    )]
    pub commission_number_tabs: Vec<CommissionNumber>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionStateTabs"
    )]
    pub commission_state_tabs: Vec<CommissionState>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "companyTabs"
    )]
    pub company_tabs: Vec<Company>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "currencyTabs"
    )]
    pub currency_tabs: Vec<Currency>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "dateSignedTabs"
    )]
    pub date_signed_tabs: Vec<DateSigned>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "dateTabs"
    )]
    pub date_tabs: Vec<Date>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "declineTabs"
    )]
    pub decline_tabs: Vec<Decline>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "drawTabs"
    )]
    pub draw_tabs: Vec<Draw>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "emailAddressTabs"
    )]
    pub email_address_tabs: Vec<EmailAddress>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "emailTabs"
    )]
    pub email_tabs: Vec<Email>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeIdTabs"
    )]
    pub envelope_id_tabs: Vec<EnvelopeId>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "firstNameTabs"
    )]
    pub first_name_tabs: Vec<FirstName>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "formulaTabs"
    )]
    pub formula_tabs: Vec<FormulaTab>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "fullNameTabs"
    )]
    pub full_name_tabs: Vec<FullName>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "initialHereTabs"
    )]
    pub initial_here_tabs: Vec<InitialHere>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "lastNameTabs"
    )]
    pub last_name_tabs: Vec<LastName>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "listTabs"
    )]
    pub list_tabs: Vec<List>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "notarizeTabs"
    )]
    pub notarize_tabs: Vec<Notarize>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "notarySealTabs"
    )]
    pub notary_seal_tabs: Vec<NotarySeal>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "noteTabs"
    )]
    pub note_tabs: Vec<Note>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "numberTabs"
    )]
    pub number_tabs: Vec<Number>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "phoneNumberTabs"
    )]
    pub phone_number_tabs: Vec<PhoneNumber>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "polyLineOverlayTabs"
    )]
    pub poly_line_overlay_tabs: Vec<PolyLineOverlay>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "prefillTabs"
    )]
    pub prefill_tabs: Option<PrefillTabs>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "radioGroupTabs"
    )]
    pub radio_group_tabs: Vec<RadioGroup>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signHereTabs"
    )]
    pub sign_here_tabs: Vec<SignHere>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signerAttachmentTabs"
    )]
    pub signer_attachment_tabs: Vec<SignerAttachment>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "smartSectionTabs"
    )]
    pub smart_section_tabs: Vec<SmartSection>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "ssnTabs"
    )]
    pub ssn_tabs: Vec<Ssn>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroups"
    )]
    pub tab_groups: Vec<TabGroup>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "textTabs"
    )]
    pub text_tabs: Vec<Text>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "titleTabs"
    )]
    pub title_tabs: Vec<Title>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "viewTabs"
    )]
    pub view_tabs: Vec<View>,
    /**
     * Envelope Document Tabs resource
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "zipTabs"
    )]
    pub zip_tabs: Vec<Zip>,
}

/// Document Visibility enables senders to control the visibility of the documents in an envelope at the recipient level. For example, if the parties associated with a legal proceeding should have access to different documents, the Document Visibility feature enables you to keep all of the documents in the same envelope and set view permissions for the documents by recipient. This functionality is enabled for envelopes and templates. It is not available for PowerForms.
///
/// **Note**: Before you use Document Visibility, you should be aware of the following information:
///
/// - Document Visibility must be enabled for your account by your DocuSign administrator.
/// - A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document.
/// - When the Document Visibility setting hides a document from a recipient, the document also does not appear in the recipient's list of envelopes, documents, or page images.
/// - Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all of the documents associated with the envelope or template.
///
/// The Document Visibility feature has multiple settings that specify the options that senders have when sending documents. For more information, see [Use Document Visibility to Control Recipient Access](https://support.docusign.com/en/guides/ndse-user-guide-document-visibility).
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeDocumentVisibility {
    /**
     * Document Visibility enables senders to control the visibility of the documents in an envelope at the recipient level. For example, if the parties associated with a legal proceeding should have access to different documents, the Document Visibility feature enables you to keep all of the documents in the same envelope and set view permissions for the documents by recipient. This functionality is enabled for envelopes and templates. It is not available for PowerForms.
     *  
     *  \*\*Note\*\*: Before you use Document Visibility, you should be aware of the following information:
     *  
     *  - Document Visibility must be enabled for your account by your DocuSign administrator.
     *  - A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document.
     *  - When the Document Visibility setting hides a document from a recipient, the document also does not appear in the recipient's list of envelopes, documents, or page images.
     *  - Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all of the documents associated with the envelope or template.
     *  
     *  The Document Visibility feature has multiple settings that specify the options that senders have when sending documents. For more information, see [Use Document Visibility to Control Recipient Access](https://support.docusign.com/en/guides/ndse-user-guide-document-visibility).
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentVisibility"
    )]
    pub document_visibility: Vec<DocumentVisibility>,
}

/// Envelope documents
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeDocuments {
    /**
     * Envelope documents
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeDocuments"
    )]
    pub envelope_documents: Vec<EnvelopeDocument>,
    /**
     * Envelope documents
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
}

/// Envelope email settings
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeEmailSettings {
    /**
     * Envelope email settings
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "bccEmailAddresses"
    )]
    pub bcc_email_addresses: Vec<BccEmailAddress>,
    /**
     * Envelope email settings
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "replyEmailAddressOverride"
    )]
    pub reply_email_address_override: String,
    /**
     * Envelope email settings
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "replyEmailNameOverride"
    )]
    pub reply_email_name_override: String,
}

/// This object contains the data that recipients have entered into the form fields associated with an envelope.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeFormData {
    /**
     * This object contains the data that recipients have entered into the form fields associated with an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailSubject"
    )]
    pub email_subject: String,
    /**
     * This object contains the data that recipients have entered into the form fields associated with an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     * This object contains the data that recipients have entered into the form fields associated with an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "formData"
    )]
    pub form_data: Vec<FormDataItem>,
    /**
     * This object contains the data that recipients have entered into the form fields associated with an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "prefillFormData"
    )]
    pub prefill_form_data: Vec<FormDataItem>,
    /**
     * This object contains the data that recipients have entered into the form fields associated with an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientFormData"
    )]
    pub recipient_form_data: Vec<RecipientFormData>,
    /**
     * This object contains the data that recipients have entered into the form fields associated with an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentDateTime"
    )]
    pub sent_date_time: String,
    /**
     * This object contains the data that recipients have entered into the form fields associated with an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeHtmlDefinitions {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "htmlDefinitions"
    )]
    pub html_definitions: Vec<DocumentHtmlDefinitionOriginal>,
}

/// This section provides information about envelope locks.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeLocks {
    /**
     * This section provides information about envelope locks.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * This section provides information about envelope locks.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockDurationInSeconds"
    )]
    pub lock_duration_in_seconds: String,
    /**
     * This section provides information about envelope locks.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockToken"
    )]
    pub lock_token: String,
    /**
     * This section provides information about envelope locks.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockType"
    )]
    pub lock_type: String,
    /**
     * This section provides information about envelope locks.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedByApp"
    )]
    pub locked_by_app: String,
    /**
     * This section provides information about envelope locks.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedByUser"
    )]
    pub locked_by_user: Option<UserInfo>,
    /**
     * This section provides information about envelope locks.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedUntilDateTime"
    )]
    pub locked_until_date_time: String,
    /**
     * This section provides information about envelope locks.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useScratchPad"
    )]
    pub use_scratch_pad: String,
}

/// All of the tabs associated with a recipient. Each property is a list of a type of tab.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeRecipientTabs {
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "approveTabs"
    )]
    pub approve_tabs: Vec<Approve>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "checkboxTabs"
    )]
    pub checkbox_tabs: Vec<Checkbox>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commentThreadTabs"
    )]
    pub comment_thread_tabs: Vec<CommentThread>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionCountyTabs"
    )]
    pub commission_county_tabs: Vec<CommissionCounty>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionExpirationTabs"
    )]
    pub commission_expiration_tabs: Vec<CommissionExpiration>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionNumberTabs"
    )]
    pub commission_number_tabs: Vec<CommissionNumber>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionStateTabs"
    )]
    pub commission_state_tabs: Vec<CommissionState>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "companyTabs"
    )]
    pub company_tabs: Vec<Company>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "currencyTabs"
    )]
    pub currency_tabs: Vec<Currency>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "dateSignedTabs"
    )]
    pub date_signed_tabs: Vec<DateSigned>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "dateTabs"
    )]
    pub date_tabs: Vec<Date>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "declineTabs"
    )]
    pub decline_tabs: Vec<Decline>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "drawTabs"
    )]
    pub draw_tabs: Vec<Draw>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "emailAddressTabs"
    )]
    pub email_address_tabs: Vec<EmailAddress>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "emailTabs"
    )]
    pub email_tabs: Vec<Email>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeIdTabs"
    )]
    pub envelope_id_tabs: Vec<EnvelopeId>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "firstNameTabs"
    )]
    pub first_name_tabs: Vec<FirstName>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "formulaTabs"
    )]
    pub formula_tabs: Vec<FormulaTab>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "fullNameTabs"
    )]
    pub full_name_tabs: Vec<FullName>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "initialHereTabs"
    )]
    pub initial_here_tabs: Vec<InitialHere>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "lastNameTabs"
    )]
    pub last_name_tabs: Vec<LastName>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "listTabs"
    )]
    pub list_tabs: Vec<List>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "notarizeTabs"
    )]
    pub notarize_tabs: Vec<Notarize>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "notarySealTabs"
    )]
    pub notary_seal_tabs: Vec<NotarySeal>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "noteTabs"
    )]
    pub note_tabs: Vec<Note>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "numberTabs"
    )]
    pub number_tabs: Vec<Number>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "phoneNumberTabs"
    )]
    pub phone_number_tabs: Vec<PhoneNumber>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "polyLineOverlayTabs"
    )]
    pub poly_line_overlay_tabs: Vec<PolyLineOverlay>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "prefillTabs"
    )]
    pub prefill_tabs: Option<PrefillTabs>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "radioGroupTabs"
    )]
    pub radio_group_tabs: Vec<RadioGroup>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signHereTabs"
    )]
    pub sign_here_tabs: Vec<SignHere>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signerAttachmentTabs"
    )]
    pub signer_attachment_tabs: Vec<SignerAttachment>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "smartSectionTabs"
    )]
    pub smart_section_tabs: Vec<SmartSection>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "ssnTabs"
    )]
    pub ssn_tabs: Vec<Ssn>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroups"
    )]
    pub tab_groups: Vec<TabGroup>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "textTabs"
    )]
    pub text_tabs: Vec<Text>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "titleTabs"
    )]
    pub title_tabs: Vec<Title>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "viewTabs"
    )]
    pub view_tabs: Vec<View>,
    /**
     * All of the tabs associated with a recipient. Each property is a list of a type of tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "zipTabs"
    )]
    pub zip_tabs: Vec<Zip>,
}

/// Envelope recipients
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeRecipients {
    /**
     * Envelope recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub agents: Vec<Agent>,
    /**
     * Envelope recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "carbonCopies"
    )]
    pub carbon_copies: Vec<CarbonCopy>,
    /**
     * Envelope recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "certifiedDeliveries"
    )]
    pub certified_deliveries: Vec<CertifiedDelivery>,
    /**
     * Envelope recipients
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currentRoutingOrder"
    )]
    pub current_routing_order: String,
    /**
     * Envelope recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub editors: Vec<Editor>,
    /**
     * Envelope recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Envelope recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "inPersonSigners"
    )]
    pub in_person_signers: Vec<InPersonSigner>,
    /**
     * Envelope recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub intermediaries: Vec<Intermediary>,
    /**
     * Envelope recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub notaries: Vec<NotaryRecipient>,
    /**
     * Envelope recipients
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientCount"
    )]
    pub recipient_count: String,
    /**
     * Envelope recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub seals: Vec<SealSign>,
    /**
     * Envelope recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub signers: Vec<Signer>,
    /**
     * Envelope recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub witnesses: Vec<Witness>,
}

/// Envelope templates
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeTemplates {
    /**
     * Envelope templates
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub templates: Vec<TemplateSummary>,
}

/// This resource provides methods that enable account administrators to create and manage envelope transfer rules.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeTransferRules {
    /**
     * This resource provides methods that enable account administrators to create and manage envelope transfer rules.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     * This resource provides methods that enable account administrators to create and manage envelope transfer rules.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeTransferRules"
    )]
    pub envelope_transfer_rules: Vec<EnvelopeTransferRule>,
    /**
     * This resource provides methods that enable account administrators to create and manage envelope transfer rules.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     * This resource provides methods that enable account administrators to create and manage envelope transfer rules.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     * This resource provides methods that enable account administrators to create and manage envelope transfer rules.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     * This resource provides methods that enable account administrators to create and manage envelope transfer rules.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     * This resource provides methods that enable account administrators to create and manage envelope transfer rules.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

/// Embedding Envelope views
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeViews {
    /**
     * Embedding Envelope views
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub url: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeWorkflowDefinition {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currentWorkflowStepId"
    )]
    pub current_workflow_step_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workflowStatus"
    )]
    pub workflow_status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "workflowSteps"
    )]
    pub workflow_steps: Vec<WorkflowStep>,
}

/// Envelope creation, management
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Envelopes {
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessControlListBase64"
    )]
    pub access_control_list_base_64: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowComments"
    )]
    pub allow_comments: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowMarkup"
    )]
    pub allow_markup: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowReassign"
    )]
    pub allow_reassign: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowViewHistory"
    )]
    pub allow_view_history: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anySigner"
    )]
    pub any_signer: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub asynchronous: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "attachmentsUri"
    )]
    pub attachments_uri: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authoritativeCopy"
    )]
    pub authoritative_copy: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authoritativeCopyDefault"
    )]
    pub authoritative_copy_default: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "autoNavigation"
    )]
    pub auto_navigation: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "brandId"
    )]
    pub brand_id: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "brandLock"
    )]
    pub brand_lock: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "certificateUri"
    )]
    pub certificate_uri: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "completedDateTime"
    )]
    pub completed_date_time: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "copyRecipientData"
    )]
    pub copy_recipient_data: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdDateTime"
    )]
    pub created_date_time: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customFields"
    )]
    pub custom_fields: Option<AccountCustomFields>,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customFieldsUri"
    )]
    pub custom_fields_uri: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedDateTime"
    )]
    pub declined_date_time: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deletedDateTime"
    )]
    pub deleted_date_time: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveredDateTime"
    )]
    pub delivered_date_time: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableResponsiveDocument"
    )]
    pub disable_responsive_document: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentsCombinedUri"
    )]
    pub documents_combined_uri: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentsUri"
    )]
    pub documents_uri: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailBlurb"
    )]
    pub email_blurb: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailSettings"
    )]
    pub email_settings: Option<EmailSettings>,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailSubject"
    )]
    pub email_subject: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableWetSign"
    )]
    pub enable_wet_sign: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enforceSignerVisibility"
    )]
    pub enforce_signer_visibility: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeAttachments"
    )]
    pub envelope_attachments: Vec<Attachment>,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeDocuments"
    )]
    pub envelope_documents: Vec<EnvelopeDocument>,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeIdStamping"
    )]
    pub envelope_id_stamping: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeLocation"
    )]
    pub envelope_location: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "envelopeMetadata"
    )]
    pub envelope_metadata: Option<EnvelopeMetadata>,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeUri"
    )]
    pub envelope_uri: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expireAfter"
    )]
    pub expire_after: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expireDateTime"
    )]
    pub expire_date_time: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expireEnabled"
    )]
    pub expire_enabled: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalEnvelopeId"
    )]
    pub external_envelope_id: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub folders: Vec<Folder>,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hasComments"
    )]
    pub has_comments: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hasFormDataChanged"
    )]
    pub has_form_data_changed: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hasWavFile"
    )]
    pub has_wav_file: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub holder: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initialSentDateTime"
    )]
    pub initial_sent_date_time: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "is21CFRPart11"
    )]
    pub is_21cfr_part_11: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDynamicEnvelope"
    )]
    pub is_dynamic_envelope: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isSignatureProviderEnvelope"
    )]
    pub is_signature_provider_envelope: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModifiedDateTime"
    )]
    pub last_modified_date_time: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockInformation"
    )]
    pub lock_information: Option<EnvelopeLocks>,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "messageLock"
    )]
    pub message_lock: String,
    /**
     * Envelope creation, management
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notification: Option<Notification>,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "notificationUri"
    )]
    pub notification_uri: String,
    /**
     * Envelope creation, management
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "powerForm")]
    pub power_form: Option<PowerForm>,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "purgeCompletedDate"
    )]
    pub purge_completed_date: Option<chrono::NaiveDate>,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "purgeRequestDate"
    )]
    pub purge_request_date: Option<chrono::NaiveDate>,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "purgeState"
    )]
    pub purge_state: String,
    /**
     * Envelope creation, management
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recipients: Option<EnvelopeRecipients>,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientsLock"
    )]
    pub recipients_lock: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientsUri"
    )]
    pub recipients_uri: String,
    /**
     * Envelope creation, management
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sender: Option<UserInfo>,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentDateTime"
    )]
    pub sent_date_time: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerCanSignOnMobile"
    )]
    pub signer_can_sign_on_mobile: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingLocation"
    )]
    pub signing_location: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusChangedDateTime"
    )]
    pub status_changed_date_time: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusDateTime"
    )]
    pub status_date_time: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templatesUri"
    )]
    pub templates_uri: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "transactionId"
    )]
    pub transaction_id: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useDisclosure"
    )]
    pub use_disclosure: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "voidedDateTime"
    )]
    pub voided_date_time: String,
    /**
     * Envelope creation, management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "voidedReason"
    )]
    pub voided_reason: String,
    /**
     * Envelope creation, management
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workflow: Option<Workflow>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct FavoriteTemplates {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "favoriteTemplates"
    )]
    pub favorite_templates: Vec<FavoriteTemplatesContentItem>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "templatesUpdatedCount"
    )]
    pub templates_updated_count: i64,
}

/// Folder management
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Folders {
    /**
     * Folder management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     * Folder management
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub envelopes: Vec<EnvelopeSummary>,
    /**
     * Folder management
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub folders: Vec<Folder>,
    /**
     * Folder management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     * Folder management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     * Folder management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     * Folder management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     * Folder management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

/// If your account includes multiple signing brands, you can use the groups functionality to assign different brands to different groups. This resource enables you to manage group brands.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct GroupBrands {
    /**
     * If your account includes multiple signing brands, you can use the groups functionality to assign different brands to different groups. This resource enables you to manage group brands.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "brandOptions"
    )]
    pub brand_options: Vec<Brand>,
    /**
     * If your account includes multiple signing brands, you can use the groups functionality to assign different brands to different groups. This resource enables you to manage group brands.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientBrandIdDefault"
    )]
    pub recipient_brand_id_default: String,
    /**
     * If your account includes multiple signing brands, you can use the groups functionality to assign different brands to different groups. This resource enables you to manage group brands.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderBrandIdDefault"
    )]
    pub sender_brand_id_default: String,
}

/// Groups' users
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct GroupUsers {
    /**
     * Groups' users
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     * Groups' users
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     * Groups' users
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     * Groups' users
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     * Groups' users
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     * Groups' users
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
    /**
     * Groups' users
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub users: Vec<UserInfo>,
}

/// Group information
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Groups {
    /**
     * Group information
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     * Group information
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub groups: Vec<Group>,
    /**
     * Group information
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     * Group information
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     * Group information
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     * Group information
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     * Group information
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

/// Identity Verification enables you to verify a signer's identity before they can access a document. The `IdentityVerifications` resource provides a method that enables you to list the workflows that are available to an account.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct IdentityVerifications {
    /**
     * Identity Verification enables you to verify a signer's identity before they can access a document. The `IdentityVerifications` resource provides a method that enables you to list the workflows that are available to an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "identityVerification"
    )]
    pub identity_verification: Vec<AccountIdentityVerificationWorkflow>,
}

/// Invoices
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Invoices {
    /**
     * Invoices
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub amount: String,
    /**
     * Invoices
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub balance: String,
    /**
     * Invoices
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "dueDate"
    )]
    pub due_date: Option<chrono::NaiveDate>,
    /**
     * Invoices
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "invoiceId"
    )]
    pub invoice_id: String,
    /**
     * Invoices
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "invoiceItems"
    )]
    pub invoice_items: Vec<BillingInvoiceItem>,
    /**
     * Invoices
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "invoiceNumber"
    )]
    pub invoice_number: String,
    /**
     * Invoices
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "invoiceUri"
    )]
    pub invoice_uri: String,
    /**
     * Invoices
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nonTaxableAmount"
    )]
    pub non_taxable_amount: String,
    /**
     * Invoices
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pdfAvailable"
    )]
    pub pdf_available: String,
    /**
     * Invoices
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "taxableAmount"
    )]
    pub taxable_amount: String,
}

/// Use DocuSign eNotary to notarize documents digitally.
/// Check the [DocuSign eNotary support documentation](https://support.docusign.com/en/guides/ndse-user-guide-enotary-resources)
/// to see which jurisdictions are supported.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Notary {
    /**
     * Use DocuSign eNotary to notarize documents digitally.
     *  Check the [DocuSign eNotary support documentation](https://support.docusign.com/en/guides/ndse-user-guide-enotary-resources)
     *  to see which jurisdictions are supported.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "createdDate"
    )]
    pub created_date: Option<chrono::NaiveDate>,
    /**
     * Use DocuSign eNotary to notarize documents digitally.
     *  Check the [DocuSign eNotary support documentation](https://support.docusign.com/en/guides/ndse-user-guide-enotary-resources)
     *  to see which jurisdictions are supported.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub enabled: String,
    /**
     * Use DocuSign eNotary to notarize documents digitally.
     *  Check the [DocuSign eNotary support documentation](https://support.docusign.com/en/guides/ndse-user-guide-enotary-resources)
     *  to see which jurisdictions are supported.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub searchable: String,
    /**
     * Use DocuSign eNotary to notarize documents digitally.
     *  Check the [DocuSign eNotary support documentation](https://support.docusign.com/en/guides/ndse-user-guide-enotary-resources)
     *  to see which jurisdictions are supported.
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userInfo")]
    pub user_info: Option<UserInformation>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NotaryJournals {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "createdDate"
    )]
    pub created_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentName"
    )]
    pub document_name: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Jurisdiction>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "notaryJournalId"
    )]
    pub notary_journal_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notaryJournalMetaData"
    )]
    pub notary_journal_meta_data: Option<NotaryJournalMetaData>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerName"
    )]
    pub signer_name: String,
}

/// Creating, updating, and deleting notary jurisdiction objects.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NotaryJurisdiction {
    /**
     * Creating, updating, and deleting notary jurisdiction objects.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "commissionExpiration"
    )]
    pub commission_expiration: String,
    /**
     * Creating, updating, and deleting notary jurisdiction objects.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "commissionId"
    )]
    pub commission_id: String,
    /**
     * Creating, updating, and deleting notary jurisdiction objects.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub county: String,
    /**
     * Creating, updating, and deleting notary jurisdiction objects.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Creating, updating, and deleting notary jurisdiction objects.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Jurisdiction>,
    /**
     * Creating, updating, and deleting notary jurisdiction objects.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "registeredName"
    )]
    pub registered_name: String,
    /**
     * Creating, updating, and deleting notary jurisdiction objects.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sealType"
    )]
    pub seal_type: String,
}

/// The `NotificationDefaults` resource provides methods that enable you to manage the default notifications for envelopes.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NotificationDefaults {
    /**
     * The `NotificationDefaults` resource provides methods that enable you to manage the default notifications for envelopes.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "apiEmailNotifications"
    )]
    pub api_email_notifications: Option<NotificationDefaultSettings>,
    /**
     * The `NotificationDefaults` resource provides methods that enable you to manage the default notifications for envelopes.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailNotifications"
    )]
    pub email_notifications: Option<NotificationDefaultSettings>,
}

/// Information about a connected payment gateway account.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PaymentGatewayAccounts {
    /**
     * Information about a connected payment gateway account.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "allowCustomMetadata"
    )]
    pub allow_custom_metadata: bool,
    /**
     * Information about a connected payment gateway account.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<PaymentGatewayAccountSetting>,
    /**
     * Information about a connected payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayName"
    )]
    pub display_name: String,
    /**
     * Information about a connected payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isEnabled"
    )]
    pub is_enabled: String,
    /**
     * Information about a connected payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isLegacy"
    )]
    pub is_legacy: String,
    /**
     * Information about a connected payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModified"
    )]
    pub last_modified: String,
    /**
     * Information about a connected payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "payPalLegacySettings"
    )]
    pub pay_pal_legacy_settings: Option<PayPalLegacySettings>,
    /**
     * Information about a connected payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentGateway"
    )]
    pub payment_gateway: String,
    /**
     * Information about a connected payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentGatewayAccountId"
    )]
    pub payment_gateway_account_id: String,
    /**
     * Information about a connected payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentGatewayDisplayName"
    )]
    pub payment_gateway_display_name: String,
    /**
     * Information about a connected payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "supportedCurrencies"
    )]
    pub supported_currencies: Vec<String>,
    /**
     * Information about a connected payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "supportedPaymentMethods"
    )]
    pub supported_payment_methods: Vec<String>,
    /**
     * Information about a connected payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "supportedPaymentMethodsWithOptions"
    )]
    pub supported_payment_methods_with_options: Vec<PaymentMethodWithOptions>,
    /**
     * Information about a connected payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "zeroDecimalCurrencies"
    )]
    pub zero_decimal_currencies: Vec<String>,
}

/// Payments
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Payments {
    /**
     * Payments
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub amount: String,
    /**
     * Payments
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * Payments
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "paymentDate"
    )]
    pub payment_date: Option<chrono::NaiveDate>,
    /**
     * Payments
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentId"
    )]
    pub payment_id: String,
    /**
     * Payments
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentNumber"
    )]
    pub payment_number: String,
}

/// Data that recipients have entered in PowerForm fields.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PowerFormData {
    /**
     * Data that recipients have entered in PowerForm fields.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     * Data that recipients have entered in PowerForm fields.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub recipients: Vec<PowerFormDataRecipient>,
}

/// The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PowerForms {
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdBy"
    )]
    pub created_by: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdDateTime"
    )]
    pub created_date_time: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailBody"
    )]
    pub email_body: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailSubject"
    )]
    pub email_subject: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub envelopes: Vec<Envelope>,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub instructions: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isActive"
    )]
    pub is_active: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastUsed"
    )]
    pub last_used: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "limitUseInterval"
    )]
    pub limit_use_interval: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "limitUseIntervalEnabled"
    )]
    pub limit_use_interval_enabled: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "limitUseIntervalUnits"
    )]
    pub limit_use_interval_units: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxUseEnabled"
    )]
    pub max_use_enabled: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "powerFormId"
    )]
    pub power_form_id: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "powerFormUrl"
    )]
    pub power_form_url: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub recipients: Vec<PowerFormRecipient>,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderName"
    )]
    pub sender_name: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderUserId"
    )]
    pub sender_user_id: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingMode"
    )]
    pub signing_mode: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateId"
    )]
    pub template_id: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateName"
    )]
    pub template_name: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "timesUsed"
    )]
    pub times_used: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uri: String,
    /**
     * The PowerForms resource enables you to create fillable forms that you can email or make available for self service on the web.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "usesRemaining"
    )]
    pub uses_remaining: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Reports {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub reports: Vec<ReportInProductListItem>,
}

/// Request logs
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RequestLogs {
    /**
     * Request logs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "apiRequestLogMaxEntries"
    )]
    pub api_request_log_max_entries: String,
    /**
     * Request logs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "apiRequestLogRemainingEntries"
    )]
    pub api_request_log_remaining_entries: String,
    /**
     * Request logs
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "apiRequestLogging"
    )]
    pub api_request_logging: String,
}

/// API resource information
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Resources {
    /**
     * API resource information
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub resources: Vec<NameValue>,
}

/// This resource is used to create a responsive preview of all of the documents in an envelope.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ResponsiveHtmlPreview {
    /**
     * This resource is used to create a responsive preview of all of the documents in an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "htmlDefinitions"
    )]
    pub html_definitions: Vec<String>,
}

/// API service information
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Services {
    /**
     * API service information
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "buildBranch"
    )]
    pub build_branch: String,
    /**
     * API service information
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "buildBranchDeployedDateTime"
    )]
    pub build_branch_deployed_date_time: String,
    /**
     * API service information
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "buildSHA"
    )]
    pub build_sha: String,
    /**
     * API service information
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "buildVersion"
    )]
    pub build_version: String,
    /**
     * API service information
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "linkedSites"
    )]
    pub linked_sites: Vec<String>,
    /**
     * API service information
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "serviceVersions"
    )]
    pub service_versions: Vec<ServiceVersion>,
}

/// Signing groups' users
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SigningGroupUsers {
    /**
     * Signing groups' users
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub users: Vec<SigningGroupUser>,
}

/// Signing groups
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SigningGroups {
    /**
     * Signing groups
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub created: String,
    /**
     * Signing groups
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdBy"
    )]
    pub created_by: String,
    /**
     * Signing groups
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Signing groups
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupEmail"
    )]
    pub group_email: String,
    /**
     * Signing groups
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupName"
    )]
    pub group_name: String,
    /**
     * Signing groups
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupType"
    )]
    pub group_type: String,
    /**
     * Signing groups
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub modified: String,
    /**
     * Signing groups
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "modifiedBy"
    )]
    pub modified_by: String,
    /**
     * Signing groups
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupId"
    )]
    pub signing_group_id: String,
    /**
     * Signing groups
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub users: Vec<SigningGroupUser>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TabsBlob {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowTabOrder"
    )]
    pub allow_tab_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowTabOrderMetadata"
    )]
    pub allow_tab_order_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "approveDeclineTabsEnabled"
    )]
    pub approve_decline_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approveDeclineTabsMetadata"
    )]
    pub approve_decline_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "calculatedFieldsEnabled"
    )]
    pub calculated_fields_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "calculatedFieldsMetadata"
    )]
    pub calculated_fields_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "checkBoxTabsMetadata"
    )]
    pub check_box_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "checkboxTabsEnabled"
    )]
    pub checkbox_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "dataFieldRegexEnabled"
    )]
    pub data_field_regex_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataFieldRegexMetadata"
    )]
    pub data_field_regex_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "dataFieldSizeEnabled"
    )]
    pub data_field_size_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataFieldSizeMetadata"
    )]
    pub data_field_size_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "drawTabsEnabled"
    )]
    pub draw_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "drawTabsMetadata"
    )]
    pub draw_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "firstLastEmailTabsEnabled"
    )]
    pub first_last_email_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "firstLastEmailTabsMetadata"
    )]
    pub first_last_email_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "listTabsEnabled"
    )]
    pub list_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "listTabsMetadata"
    )]
    pub list_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "noteTabsEnabled"
    )]
    pub note_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteTabsMetadata"
    )]
    pub note_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "prefillTabsEnabled"
    )]
    pub prefill_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "prefillTabsMetadata"
    )]
    pub prefill_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "radioTabsEnabled"
    )]
    pub radio_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "radioTabsMetadata"
    )]
    pub radio_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "savingCustomTabsEnabled"
    )]
    pub saving_custom_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "savingCustomTabsMetadata"
    )]
    pub saving_custom_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderToChangeTabAssignmentsEnabled"
    )]
    pub sender_to_change_tab_assignments_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "senderToChangeTabAssignmentsMetadata"
    )]
    pub sender_to_change_tab_assignments_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sharedCustomTabsEnabled"
    )]
    pub shared_custom_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharedCustomTabsMetadata"
    )]
    pub shared_custom_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabDataLabelEnabled"
    )]
    pub tab_data_label_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabDataLabelMetadata"
    )]
    pub tab_data_label_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLocationEnabled"
    )]
    pub tab_location_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLocationMetadata"
    )]
    pub tab_location_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLockingEnabled"
    )]
    pub tab_locking_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLockingMetadata"
    )]
    pub tab_locking_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabScaleEnabled"
    )]
    pub tab_scale_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabScaleMetadata"
    )]
    pub tab_scale_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabTextFormattingEnabled"
    )]
    pub tab_text_formatting_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTextFormattingMetadata"
    )]
    pub tab_text_formatting_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "textTabsEnabled"
    )]
    pub text_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "textTabsMetadata"
    )]
    pub text_tabs_metadata: Option<SettingsMetadata>,
}

/// Template bulk recipients
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateBulkRecipients {
    /**
     * Template bulk recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "bulkRecipients"
    )]
    pub bulk_recipients: Vec<BulkRecipient>,
    /**
     * Template bulk recipients
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     * Template bulk recipients
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     * Template bulk recipients
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     * Template bulk recipients
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     * Template bulk recipients
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     * Template bulk recipients
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

/// A template custom field enables you to prepopulate custom metadata for all new envelopes that are created by using a specific template. You can then use the custom data for sorting, organizing, searching, and other downstream processes.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateCustomFields {
    /**
     * A template custom field enables you to prepopulate custom metadata for all new envelopes that are created by using a specific template. You can then use the custom data for sorting, organizing, searching, and other downstream processes.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "listCustomFields"
    )]
    pub list_custom_fields: Vec<ListCustomField>,
    /**
     * A template custom field enables you to prepopulate custom metadata for all new envelopes that are created by using a specific template. You can then use the custom data for sorting, organizing, searching, and other downstream processes.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "textCustomFields"
    )]
    pub text_custom_fields: Vec<TextCustomField>,
}

/// Template document fields
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateDocumentFields {
    /**
     * Template document fields
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentFields"
    )]
    pub document_fields: Vec<NameValue>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateDocumentHtmlDefinitions {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "htmlDefinitions"
    )]
    pub html_definitions: Vec<DocumentHtmlDefinitionOriginal>,
}

/// This resource is used to create a responsive preview of a specific template document.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateDocumentResponsiveHtmlPreview {
    /**
     * This resource is used to create a responsive preview of a specific template document.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "htmlDefinitions"
    )]
    pub html_definitions: Vec<String>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateDocumentTabs {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "approveTabs"
    )]
    pub approve_tabs: Vec<Approve>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "checkboxTabs"
    )]
    pub checkbox_tabs: Vec<Checkbox>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commentThreadTabs"
    )]
    pub comment_thread_tabs: Vec<CommentThread>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionCountyTabs"
    )]
    pub commission_county_tabs: Vec<CommissionCounty>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionExpirationTabs"
    )]
    pub commission_expiration_tabs: Vec<CommissionExpiration>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionNumberTabs"
    )]
    pub commission_number_tabs: Vec<CommissionNumber>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionStateTabs"
    )]
    pub commission_state_tabs: Vec<CommissionState>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "companyTabs"
    )]
    pub company_tabs: Vec<Company>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "currencyTabs"
    )]
    pub currency_tabs: Vec<Currency>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "dateSignedTabs"
    )]
    pub date_signed_tabs: Vec<DateSigned>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "dateTabs"
    )]
    pub date_tabs: Vec<Date>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "declineTabs"
    )]
    pub decline_tabs: Vec<Decline>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "drawTabs"
    )]
    pub draw_tabs: Vec<Draw>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "emailAddressTabs"
    )]
    pub email_address_tabs: Vec<EmailAddress>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "emailTabs"
    )]
    pub email_tabs: Vec<Email>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeIdTabs"
    )]
    pub envelope_id_tabs: Vec<EnvelopeId>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "firstNameTabs"
    )]
    pub first_name_tabs: Vec<FirstName>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "formulaTabs"
    )]
    pub formula_tabs: Vec<FormulaTab>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "fullNameTabs"
    )]
    pub full_name_tabs: Vec<FullName>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "initialHereTabs"
    )]
    pub initial_here_tabs: Vec<InitialHere>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "lastNameTabs"
    )]
    pub last_name_tabs: Vec<LastName>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "listTabs"
    )]
    pub list_tabs: Vec<List>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "notarizeTabs"
    )]
    pub notarize_tabs: Vec<Notarize>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "notarySealTabs"
    )]
    pub notary_seal_tabs: Vec<NotarySeal>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "noteTabs"
    )]
    pub note_tabs: Vec<Note>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "numberTabs"
    )]
    pub number_tabs: Vec<Number>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "phoneNumberTabs"
    )]
    pub phone_number_tabs: Vec<PhoneNumber>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "polyLineOverlayTabs"
    )]
    pub poly_line_overlay_tabs: Vec<PolyLineOverlay>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "prefillTabs"
    )]
    pub prefill_tabs: Option<PrefillTabs>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "radioGroupTabs"
    )]
    pub radio_group_tabs: Vec<RadioGroup>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signHereTabs"
    )]
    pub sign_here_tabs: Vec<SignHere>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signerAttachmentTabs"
    )]
    pub signer_attachment_tabs: Vec<SignerAttachment>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "smartSectionTabs"
    )]
    pub smart_section_tabs: Vec<SmartSection>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "ssnTabs"
    )]
    pub ssn_tabs: Vec<Ssn>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroups"
    )]
    pub tab_groups: Vec<TabGroup>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "textTabs"
    )]
    pub text_tabs: Vec<Text>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "titleTabs"
    )]
    pub title_tabs: Vec<Title>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "viewTabs"
    )]
    pub view_tabs: Vec<View>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "zipTabs"
    )]
    pub zip_tabs: Vec<Zip>,
}

/// Document Visibility enables senders to control the visibility of the documents in an envelope at the recipient level. For example, if the parties associated with a legal proceeding should have access to different documents, the Document Visibility feature enables you to keep all of the documents in the same envelope and set view permissions for the documents by recipient. This functionality is enabled for envelopes and templates. It is not available for PowerForms.
///
/// **Note**: Before you use Document Visibility, you should be aware of the following information:
///
/// - Document Visibility must be enabled for your account by your DocuSign administrator.
/// - A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document.
/// - When the Document Visibility setting hides a document from a recipient, the document also does not appear in the recipient's list of envelopes, documents, or page images.
/// - Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all of the documents associated with the envelope or template.
///
/// The Document Visibility feature has multiple settings that specify the options that senders have when sending documents. For more information, see [Use Document Visibility to Control Recipient Access](https://support.docusign.com/en/guides/ndse-user-guide-document-visibility).
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateDocumentVisibility {
    /**
     * Document Visibility enables senders to control the visibility of the documents in an envelope at the recipient level. For example, if the parties associated with a legal proceeding should have access to different documents, the Document Visibility feature enables you to keep all of the documents in the same envelope and set view permissions for the documents by recipient. This functionality is enabled for envelopes and templates. It is not available for PowerForms.
     *  
     *  \*\*Note\*\*: Before you use Document Visibility, you should be aware of the following information:
     *  
     *  - Document Visibility must be enabled for your account by your DocuSign administrator.
     *  - A document cannot be hidden from a recipient if the recipient has tabs assigned to them on the document.
     *  - When the Document Visibility setting hides a document from a recipient, the document also does not appear in the recipient's list of envelopes, documents, or page images.
     *  - Carbon Copy, Certified Delivery (Needs to Sign), Editor, and Agent recipients can always see all of the documents associated with the envelope or template.
     *  
     *  The Document Visibility feature has multiple settings that specify the options that senders have when sending documents. For more information, see [Use Document Visibility to Control Recipient Access](https://support.docusign.com/en/guides/ndse-user-guide-document-visibility).
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentVisibility"
    )]
    pub document_visibility: Vec<DocumentVisibility>,
}

/// Template documents
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateDocuments {
    /**
     * Template documents
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "templateDocuments"
    )]
    pub template_documents: Vec<EnvelopeDocument>,
    /**
     * Template documents
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateId"
    )]
    pub template_id: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateHtmlDefinitions {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "htmlDefinitions"
    )]
    pub html_definitions: Vec<DocumentHtmlDefinitionOriginal>,
}

/// This section provides information about template locks. You use template locks to prevent others from making changes to a template while you are modifying it.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateLocks {
    /**
     * This section provides information about template locks. You use template locks to prevent others from making changes to a template while you are modifying it.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * This section provides information about template locks. You use template locks to prevent others from making changes to a template while you are modifying it.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockDurationInSeconds"
    )]
    pub lock_duration_in_seconds: String,
    /**
     * This section provides information about template locks. You use template locks to prevent others from making changes to a template while you are modifying it.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockToken"
    )]
    pub lock_token: String,
    /**
     * This section provides information about template locks. You use template locks to prevent others from making changes to a template while you are modifying it.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockType"
    )]
    pub lock_type: String,
    /**
     * This section provides information about template locks. You use template locks to prevent others from making changes to a template while you are modifying it.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedByApp"
    )]
    pub locked_by_app: String,
    /**
     * This section provides information about template locks. You use template locks to prevent others from making changes to a template while you are modifying it.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedByUser"
    )]
    pub locked_by_user: Option<UserInfo>,
    /**
     * This section provides information about template locks. You use template locks to prevent others from making changes to a template while you are modifying it.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedUntilDateTime"
    )]
    pub locked_until_date_time: String,
    /**
     * This section provides information about template locks. You use template locks to prevent others from making changes to a template while you are modifying it.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useScratchPad"
    )]
    pub use_scratch_pad: String,
}

/// Template tabs
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateRecipientTabs {
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "approveTabs"
    )]
    pub approve_tabs: Vec<Approve>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "checkboxTabs"
    )]
    pub checkbox_tabs: Vec<Checkbox>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commentThreadTabs"
    )]
    pub comment_thread_tabs: Vec<CommentThread>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionCountyTabs"
    )]
    pub commission_county_tabs: Vec<CommissionCounty>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionExpirationTabs"
    )]
    pub commission_expiration_tabs: Vec<CommissionExpiration>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionNumberTabs"
    )]
    pub commission_number_tabs: Vec<CommissionNumber>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionStateTabs"
    )]
    pub commission_state_tabs: Vec<CommissionState>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "companyTabs"
    )]
    pub company_tabs: Vec<Company>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "currencyTabs"
    )]
    pub currency_tabs: Vec<Currency>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "dateSignedTabs"
    )]
    pub date_signed_tabs: Vec<DateSigned>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "dateTabs"
    )]
    pub date_tabs: Vec<Date>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "declineTabs"
    )]
    pub decline_tabs: Vec<Decline>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "drawTabs"
    )]
    pub draw_tabs: Vec<Draw>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "emailAddressTabs"
    )]
    pub email_address_tabs: Vec<EmailAddress>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "emailTabs"
    )]
    pub email_tabs: Vec<Email>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeIdTabs"
    )]
    pub envelope_id_tabs: Vec<EnvelopeId>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "firstNameTabs"
    )]
    pub first_name_tabs: Vec<FirstName>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "formulaTabs"
    )]
    pub formula_tabs: Vec<FormulaTab>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "fullNameTabs"
    )]
    pub full_name_tabs: Vec<FullName>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "initialHereTabs"
    )]
    pub initial_here_tabs: Vec<InitialHere>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "lastNameTabs"
    )]
    pub last_name_tabs: Vec<LastName>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "listTabs"
    )]
    pub list_tabs: Vec<List>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "notarizeTabs"
    )]
    pub notarize_tabs: Vec<Notarize>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "notarySealTabs"
    )]
    pub notary_seal_tabs: Vec<NotarySeal>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "noteTabs"
    )]
    pub note_tabs: Vec<Note>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "numberTabs"
    )]
    pub number_tabs: Vec<Number>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "phoneNumberTabs"
    )]
    pub phone_number_tabs: Vec<PhoneNumber>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "polyLineOverlayTabs"
    )]
    pub poly_line_overlay_tabs: Vec<PolyLineOverlay>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "prefillTabs"
    )]
    pub prefill_tabs: Option<PrefillTabs>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "radioGroupTabs"
    )]
    pub radio_group_tabs: Vec<RadioGroup>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signHereTabs"
    )]
    pub sign_here_tabs: Vec<SignHere>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signerAttachmentTabs"
    )]
    pub signer_attachment_tabs: Vec<SignerAttachment>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "smartSectionTabs"
    )]
    pub smart_section_tabs: Vec<SmartSection>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "ssnTabs"
    )]
    pub ssn_tabs: Vec<Ssn>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroups"
    )]
    pub tab_groups: Vec<TabGroup>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "textTabs"
    )]
    pub text_tabs: Vec<Text>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "titleTabs"
    )]
    pub title_tabs: Vec<Title>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "viewTabs"
    )]
    pub view_tabs: Vec<View>,
    /**
     * Template tabs
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "zipTabs"
    )]
    pub zip_tabs: Vec<Zip>,
}

/// Template recipients
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateRecipients {
    /**
     * Template recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub agents: Vec<Agent>,
    /**
     * Template recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "carbonCopies"
    )]
    pub carbon_copies: Vec<CarbonCopy>,
    /**
     * Template recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "certifiedDeliveries"
    )]
    pub certified_deliveries: Vec<CertifiedDelivery>,
    /**
     * Template recipients
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currentRoutingOrder"
    )]
    pub current_routing_order: String,
    /**
     * Template recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub editors: Vec<Editor>,
    /**
     * Template recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Template recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "inPersonSigners"
    )]
    pub in_person_signers: Vec<InPersonSigner>,
    /**
     * Template recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub intermediaries: Vec<Intermediary>,
    /**
     * Template recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub notaries: Vec<NotaryRecipient>,
    /**
     * Template recipients
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientCount"
    )]
    pub recipient_count: String,
    /**
     * Template recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub seals: Vec<SealSign>,
    /**
     * Template recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub signers: Vec<Signer>,
    /**
     * Template recipients
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub witnesses: Vec<Witness>,
}

/// This resource is used to create a responsive preview of all of the documents associated with a template.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateResponsiveHtmlPreview {
    /**
     * This resource is used to create a responsive preview of all of the documents associated with a template.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "htmlDefinitions"
    )]
    pub html_definitions: Vec<String>,
}

/// A TemplateView contains a URL that you can embed in your application to generate a template view that uses the DocuSign user interface (UI).
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateViews {
    /**
     * A TemplateView contains a URL that you can embed in your application to generate a template view that uses the DocuSign user interface (UI).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub url: String,
}

/// Template management
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Templates {
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessControlListBase64"
    )]
    pub access_control_list_base_64: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowComments"
    )]
    pub allow_comments: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowMarkup"
    )]
    pub allow_markup: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowReassign"
    )]
    pub allow_reassign: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowViewHistory"
    )]
    pub allow_view_history: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anySigner"
    )]
    pub any_signer: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub asynchronous: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "attachmentsUri"
    )]
    pub attachments_uri: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authoritativeCopy"
    )]
    pub authoritative_copy: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authoritativeCopyDefault"
    )]
    pub authoritative_copy_default: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "autoMatch"
    )]
    pub auto_match: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "autoMatchSpecifiedByUser"
    )]
    pub auto_match_specified_by_user: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "autoNavigation"
    )]
    pub auto_navigation: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "brandId"
    )]
    pub brand_id: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "brandLock"
    )]
    pub brand_lock: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "certificateUri"
    )]
    pub certificate_uri: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "completedDateTime"
    )]
    pub completed_date_time: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "copyRecipientData"
    )]
    pub copy_recipient_data: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub created: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdDateTime"
    )]
    pub created_date_time: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customFields"
    )]
    pub custom_fields: Option<AccountCustomFields>,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customFieldsUri"
    )]
    pub custom_fields_uri: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedDateTime"
    )]
    pub declined_date_time: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deletedDateTime"
    )]
    pub deleted_date_time: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveredDateTime"
    )]
    pub delivered_date_time: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableResponsiveDocument"
    )]
    pub disable_responsive_document: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub documents: Vec<Document>,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentsCombinedUri"
    )]
    pub documents_combined_uri: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentsUri"
    )]
    pub documents_uri: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailBlurb"
    )]
    pub email_blurb: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailSettings"
    )]
    pub email_settings: Option<EmailSettings>,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailSubject"
    )]
    pub email_subject: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableWetSign"
    )]
    pub enable_wet_sign: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enforceSignerVisibility"
    )]
    pub enforce_signer_visibility: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeAttachments"
    )]
    pub envelope_attachments: Vec<Attachment>,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeDocuments"
    )]
    pub envelope_documents: Vec<EnvelopeDocument>,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeIdStamping"
    )]
    pub envelope_id_stamping: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeLocation"
    )]
    pub envelope_location: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "envelopeMetadata"
    )]
    pub envelope_metadata: Option<EnvelopeMetadata>,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeUri"
    )]
    pub envelope_uri: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expireAfter"
    )]
    pub expire_after: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expireDateTime"
    )]
    pub expire_date_time: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expireEnabled"
    )]
    pub expire_enabled: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalEnvelopeId"
    )]
    pub external_envelope_id: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "favoritedByMe"
    )]
    pub favorited_by_me: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "folderId"
    )]
    pub folder_id: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "folderIds"
    )]
    pub folder_ids: Vec<String>,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "folderName"
    )]
    pub folder_name: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub folders: Vec<Folder>,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hasComments"
    )]
    pub has_comments: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hasFormDataChanged"
    )]
    pub has_form_data_changed: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hasWavFile"
    )]
    pub has_wav_file: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub holder: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initialSentDateTime"
    )]
    pub initial_sent_date_time: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "is21CFRPart11"
    )]
    pub is_21cfr_part_11: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDynamicEnvelope"
    )]
    pub is_dynamic_envelope: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isSignatureProviderEnvelope"
    )]
    pub is_signature_provider_envelope: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModified"
    )]
    pub last_modified: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastModifiedBy"
    )]
    pub last_modified_by: Option<UserInfo>,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModifiedDateTime"
    )]
    pub last_modified_date_time: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastUsed"
    )]
    pub last_used: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockInformation"
    )]
    pub lock_information: Option<EnvelopeLocks>,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "messageLock"
    )]
    pub message_lock: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "newPassword"
    )]
    pub new_password: String,
    /**
     * Template management
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notification: Option<Notification>,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "notificationUri"
    )]
    pub notification_uri: String,
    /**
     * Template management
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<UserInfo>,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageCount"
    )]
    pub page_count: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordProtected"
    )]
    pub password_protected: String,
    /**
     * Template management
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "powerForm")]
    pub power_form: Option<PowerForm>,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "powerForms"
    )]
    pub power_forms: Vec<PowerForm>,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "purgeCompletedDate"
    )]
    pub purge_completed_date: Option<chrono::NaiveDate>,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "purgeRequestDate"
    )]
    pub purge_request_date: Option<chrono::NaiveDate>,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "purgeState"
    )]
    pub purge_state: String,
    /**
     * Template management
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recipients: Option<EnvelopeRecipients>,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientsLock"
    )]
    pub recipients_lock: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientsUri"
    )]
    pub recipients_uri: String,
    /**
     * Template management
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sender: Option<UserInfo>,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentDateTime"
    )]
    pub sent_date_time: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerCanSignOnMobile"
    )]
    pub signer_can_sign_on_mobile: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingLocation"
    )]
    pub signing_location: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusChangedDateTime"
    )]
    pub status_changed_date_time: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusDateTime"
    )]
    pub status_date_time: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateId"
    )]
    pub template_id: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templatesUri"
    )]
    pub templates_uri: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "transactionId"
    )]
    pub transaction_id: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uri: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useDisclosure"
    )]
    pub use_disclosure: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "voidedDateTime"
    )]
    pub voided_date_time: String,
    /**
     * Template management
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "voidedReason"
    )]
    pub voided_reason: String,
    /**
     * Template management
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workflow: Option<Workflow>,
}

/// Users' custom settings
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct UserCustomSettings {
    /**
     * Users' custom settings
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "customSettings"
    )]
    pub custom_settings: Vec<NameValue>,
}

/// Users' profiles
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct UserProfiles {
    /**
     * Users' profiles
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<AddressInformation>,
    /**
     * Users' profiles
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "authenticationMethods"
    )]
    pub authentication_methods: Vec<AuthenticationMethod>,
    /**
     * Users' profiles
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "companyName"
    )]
    pub company_name: String,
    /**
     * Users' profiles
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayOrganizationInfo"
    )]
    pub display_organization_info: String,
    /**
     * Users' profiles
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayPersonalInfo"
    )]
    pub display_personal_info: String,
    /**
     * Users' profiles
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayProfile"
    )]
    pub display_profile: String,
    /**
     * Users' profiles
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayUsageHistory"
    )]
    pub display_usage_history: String,
    /**
     * Users' profiles
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "profileImageUri"
    )]
    pub profile_image_uri: String,
    /**
     * Users' profiles
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub title: String,
    /**
     * Users' profiles
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "usageHistory"
    )]
    pub usage_history: Option<UsageHistory>,
    /**
     * Users' profiles
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userDetails"
    )]
    pub user_details: Option<UserInformation>,
    /**
     * Users' profiles
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "userProfileLastModifiedDate"
    )]
    pub user_profile_last_modified_date: Option<chrono::NaiveDate>,
}

/// Users' signatures
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct UserSignatures {
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "adoptedDateTime"
    )]
    pub adopted_date_time: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdDateTime"
    )]
    pub created_date_time: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customField"
    )]
    pub custom_field: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dateStampProperties"
    )]
    pub date_stamp_properties: Option<DateStampProperties>,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disallowUserResizeStamp"
    )]
    pub disallow_user_resize_stamp: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalID"
    )]
    pub external_id: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "imageBase64"
    )]
    pub image_base_64: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "imageType"
    )]
    pub image_type: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initials150ImageId"
    )]
    pub initials_150_image_id: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initialsImageUri"
    )]
    pub initials_image_uri: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDefault"
    )]
    pub is_default: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModifiedDateTime"
    )]
    pub last_modified_date_time: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nrdsId"
    )]
    pub nrds_id: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nrdsLastName"
    )]
    pub nrds_last_name: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nrdsStatus"
    )]
    pub nrds_status: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "phoneticName"
    )]
    pub phonetic_name: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signature150ImageId"
    )]
    pub signature_150_image_id: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureFont"
    )]
    pub signature_font: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureId"
    )]
    pub signature_id: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureImageUri"
    )]
    pub signature_image_uri: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureInitials"
    )]
    pub signature_initials: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureName"
    )]
    pub signature_name: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureRights"
    )]
    pub signature_rights: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureType"
    )]
    pub signature_type: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampFormat"
    )]
    pub stamp_format: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampImageUri"
    )]
    pub stamp_image_uri: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampSizeMM"
    )]
    pub stamp_size_mm: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampType"
    )]
    pub stamp_type: String,
    /**
     * Users' signatures
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
}

/// The Users resource enables you to create and manage account users.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Users {
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "activationAccessCode"
    )]
    pub activation_access_code: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub company: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "connectConfigurations"
    )]
    pub connect_configurations: Vec<ConnectUserObject>,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "countryCode"
    )]
    pub country_code: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdDateTime"
    )]
    pub created_date_time: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "customSettings"
    )]
    pub custom_settings: Vec<NameValue>,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "defaultAccountId"
    )]
    pub default_account_id: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableConnectForUser"
    )]
    pub enable_connect_for_user: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "firstName"
    )]
    pub first_name: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forgottenPasswordInfo"
    )]
    pub forgotten_password_info: Option<ForgottenPasswordInformation>,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "groupList"
    )]
    pub group_list: Vec<Group>,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "hasRemoteNotary"
    )]
    pub has_remote_notary: bool,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "homeAddress"
    )]
    pub home_address: Option<AddressInformation>,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initialsImageUri"
    )]
    pub initials_image_uri: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isAdmin"
    )]
    pub is_admin: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isNAREnabled"
    )]
    pub is_nar_enabled: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastLogin"
    )]
    pub last_login: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastName"
    )]
    pub last_name: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "loginStatus"
    )]
    pub login_status: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "middleName"
    )]
    pub middle_name: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordExpiration"
    )]
    pub password_expiration: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "permissionProfileId"
    )]
    pub permission_profile_id: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "permissionProfileName"
    )]
    pub permission_profile_name: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "profileImageUri"
    )]
    pub profile_image_uri: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sendActivationEmail"
    )]
    pub send_activation_email: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sendActivationOnInvalidLogin"
    )]
    pub send_activation_on_invalid_login: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureImageUri"
    )]
    pub signature_image_uri: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub subscribe: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "suffixName"
    )]
    pub suffix_name: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub title: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uri: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userAddedToAccountDateTime"
    )]
    pub user_added_to_account_date_time: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userName"
    )]
    pub user_name: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "userProfileLastModifiedDate"
    )]
    pub user_profile_last_modified_date: Option<chrono::NaiveDate>,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userSettings"
    )]
    pub user_settings: Option<UserSettingsInformation>,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userStatus"
    )]
    pub user_status: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userType"
    )]
    pub user_type: String,
    /**
     * The Users resource enables you to create and manage account users.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workAddress"
    )]
    pub work_address: Option<AddressInformation>,
}

/// This object contains information about a file or folder in a workspace.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct WorkspaceItems {
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "callerAuthorization"
    )]
    pub caller_authorization: Option<WorkspaceUserAuthorization>,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "contentType"
    )]
    pub content_type: String,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub created: String,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdById"
    )]
    pub created_by_id: String,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createdByInformation"
    )]
    pub created_by_information: Option<WorkspaceUser>,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension: String,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fileSize"
    )]
    pub file_size: String,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fileUri"
    )]
    pub file_uri: String,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isPublic"
    )]
    pub is_public: String,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModified"
    )]
    pub last_modified: String,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModifiedById"
    )]
    pub last_modified_by_id: String,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastModifiedByInformation"
    )]
    pub last_modified_by_information: Option<WorkspaceUser>,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageCount"
    )]
    pub page_count: String,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "parentFolderId"
    )]
    pub parent_folder_id: String,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "parentFolderUri"
    )]
    pub parent_folder_uri: String,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sha256"
    )]
    pub sha_256: String,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "thumbHeight"
    )]
    pub thumb_height: String,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "thumbWidth"
    )]
    pub thumb_width: String,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(default)]
    pub thumbnail: Page,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uri: String,
    /**
     * This object contains information about a file or folder in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userAuthorization"
    )]
    pub user_authorization: Option<WorkspaceUserAuthorization>,
}

/// A DocuSign workspace is a collaboration area for sharing files and data.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Workspaces {
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "billableAccountId"
    )]
    pub billable_account_id: String,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "callerInformation"
    )]
    pub caller_information: Option<WorkspaceUser>,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub created: String,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createdByInformation"
    )]
    pub created_by_information: Option<WorkspaceUser>,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModified"
    )]
    pub last_modified: String,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastModifiedByInformation"
    )]
    pub last_modified_by_information: Option<WorkspaceUser>,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<WorkspaceSettings>,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workspaceBaseUrl"
    )]
    pub workspace_base_url: String,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workspaceDescription"
    )]
    pub workspace_description: String,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workspaceId"
    )]
    pub workspace_id: String,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workspaceName"
    )]
    pub workspace_name: String,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workspaceUri"
    )]
    pub workspace_uri: String,
}

/// Object specifying the format of the string provided to a recipient in order to access an envelope.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccessCodeFormat {
    /**
     * Object specifying the format of the string provided to a recipient in order to access an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formatRequired"
    )]
    pub format_required: String,
    /**
     * Object specifying the format of the string provided to a recipient in order to access an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formatRequiredMetadata"
    )]
    pub format_required_metadata: Option<SettingsMetadata>,
    /**
     * Object specifying the format of the string provided to a recipient in order to access an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "letterRequired"
    )]
    pub letter_required: String,
    /**
     * Object specifying the format of the string provided to a recipient in order to access an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "letterRequiredMetadata"
    )]
    pub letter_required_metadata: Option<SettingsMetadata>,
    /**
     * Object specifying the format of the string provided to a recipient in order to access an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "minimumLength"
    )]
    pub minimum_length: String,
    /**
     * Object specifying the format of the string provided to a recipient in order to access an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minimumLengthMetadata"
    )]
    pub minimum_length_metadata: Option<SettingsMetadata>,
    /**
     * Object specifying the format of the string provided to a recipient in order to access an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "numberRequired"
    )]
    pub number_required: String,
    /**
     * Object specifying the format of the string provided to a recipient in order to access an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numberRequiredMetadata"
    )]
    pub number_required_metadata: Option<SettingsMetadata>,
    /**
     * Object specifying the format of the string provided to a recipient in order to access an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "specialCharacterRequired"
    )]
    pub special_character_required: String,
    /**
     * Object specifying the format of the string provided to a recipient in order to access an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "specialCharacterRequiredMetadata"
    )]
    pub special_character_required_metadata: Option<SettingsMetadata>,
}

/// Contains information about the address associated with the account.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountAddress {
    /**
     * Contains information about the address associated with the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "address1"
    )]
    pub address_1: String,
    /**
     * Contains information about the address associated with the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "address2"
    )]
    pub address_2: String,
    /**
     * Contains information about the address associated with the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub city: String,
    /**
     * Contains information about the address associated with the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country: String,
    /**
     * Contains information about the address associated with the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Contains information about the address associated with the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub fax: String,
    /**
     * Contains information about the address associated with the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "firstName"
    )]
    pub first_name: String,
    /**
     * Contains information about the address associated with the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastName"
    )]
    pub last_name: String,
    /**
     * Contains information about the address associated with the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone: String,
    /**
     * Contains information about the address associated with the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "postalCode"
    )]
    pub postal_code: String,
    /**
     * Contains information about the address associated with the account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub state: String,
    /**
     * Contains information about the address associated with the account.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "supportedCountries"
    )]
    pub supported_countries: Vec<Country>,
}

/// Contains information about an account billing plan.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountBillingPlan {
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "addOns"
    )]
    pub add_ons: Vec<AddOn>,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "appStoreReceiptExpirationDate"
    )]
    pub app_store_receipt_expiration_date: Option<chrono::NaiveDate>,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "appStoreReceiptPurchaseDate"
    )]
    pub app_store_receipt_purchase_date: Option<chrono::NaiveDate>,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canCancelRenewal"
    )]
    pub can_cancel_renewal: String,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canUpgrade"
    )]
    pub can_upgrade: String,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currencyCode"
    )]
    pub currency_code: String,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "downgradePlanInformation"
    )]
    pub downgrade_plan_information: Option<DowngradePlanUpdateResponse>,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSupport"
    )]
    pub enable_support: String,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includedSeats"
    )]
    pub included_seats: String,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "incrementalSeats"
    )]
    pub incremental_seats: String,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDowngrade"
    )]
    pub is_downgrade: String,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "notificationType"
    )]
    pub notification_type: String,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "otherDiscountPercent"
    )]
    pub other_discount_percent: String,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentCycle"
    )]
    pub payment_cycle: String,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentMethod"
    )]
    pub payment_method: String,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "perSeatPrice"
    )]
    pub per_seat_price: String,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "planClassification"
    )]
    pub plan_classification: String,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "planFeatureSets"
    )]
    pub plan_feature_sets: Vec<FeatureSet>,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "planId"
    )]
    pub plan_id: String,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "planName"
    )]
    pub plan_name: String,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "renewalStatus"
    )]
    pub renewal_status: String,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "seatDiscounts"
    )]
    pub seat_discounts: Vec<SeatDiscount>,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "supportIncidentFee"
    )]
    pub support_incident_fee: String,
    /**
     * Contains information about an account billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "supportPlanFee"
    )]
    pub support_plan_fee: String,
}

/// Defines an account billing plan response object.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountBillingPlanResponse {
    /**
     * Defines an account billing plan response object.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "billingAddress"
    )]
    pub billing_address: Option<AccountAddress>,
    /**
     * Defines an account billing plan response object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "billingAddressIsCreditCardAddress"
    )]
    pub billing_address_is_credit_card_address: String,
    /**
     * Defines an account billing plan response object.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "billingPlan"
    )]
    pub billing_plan: Option<AccountBillingPlan>,
    /**
     * Defines an account billing plan response object.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "creditCardInformation"
    )]
    pub credit_card_information: Option<CreditCardInformation>,
    /**
     * Defines an account billing plan response object.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "directDebitProcessorInformation"
    )]
    pub direct_debit_processor_information: Option<DirectDebitProcessorInformation>,
    /**
     * Defines an account billing plan response object.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "downgradePlanInformation"
    )]
    pub downgrade_plan_information: Option<DowngradePlanUpdateResponse>,
    /**
     * Defines an account billing plan response object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentMethod"
    )]
    pub payment_method: String,
    /**
     * Defines an account billing plan response object.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "paymentProcessorInformation"
    )]
    pub payment_processor_information: Option<PaymentProcessorInformation>,
    /**
     * Defines an account billing plan response object.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "referralInformation"
    )]
    pub referral_information: Option<ReferralInformation>,
    /**
     * Defines an account billing plan response object.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "successorPlans"
    )]
    pub successor_plans: Vec<BillingPlan>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountIdentityInputOption {
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "isRequired"
    )]
    pub is_required: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "optionName"
    )]
    pub option_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "valueType"
    )]
    pub value_type: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountIdentityVerificationResponse {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "identityVerification"
    )]
    pub identity_verification: Vec<AccountIdentityVerificationWorkflow>,
}

/// Information about a specific step in an Identity Verification workflow.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountIdentityVerificationStep {
    /**
     * Information about a specific step in an Identity Verification workflow.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Information about a specific step in an Identity Verification workflow.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

/// Specifies an Identity Verification workflow.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountIdentityVerificationWorkflow {
    /**
     * Specifies an Identity Verification workflow.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "defaultDescription"
    )]
    pub default_description: String,
    /**
     * Specifies an Identity Verification workflow.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "defaultName"
    )]
    pub default_name: String,
    /**
     * Specifies an Identity Verification workflow.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "inputOptions"
    )]
    pub input_options: Vec<AccountIdentityInputOption>,
    /**
     * Specifies an Identity Verification workflow.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signatureProvider"
    )]
    pub signature_provider: Option<AccountSignatureProvider>,
    /**
     * Specifies an Identity Verification workflow.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workflowId"
    )]
    pub workflow_id: String,
    /**
     * Specifies an Identity Verification workflow.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workflowResourceKey"
    )]
    pub workflow_resource_key: String,
}

/// Contains account Information.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountInformation {
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountIdGuid"
    )]
    pub account_id_guid: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountName"
    )]
    pub account_name: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accountSettings"
    )]
    pub account_settings: Option<AccountSettingsInformation>,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowTransactionRooms"
    )]
    pub allow_transaction_rooms: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "billingPeriodDaysRemaining"
    )]
    pub billing_period_days_remaining: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "billingPeriodEndDate"
    )]
    pub billing_period_end_date: Option<chrono::NaiveDate>,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "billingPeriodEnvelopesAllowed"
    )]
    pub billing_period_envelopes_allowed: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "billingPeriodEnvelopesSent"
    )]
    pub billing_period_envelopes_sent: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "billingPeriodStartDate"
    )]
    pub billing_period_start_date: Option<chrono::NaiveDate>,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "billingProfile"
    )]
    pub billing_profile: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canUpgrade"
    )]
    pub can_upgrade: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "connectPermission"
    )]
    pub connect_permission: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "createdDate"
    )]
    pub created_date: Option<chrono::NaiveDate>,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currencyCode"
    )]
    pub currency_code: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currentPlanId"
    )]
    pub current_plan_id: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayApplianceStartUrl"
    )]
    pub display_appliance_start_url: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayApplianceUrl"
    )]
    pub display_appliance_url: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "distributorCode"
    )]
    pub distributor_code: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "docuSignLandingUrl"
    )]
    pub docu_sign_landing_url: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "dssValues"
    )]
    pub dss_values: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeSendingBlocked"
    )]
    pub envelope_sending_blocked: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeUnitPrice"
    )]
    pub envelope_unit_price: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalAccountId"
    )]
    pub external_account_id: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "forgottenPasswordQuestionsCount"
    )]
    pub forgotten_password_questions_count: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDowngrade"
    )]
    pub is_downgrade: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentMethod"
    )]
    pub payment_method: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "planClassification"
    )]
    pub plan_classification: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "planEndDate"
    )]
    pub plan_end_date: Option<chrono::NaiveDate>,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "planName"
    )]
    pub plan_name: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "planStartDate"
    )]
    pub plan_start_date: Option<chrono::NaiveDate>,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientDomains"
    )]
    pub recipient_domains: Vec<RecipientDomain>,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "seatsAllowed"
    )]
    pub seats_allowed: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "seatsInUse"
    )]
    pub seats_in_use: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "status21CFRPart11"
    )]
    pub status_21cfr_part_11: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "suspensionDate"
    )]
    pub suspension_date: Option<chrono::NaiveDate>,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "suspensionStatus"
    )]
    pub suspension_status: String,
    /**
     * Contains account Information.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "useDisplayAppliance"
    )]
    pub use_display_appliance: bool,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountMinimumPasswordLength {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maximumLength"
    )]
    pub maximum_length: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "minimumLength"
    )]
    pub minimum_length: String,
}

/// A complex element that specifies notifications (expirations and reminders) for the envelope.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountNotification {
    /**
     * A complex element that specifies notifications (expirations and reminders) for the envelope.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expirations: Option<Expirations>,
    /**
     * A complex element that specifies notifications (expirations and reminders) for the envelope.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reminders: Option<Reminders>,
    /**
     * A complex element that specifies notifications (expirations and reminders) for the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userOverrideEnabled"
    )]
    pub user_override_enabled: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountPasswordExpireDays {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maximumDays"
    )]
    pub maximum_days: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "minimumDays"
    )]
    pub minimum_days: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountPasswordLockoutDurationMinutes {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maximumMinutes"
    )]
    pub maximum_minutes: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "minimumMinutes"
    )]
    pub minimum_minutes: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountPasswordLockoutDurationType {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub options: Vec<String>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountPasswordMinimumAgeDays {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maximumAge"
    )]
    pub maximum_age: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "minimumAge"
    )]
    pub minimum_age: String,
}

/// Information about the number of password questions required (0 to 4) to confirm a user's identity when a user needs to reset their password.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountPasswordQuestionsRequired {
    /**
     * Information about the number of password questions required (0 to 4) to confirm a user's identity when a user needs to reset their password.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maximumQuestions"
    )]
    pub maximum_questions: String,
    /**
     * Information about the number of password questions required (0 to 4) to confirm a user's identity when a user needs to reset their password.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "minimumQuestions"
    )]
    pub minimum_questions: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountPasswordRulesData {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expirePassword"
    )]
    pub expire_password: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expirePasswordDays"
    )]
    pub expire_password_days: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "expirePasswordDaysMetadata"
    )]
    pub expire_password_days_metadata: Option<AccountPasswordExpireDays>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockoutDurationMinutes"
    )]
    pub lockout_duration_minutes: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockoutDurationMinutesMetadata"
    )]
    pub lockout_duration_minutes_metadata: Option<AccountPasswordLockoutDurationMinutes>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockoutDurationType"
    )]
    pub lockout_duration_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockoutDurationTypeMetadata"
    )]
    pub lockout_duration_type_metadata: Option<AccountPasswordLockoutDurationType>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "minimumPasswordAgeDays"
    )]
    pub minimum_password_age_days: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minimumPasswordAgeDaysMetadata"
    )]
    pub minimum_password_age_days_metadata: Option<AccountPasswordMinimumAgeDays>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "minimumPasswordLength"
    )]
    pub minimum_password_length: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minimumPasswordLengthMetadata"
    )]
    pub minimum_password_length_metadata: Option<AccountMinimumPasswordLength>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordIncludeDigit"
    )]
    pub password_include_digit: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordIncludeDigitOrSpecialCharacter"
    )]
    pub password_include_digit_or_special_character: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordIncludeLowerCase"
    )]
    pub password_include_lower_case: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordIncludeSpecialCharacter"
    )]
    pub password_include_special_character: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordIncludeUpperCase"
    )]
    pub password_include_upper_case: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordStrengthType"
    )]
    pub password_strength_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordStrengthTypeMetadata"
    )]
    pub password_strength_type_metadata: Option<AccountPasswordStrengthType>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "questionsRequired"
    )]
    pub questions_required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "questionsRequiredMetadata"
    )]
    pub questions_required_metadata: Option<AccountPasswordQuestionsRequired>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountPasswordStrengthType {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub options: Vec<AccountPasswordStrengthTypeOption>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountPasswordStrengthTypeOption {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "minimumLength"
    )]
    pub minimum_length: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordIncludeDigit"
    )]
    pub password_include_digit: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordIncludeDigitOrSpecialCharacter"
    )]
    pub password_include_digit_or_special_character: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordIncludeLowerCase"
    )]
    pub password_include_lower_case: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordIncludeSpecialCharacter"
    )]
    pub password_include_special_character: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordIncludeUpperCase"
    )]
    pub password_include_upper_case: String,
}

/// This object defines account permissions for users who are associated with the account permission profile.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountRoleSettings {
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowAccountManagement"
    )]
    pub allow_account_management: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowAccountManagementMetadata"
    )]
    pub allow_account_management_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowApiAccess"
    )]
    pub allow_api_access: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowApiAccessMetadata"
    )]
    pub allow_api_access_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowApiAccessToAccount"
    )]
    pub allow_api_access_to_account: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowApiAccessToAccountMetadata"
    )]
    pub allow_api_access_to_account_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowApiSendingOnBehalfOfOthers"
    )]
    pub allow_api_sending_on_behalf_of_others: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowApiSendingOnBehalfOfOthersMetadata"
    )]
    pub allow_api_sending_on_behalf_of_others_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowApiSequentialSigning"
    )]
    pub allow_api_sequential_signing: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowApiSequentialSigningMetadata"
    )]
    pub allow_api_sequential_signing_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowAutoTagging"
    )]
    pub allow_auto_tagging: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowAutoTaggingMetadata"
    )]
    pub allow_auto_tagging_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowBulkSending"
    )]
    pub allow_bulk_sending: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowBulkSendingMetadata"
    )]
    pub allow_bulk_sending_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowDocuSignDesktopClient"
    )]
    pub allow_docu_sign_desktop_client: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowDocuSignDesktopClientMetadata"
    )]
    pub allow_docu_sign_desktop_client_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowESealRecipients"
    )]
    pub allow_e_seal_recipients: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowESealRecipientsMetadata"
    )]
    pub allow_e_seal_recipients_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowEnvelopeSending"
    )]
    pub allow_envelope_sending: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowEnvelopeSendingMetadata"
    )]
    pub allow_envelope_sending_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowPowerFormsAdminToAccessAllPowerFormEnvelopes"
    )]
    pub allow_power_forms_admin_to_access_all_power_form_envelopes: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowPowerFormsAdminToAccessAllPowerFormEnvelopesMetadata"
    )]
    pub allow_power_forms_admin_to_access_all_power_form_envelopes_metadata:
        Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSendersToSetRecipientEmailLanguage"
    )]
    pub allow_senders_to_set_recipient_email_language: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSendersToSetRecipientEmailLanguageMetadata"
    )]
    pub allow_senders_to_set_recipient_email_language_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSignerAttachments"
    )]
    pub allow_signer_attachments: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSignerAttachmentsMetadata"
    )]
    pub allow_signer_attachments_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSupplementalDocuments"
    )]
    pub allow_supplemental_documents: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSupplementalDocumentsMetadata"
    )]
    pub allow_supplemental_documents_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowTaggingInSendAndCorrect"
    )]
    pub allow_tagging_in_send_and_correct: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowTaggingInSendAndCorrectMetadata"
    )]
    pub allow_tagging_in_send_and_correct_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowVaulting"
    )]
    pub allow_vaulting: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowVaultingMetadata"
    )]
    pub allow_vaulting_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowWetSigningOverride"
    )]
    pub allow_wet_signing_override: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowWetSigningOverrideMetadata"
    )]
    pub allow_wet_signing_override_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowedAddressBookAccess"
    )]
    pub allowed_address_book_access: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowedAddressBookAccessMetadata"
    )]
    pub allowed_address_book_access_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowedClickwrapsAccess"
    )]
    pub allowed_clickwraps_access: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowedClickwrapsAccessMetadata"
    )]
    pub allowed_clickwraps_access_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowedTemplateAccess"
    )]
    pub allowed_template_access: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowedTemplateAccessMetadata"
    )]
    pub allowed_template_access_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowedToBeEnvelopeTransferRecipient"
    )]
    pub allowed_to_be_envelope_transfer_recipient: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowedToBeEnvelopeTransferRecipientMetadata"
    )]
    pub allowed_to_be_envelope_transfer_recipient_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canCreateWorkspaces"
    )]
    pub can_create_workspaces: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canCreateWorkspacesMetadata"
    )]
    pub can_create_workspaces_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableDocumentUpload"
    )]
    pub disable_document_upload: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableDocumentUploadMetadata"
    )]
    pub disable_document_upload_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableOtherActions"
    )]
    pub disable_other_actions: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableOtherActionsMetadata"
    )]
    pub disable_other_actions_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableApiRequestLogging"
    )]
    pub enable_api_request_logging: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableApiRequestLoggingMetadata"
    )]
    pub enable_api_request_logging_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableRecipientViewingNotifications"
    )]
    pub enable_recipient_viewing_notifications: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableRecipientViewingNotificationsMetadata"
    )]
    pub enable_recipient_viewing_notifications_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSequentialSigningInterface"
    )]
    pub enable_sequential_signing_interface: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSequentialSigningInterfaceMetadata"
    )]
    pub enable_sequential_signing_interface_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableTransactionPointIntegration"
    )]
    pub enable_transaction_point_integration: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableTransactionPointIntegrationMetadata"
    )]
    pub enable_transaction_point_integration_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "powerFormRole"
    )]
    pub power_form_role: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "powerFormRoleMetadata"
    )]
    pub power_form_role_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "receiveCompletedSelfSignedDocumentsAsEmailLinks"
    )]
    pub receive_completed_self_signed_documents_as_email_links: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "receiveCompletedSelfSignedDocumentsAsEmailLinksMetadata"
    )]
    pub receive_completed_self_signed_documents_as_email_links_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingUiVersionMetadata"
    )]
    pub signing_ui_version_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "supplementalDocumentsMustAccept"
    )]
    pub supplemental_documents_must_accept: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supplementalDocumentsMustAcceptMetadata"
    )]
    pub supplemental_documents_must_accept_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "supplementalDocumentsMustRead"
    )]
    pub supplemental_documents_must_read: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supplementalDocumentsMustReadMetadata"
    )]
    pub supplemental_documents_must_read_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "supplementalDocumentsMustView"
    )]
    pub supplemental_documents_must_view: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supplementalDocumentsMustViewMetadata"
    )]
    pub supplemental_documents_must_view_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useNewDocuSignExperienceInterface"
    )]
    pub use_new_docu_sign_experience_interface: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useNewDocuSignExperienceInterfaceMetadata"
    )]
    pub use_new_docu_sign_experience_interface_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useNewSendingInterface"
    )]
    pub use_new_sending_interface: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useNewSendingInterfaceMetadata"
    )]
    pub use_new_sending_interface_metadata: Option<SettingsMetadata>,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "vaultingMode"
    )]
    pub vaulting_mode: String,
    /**
     * This object defines account permissions for users who are associated with the account permission profile.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vaultingModeMetadata"
    )]
    pub vaulting_mode_metadata: Option<SettingsMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountSeals {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub seals: Vec<SealIdentifier>,
}

/// Contains account settings information. Used in requests to set property values. Used in responses to report property values.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountSettingsInformation {
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessCodeFormat"
    )]
    pub access_code_format: Option<AccessCodeFormat>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountDateTimeFormat"
    )]
    pub account_date_time_format: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accountDateTimeFormatMetadata"
    )]
    pub account_date_time_format_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountDefaultLanguage"
    )]
    pub account_default_language: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accountDefaultLanguageMetadata"
    )]
    pub account_default_language_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountName"
    )]
    pub account_name: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accountNameMetadata"
    )]
    pub account_name_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accountNotification"
    )]
    pub account_notification: Option<AccountNotification>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accountUISettings"
    )]
    pub account_ui_settings: Option<AccountUiSettings>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "adoptSigConfig"
    )]
    pub adopt_sig_config: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adoptSigConfigMetadata"
    )]
    pub adopt_sig_config_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "advancedCorrect"
    )]
    pub advanced_correct: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "advancedCorrectMetadata"
    )]
    pub advanced_correct_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowAccessCodeFormat"
    )]
    pub allow_access_code_format: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowAccessCodeFormatMetadata"
    )]
    pub allow_access_code_format_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowAccountManagementGranular"
    )]
    pub allow_account_management_granular: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowAccountManagementGranularMetadata"
    )]
    pub allow_account_management_granular_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowAccountMemberNameChange"
    )]
    pub allow_account_member_name_change: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowAccountMemberNameChangeMetadata"
    )]
    pub allow_account_member_name_change_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowAdvancedRecipientRoutingConditional"
    )]
    pub allow_advanced_recipient_routing_conditional: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowAdvancedRecipientRoutingConditionalMetadata"
    )]
    pub allow_advanced_recipient_routing_conditional_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowAgentNameEmailEdit"
    )]
    pub allow_agent_name_email_edit: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowAgentNameEmailEditMetadata"
    )]
    pub allow_agent_name_email_edit_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowAgreementActions"
    )]
    pub allow_agreement_actions: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowAgreementActionsMetadata"
    )]
    pub allow_agreement_actions_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowAutoNavSettings"
    )]
    pub allow_auto_nav_settings: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowAutoNavSettingsMetadata"
    )]
    pub allow_auto_nav_settings_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowAutoTagging"
    )]
    pub allow_auto_tagging: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowAutoTaggingMetadata"
    )]
    pub allow_auto_tagging_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowBulkSend"
    )]
    pub allow_bulk_send: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowBulkSendMetadata"
    )]
    pub allow_bulk_send_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowCDWithdraw"
    )]
    pub allow_cd_withdraw: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowCDWithdrawMetadata"
    )]
    pub allow_cd_withdraw_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowConnectHttpListenerConfigs"
    )]
    pub allow_connect_http_listener_configs: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowConnectSendFinishLater"
    )]
    pub allow_connect_send_finish_later: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowConnectSendFinishLaterMetadata"
    )]
    pub allow_connect_send_finish_later_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowConnectUnifiedPayloadUI"
    )]
    pub allow_connect_unified_payload_ui: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowConsumerDisclosureOverride"
    )]
    pub allow_consumer_disclosure_override: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowConsumerDisclosureOverrideMetadata"
    )]
    pub allow_consumer_disclosure_override_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowDataDownload"
    )]
    pub allow_data_download: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowDataDownloadMetadata"
    )]
    pub allow_data_download_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowDocumentDisclosures"
    )]
    pub allow_document_disclosures: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowDocumentDisclosuresMetadata"
    )]
    pub allow_document_disclosures_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowDocumentVisibility"
    )]
    pub allow_document_visibility: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowDocumentVisibilityMetadata"
    )]
    pub allow_document_visibility_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowDocumentsOnSignedEnvelopes"
    )]
    pub allow_documents_on_signed_envelopes: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowDocumentsOnSignedEnvelopesMetadata"
    )]
    pub allow_documents_on_signed_envelopes_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowEHankoStamps"
    )]
    pub allow_e_hanko_stamps: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowEHankoStampsMetadata"
    )]
    pub allow_e_hanko_stamps_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowENoteEOriginal"
    )]
    pub allow_e_note_e_original: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowENoteEOriginalMetadata"
    )]
    pub allow_e_note_e_original_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowEnvelopeCorrect"
    )]
    pub allow_envelope_correct: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowEnvelopeCorrectMetadata"
    )]
    pub allow_envelope_correct_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowEnvelopeCustodyTransfer"
    )]
    pub allow_envelope_custody_transfer: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowEnvelopeCustodyTransferMetadata"
    )]
    pub allow_envelope_custody_transfer_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowEnvelopeCustomFields"
    )]
    pub allow_envelope_custom_fields: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowEnvelopeCustomFieldsMetadata"
    )]
    pub allow_envelope_custom_fields_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowEnvelopePublishReporting"
    )]
    pub allow_envelope_publish_reporting: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowEnvelopePublishReportingMetadata"
    )]
    pub allow_envelope_publish_reporting_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowEnvelopeReporting"
    )]
    pub allow_envelope_reporting: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowEnvelopeReportingMetadata"
    )]
    pub allow_envelope_reporting_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowExpressSignerCertificate"
    )]
    pub allow_express_signer_certificate: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowExpressSignerCertificateMetadata"
    )]
    pub allow_express_signer_certificate_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowExpression"
    )]
    pub allow_expression: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowExpressionMetadata"
    )]
    pub allow_expression_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowExtendedSendingResourceFile"
    )]
    pub allow_extended_sending_resource_file: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowExtendedSendingResourceFileMetadata"
    )]
    pub allow_extended_sending_resource_file_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowExternalSignaturePad"
    )]
    pub allow_external_signature_pad: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowExternalSignaturePadMetadata"
    )]
    pub allow_external_signature_pad_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowIDVLevel1"
    )]
    pub allow_idv_level_1: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowIDVLevel1Metadata"
    )]
    pub allow_idv_level_1_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowIDVLevel2"
    )]
    pub allow_idv_level_2: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowIDVLevel2Metadata"
    )]
    pub allow_idv_level_2_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowIDVLevel3"
    )]
    pub allow_idv_level_3: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowIDVLevel3Metadata"
    )]
    pub allow_idv_level_3_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowIDVPlatform"
    )]
    pub allow_idv_platform: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowIDVPlatformMetadata"
    )]
    pub allow_idv_platform_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowInPerson"
    )]
    pub allow_in_person: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowInPersonMetadata"
    )]
    pub allow_in_person_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowManagedStamps"
    )]
    pub allow_managed_stamps: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowManagedStampsMetadata"
    )]
    pub allow_managed_stamps_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowMarkup"
    )]
    pub allow_markup: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowMarkupMetadata"
    )]
    pub allow_markup_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowMemberTimeZone"
    )]
    pub allow_member_time_zone: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowMemberTimeZoneMetadata"
    )]
    pub allow_member_time_zone_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowMergeFields"
    )]
    pub allow_merge_fields: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowMergeFieldsMetadata"
    )]
    pub allow_merge_fields_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowMultipleBrandProfiles"
    )]
    pub allow_multiple_brand_profiles: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowMultipleBrandProfilesMetadata"
    )]
    pub allow_multiple_brand_profiles_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowMultipleSignerAttachments"
    )]
    pub allow_multiple_signer_attachments: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowMultipleSignerAttachmentsMetadata"
    )]
    pub allow_multiple_signer_attachments_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowNonUSPhoneAuth"
    )]
    pub allow_non_us_phone_auth: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowNonUSPhoneAuthMetadata"
    )]
    pub allow_non_us_phone_auth_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowOcrOfEnvelopeDocuments"
    )]
    pub allow_ocr_of_envelope_documents: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowOcrOfEnvelopeDocumentsMetadata"
    )]
    pub allow_ocr_of_envelope_documents_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowOfflineSigning"
    )]
    pub allow_offline_signing: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowOfflineSigningMetadata"
    )]
    pub allow_offline_signing_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowOpenTrustSignerCertificate"
    )]
    pub allow_open_trust_signer_certificate: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowOpenTrustSignerCertificateMetadata"
    )]
    pub allow_open_trust_signer_certificate_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowOrganizations"
    )]
    pub allow_organizations: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowOrganizationsMetadata"
    )]
    pub allow_organizations_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowPaymentProcessing"
    )]
    pub allow_payment_processing: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowPaymentProcessingMetadata"
    )]
    pub allow_payment_processing_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowPersonalSignerCertificate"
    )]
    pub allow_personal_signer_certificate: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowPersonalSignerCertificateMetadata"
    )]
    pub allow_personal_signer_certificate_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowPhoneAuthOverride"
    )]
    pub allow_phone_auth_override: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowPhoneAuthOverrideMetadata"
    )]
    pub allow_phone_auth_override_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowPhoneAuthentication"
    )]
    pub allow_phone_authentication: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowPhoneAuthenticationMetadata"
    )]
    pub allow_phone_authentication_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowPrivateSigningGroups"
    )]
    pub allow_private_signing_groups: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowPrivateSigningGroupsMetadata"
    )]
    pub allow_private_signing_groups_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowRecipientConnect"
    )]
    pub allow_recipient_connect: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowRecipientConnectMetadata"
    )]
    pub allow_recipient_connect_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowReminders"
    )]
    pub allow_reminders: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowRemindersMetadata"
    )]
    pub allow_reminders_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowRemoteNotary"
    )]
    pub allow_remote_notary: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowRemoteNotaryMetadata"
    )]
    pub allow_remote_notary_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowResourceFileBranding"
    )]
    pub allow_resource_file_branding: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowResourceFileBrandingMetadata"
    )]
    pub allow_resource_file_branding_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSMSDelivery"
    )]
    pub allow_sms_delivery: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSMSDeliveryMetadata"
    )]
    pub allow_sms_delivery_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSafeBioPharmaSignerCertificate"
    )]
    pub allow_safe_bio_pharma_signer_certificate: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSafeBioPharmaSignerCertificateMetadata"
    )]
    pub allow_safe_bio_pharma_signer_certificate_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSecurityAppliance"
    )]
    pub allow_security_appliance: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSecurityApplianceMetadata"
    )]
    pub allow_security_appliance_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSendToCertifiedDelivery"
    )]
    pub allow_send_to_certified_delivery: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSendToCertifiedDeliveryMetadata"
    )]
    pub allow_send_to_certified_delivery_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSendToIntermediary"
    )]
    pub allow_send_to_intermediary: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSendToIntermediaryMetadata"
    )]
    pub allow_send_to_intermediary_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowServerTemplates"
    )]
    pub allow_server_templates: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowServerTemplatesMetadata"
    )]
    pub allow_server_templates_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSetEmbeddedRecipientStartURL"
    )]
    pub allow_set_embedded_recipient_start_url: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSetEmbeddedRecipientStartURLMetadata"
    )]
    pub allow_set_embedded_recipient_start_url_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSharedTabs"
    )]
    pub allow_shared_tabs: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSharedTabsMetadata"
    )]
    pub allow_shared_tabs_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSignDocumentFromHomePage"
    )]
    pub allow_sign_document_from_home_page: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSignDocumentFromHomePageMetadata"
    )]
    pub allow_sign_document_from_home_page_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSignNow"
    )]
    pub allow_sign_now: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSignNowMetadata"
    )]
    pub allow_sign_now_metadata: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSignatureStamps"
    )]
    pub allow_signature_stamps: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSignatureStampsMetadata"
    )]
    pub allow_signature_stamps_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSignerReassign"
    )]
    pub allow_signer_reassign: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSignerReassignMetadata"
    )]
    pub allow_signer_reassign_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSignerReassignOverride"
    )]
    pub allow_signer_reassign_override: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSignerReassignOverrideMetadata"
    )]
    pub allow_signer_reassign_override_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSigningExtensions"
    )]
    pub allow_signing_extensions: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSigningExtensionsMetadata"
    )]
    pub allow_signing_extensions_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSigningGroups"
    )]
    pub allow_signing_groups: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSigningGroupsMetadata"
    )]
    pub allow_signing_groups_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSigningInsights"
    )]
    pub allow_signing_insights: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSigningInsightsMetadata"
    )]
    pub allow_signing_insights_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSigningRadioDeselect"
    )]
    pub allow_signing_radio_deselect: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSigningRadioDeselectMetadata"
    )]
    pub allow_signing_radio_deselect_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSocialIdLogin"
    )]
    pub allow_social_id_login: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSocialIdLoginMetadata"
    )]
    pub allow_social_id_login_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSupplementalDocuments"
    )]
    pub allow_supplemental_documents: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSupplementalDocumentsMetadata"
    )]
    pub allow_supplemental_documents_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowUsersToAccessDirectory"
    )]
    pub allow_users_to_access_directory: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowUsersToAccessDirectoryMetadata"
    )]
    pub allow_users_to_access_directory_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowValueInsights"
    )]
    pub allow_value_insights: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowValueInsightsMetadata"
    )]
    pub allow_value_insights_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorPopulationScope"
    )]
    pub anchor_population_scope: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorPopulationScopeMetadata"
    )]
    pub anchor_population_scope_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTagVersionedPlacementEnabled"
    )]
    pub anchor_tag_versioned_placement_enabled: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTagVersionedPlacementMetadataEnabled"
    )]
    pub anchor_tag_versioned_placement_metadata_enabled: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "attachCompletedEnvelope"
    )]
    pub attach_completed_envelope: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "attachCompletedEnvelopeMetadata"
    )]
    pub attach_completed_envelope_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authenticationCheck"
    )]
    pub authentication_check: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authenticationCheckMetadata"
    )]
    pub authentication_check_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "autoNavRule"
    )]
    pub auto_nav_rule: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoNavRuleMetadata"
    )]
    pub auto_nav_rule_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "autoProvisionSignerAccount"
    )]
    pub auto_provision_signer_account: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoProvisionSignerAccountMetadata"
    )]
    pub auto_provision_signer_account_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bccEmailArchive"
    )]
    pub bcc_email_archive: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bccEmailArchiveMetadata"
    )]
    pub bcc_email_archive_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "betaSwitchConfiguration"
    )]
    pub beta_switch_configuration: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "betaSwitchConfigurationMetadata"
    )]
    pub beta_switch_configuration_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "billingAddress"
    )]
    pub billing_address: Option<AddressInformation>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "billingAddressMetadata"
    )]
    pub billing_address_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bulkSend"
    )]
    pub bulk_send: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bulkSendMaxCopiesInBatch"
    )]
    pub bulk_send_max_copies_in_batch: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bulkSendMaxUnprocessedEnvelopesCount"
    )]
    pub bulk_send_max_unprocessed_envelopes_count: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bulkSendMetadata"
    )]
    pub bulk_send_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canSelfBrandSend"
    )]
    pub can_self_brand_send: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canSelfBrandSendMetadata"
    )]
    pub can_self_brand_send_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canSelfBrandSign"
    )]
    pub can_self_brand_sign: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canSelfBrandSignMetadata"
    )]
    pub can_self_brand_sign_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canUseSalesforceOAuth"
    )]
    pub can_use_salesforce_o_auth: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canUseSalesforceOAuthMetadata"
    )]
    pub can_use_salesforce_o_auth_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "captureVoiceRecording"
    )]
    pub capture_voice_recording: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "captureVoiceRecordingMetadata"
    )]
    pub capture_voice_recording_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "cfrUseWideImage"
    )]
    pub cfr_use_wide_image: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cfrUseWideImageMetadata"
    )]
    pub cfr_use_wide_image_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "checkForMultipleAdminsOnAccount"
    )]
    pub check_for_multiple_admins_on_account: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "checkForMultipleAdminsOnAccountMetadata"
    )]
    pub check_for_multiple_admins_on_account_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "chromeSignatureEnabled"
    )]
    pub chrome_signature_enabled: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "chromeSignatureEnabledMetadata"
    )]
    pub chrome_signature_enabled_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "commentEmailShowMessageText"
    )]
    pub comment_email_show_message_text: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "commentEmailShowMessageTextMetadata"
    )]
    pub comment_email_show_message_text_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "commentsAllowEnvelopeOverride"
    )]
    pub comments_allow_envelope_override: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "commentsAllowEnvelopeOverrideMetadata"
    )]
    pub comments_allow_envelope_override_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalFieldsEnabled"
    )]
    pub conditional_fields_enabled: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalFieldsEnabledMetadata"
    )]
    pub conditional_fields_enabled_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "consumerDisclosureFrequency"
    )]
    pub consumer_disclosure_frequency: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "consumerDisclosureFrequencyMetadata"
    )]
    pub consumer_disclosure_frequency_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "convertPdfFields"
    )]
    pub convert_pdf_fields: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "convertPdfFieldsMetadata"
    )]
    pub convert_pdf_fields_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "dataPopulationScope"
    )]
    pub data_population_scope: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataPopulationScopeMetadata"
    )]
    pub data_population_scope_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableAutoTemplateMatching"
    )]
    pub disable_auto_template_matching: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableAutoTemplateMatchingMetadata"
    )]
    pub disable_auto_template_matching_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableMobileApp"
    )]
    pub disable_mobile_app: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableMobileAppMetadata"
    )]
    pub disable_mobile_app_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableMobilePushNotifications"
    )]
    pub disable_mobile_push_notifications: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableMobilePushNotificationsMetadata"
    )]
    pub disable_mobile_push_notifications_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableMobileSending"
    )]
    pub disable_mobile_sending: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableMobileSendingMetadata"
    )]
    pub disable_mobile_sending_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableMultipleSessions"
    )]
    pub disable_multiple_sessions: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableMultipleSessionsMetadata"
    )]
    pub disable_multiple_sessions_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disablePurgeNotificationsForSenderMetadata"
    )]
    pub disable_purge_notifications_for_sender_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableSignerCertView"
    )]
    pub disable_signer_cert_view: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableSignerCertViewMetadata"
    )]
    pub disable_signer_cert_view_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableSignerHistoryView"
    )]
    pub disable_signer_history_view: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableSignerHistoryViewMetadata"
    )]
    pub disable_signer_history_view_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableStyleSignature"
    )]
    pub disable_style_signature: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableStyleSignatureMetadata"
    )]
    pub disable_style_signature_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableUploadSignature"
    )]
    pub disable_upload_signature: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableUploadSignatureMetadata"
    )]
    pub disable_upload_signature_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableUserSharing"
    )]
    pub disable_user_sharing: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableUserSharingMetadata"
    )]
    pub disable_user_sharing_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayBetaSwitch"
    )]
    pub display_beta_switch: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayBetaSwitchMetadata"
    )]
    pub display_beta_switch_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentConversionRestrictions"
    )]
    pub document_conversion_restrictions: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentConversionRestrictionsMetadata"
    )]
    pub document_conversion_restrictions_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentRetention"
    )]
    pub document_retention: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentRetentionMetadata"
    )]
    pub document_retention_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentRetentionPurgeTabs"
    )]
    pub document_retention_purge_tabs: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentVisibility"
    )]
    pub document_visibility: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentVisibilityMetadata"
    )]
    pub document_visibility_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailTemplateVersion"
    )]
    pub email_template_version: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailTemplateVersionMetadata"
    )]
    pub email_template_version_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableAccessCodeGenerator"
    )]
    pub enable_access_code_generator: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableAccessCodeGeneratorMetadata"
    )]
    pub enable_access_code_generator_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableAdvancedPayments"
    )]
    pub enable_advanced_payments: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableAdvancedPaymentsMetadata"
    )]
    pub enable_advanced_payments_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableAdvancedPowerForms"
    )]
    pub enable_advanced_power_forms: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableAdvancedPowerFormsMetadata"
    )]
    pub enable_advanced_power_forms_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableAgreementActionsForCLM"
    )]
    pub enable_agreement_actions_for_clm: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableAgreementActionsForCLMMetadata"
    )]
    pub enable_agreement_actions_for_clm_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableAgreementActionsForESign"
    )]
    pub enable_agreement_actions_for_e_sign: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableAgreementActionsForESignMetadata"
    )]
    pub enable_agreement_actions_for_e_sign_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableAutoNav"
    )]
    pub enable_auto_nav: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableAutoNavMetadata"
    )]
    pub enable_auto_nav_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableCalculatedFields"
    )]
    pub enable_calculated_fields: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableCalculatedFieldsMetadata"
    )]
    pub enable_calculated_fields_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableClickwraps"
    )]
    pub enable_clickwraps: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableClickwrapsMetadata"
    )]
    pub enable_clickwraps_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableCommentsHistoryDownloadInSigning"
    )]
    pub enable_comments_history_download_in_signing: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableCommentsHistoryDownloadInSigningMetadata"
    )]
    pub enable_comments_history_download_in_signing_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableCustomerSatisfactionMetricTracking"
    )]
    pub enable_customer_satisfaction_metric_tracking: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableCustomerSatisfactionMetricTrackingMetadata"
    )]
    pub enable_customer_satisfaction_metric_tracking_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableDSPro"
    )]
    pub enable_ds_pro: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableDSProMetadata"
    )]
    pub enable_ds_pro_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableEnvelopeStampingByAccountAdmin"
    )]
    pub enable_envelope_stamping_by_account_admin: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableEnvelopeStampingByAccountAdminMetadata"
    )]
    pub enable_envelope_stamping_by_account_admin_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableEnvelopeStampingByDSAdmin"
    )]
    pub enable_envelope_stamping_by_ds_admin: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableEnvelopeStampingByDSAdminMetadata"
    )]
    pub enable_envelope_stamping_by_ds_admin_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableEsignCommunities"
    )]
    pub enable_esign_communities: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableEsignCommunitiesMetadata"
    )]
    pub enable_esign_communities_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableInBrowserEditor"
    )]
    pub enable_in_browser_editor: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableInBrowserEditorMetadata"
    )]
    pub enable_in_browser_editor_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enablePaymentProcessing"
    )]
    pub enable_payment_processing: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enablePaymentProcessingMetadata"
    )]
    pub enable_payment_processing_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enablePowerForm"
    )]
    pub enable_power_form: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enablePowerFormDirect"
    )]
    pub enable_power_form_direct: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enablePowerFormDirectMetadata"
    )]
    pub enable_power_form_direct_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enablePowerFormMetadata"
    )]
    pub enable_power_form_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableRecipientDomainValidation"
    )]
    pub enable_recipient_domain_validation: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableRecipientDomainValidationMetadata"
    )]
    pub enable_recipient_domain_validation_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableReportLinks"
    )]
    pub enable_report_links: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableReportLinksMetadata"
    )]
    pub enable_report_links_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableRequireSignOnPaper"
    )]
    pub enable_require_sign_on_paper: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableRequireSignOnPaperMetadata"
    )]
    pub enable_require_sign_on_paper_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableReservedDomain"
    )]
    pub enable_reserved_domain: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableReservedDomainMetadata"
    )]
    pub enable_reserved_domain_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableResponsiveSigning"
    )]
    pub enable_responsive_signing: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableResponsiveSigningMetadata"
    )]
    pub enable_responsive_signing_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSMSAuthentication"
    )]
    pub enable_sms_authentication: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSMSAuthenticationMetadata"
    )]
    pub enable_sms_authentication_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableScheduledRelease"
    )]
    pub enable_scheduled_release: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableScheduledReleaseMetadata"
    )]
    pub enable_scheduled_release_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSearch"
    )]
    pub enable_search: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSearchMetadata"
    )]
    pub enable_search_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSearchUI"
    )]
    pub enable_search_ui: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSearchUIMetadata"
    )]
    pub enable_search_ui_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSendToAgent"
    )]
    pub enable_send_to_agent: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSendToAgentMetadata"
    )]
    pub enable_send_to_agent_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSendToIntermediary"
    )]
    pub enable_send_to_intermediary: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSendToIntermediaryMetadata"
    )]
    pub enable_send_to_intermediary_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSendToManage"
    )]
    pub enable_send_to_manage: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSendToManageMetadata"
    )]
    pub enable_send_to_manage_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSendingTagsFontSettings"
    )]
    pub enable_sending_tags_font_settings: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSendingTagsFontSettingsMetadata"
    )]
    pub enable_sending_tags_font_settings_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSequentialSigningAPI"
    )]
    pub enable_sequential_signing_api: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSequentialSigningAPIMetadata"
    )]
    pub enable_sequential_signing_api_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSequentialSigningUI"
    )]
    pub enable_sequential_signing_ui: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSequentialSigningUIMetadata"
    )]
    pub enable_sequential_signing_ui_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSignOnPaper"
    )]
    pub enable_sign_on_paper: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSignOnPaperMetadata"
    )]
    pub enable_sign_on_paper_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSignOnPaperOverride"
    )]
    pub enable_sign_on_paper_override: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSignOnPaperOverrideMetadata"
    )]
    pub enable_sign_on_paper_override_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSignWithNotary"
    )]
    pub enable_sign_with_notary: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSignWithNotaryMetadata"
    )]
    pub enable_sign_with_notary_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSignerAttachments"
    )]
    pub enable_signer_attachments: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSignerAttachmentsMetadata"
    )]
    pub enable_signer_attachments_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSigningExtensionComments"
    )]
    pub enable_signing_extension_comments: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSigningExtensionCommentsMetadata"
    )]
    pub enable_signing_extension_comments_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSigningExtensionConversations"
    )]
    pub enable_signing_extension_conversations: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSigningExtensionConversationsMetadata"
    )]
    pub enable_signing_extension_conversations_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSigningOrderSettingsForAccount"
    )]
    pub enable_signing_order_settings_for_account: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSigningOrderSettingsForAccountMetadata"
    )]
    pub enable_signing_order_settings_for_account_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSmartContracts"
    )]
    pub enable_smart_contracts: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSmartContractsMetadata"
    )]
    pub enable_smart_contracts_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSocialIdLogin"
    )]
    pub enable_social_id_login: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSocialIdLoginMetadata"
    )]
    pub enable_social_id_login_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableStrikeThrough"
    )]
    pub enable_strike_through: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableStrikeThroughMetadata"
    )]
    pub enable_strike_through_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableTransactionPoint"
    )]
    pub enable_transaction_point: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableTransactionPointMetadata"
    )]
    pub enable_transaction_point_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableVaulting"
    )]
    pub enable_vaulting: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableVaultingMetadata"
    )]
    pub enable_vaulting_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableWitnessing"
    )]
    pub enable_witnessing: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableWitnessingMetadata"
    )]
    pub enable_witnessing_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enforceTemplateNameUniqueness"
    )]
    pub enforce_template_name_uniqueness: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enforceTemplateNameUniquenessMetadata"
    )]
    pub enforce_template_name_uniqueness_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeIntegrationAllowed"
    )]
    pub envelope_integration_allowed: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "envelopeIntegrationAllowedMetadata"
    )]
    pub envelope_integration_allowed_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeIntegrationEnabled"
    )]
    pub envelope_integration_enabled: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "envelopeIntegrationEnabledMetadata"
    )]
    pub envelope_integration_enabled_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeStampingDefaultValue"
    )]
    pub envelope_stamping_default_value: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "envelopeStampingDefaultValueMetadata"
    )]
    pub envelope_stamping_default_value_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expressSend"
    )]
    pub express_send: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expressSendAllowTabs"
    )]
    pub express_send_allow_tabs: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "expressSendAllowTabsMetadata"
    )]
    pub express_send_allow_tabs_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "expressSendMetadata"
    )]
    pub express_send_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "externalDocumentSources"
    )]
    pub external_document_sources: Option<ExternalDocumentSources>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalSignaturePadType"
    )]
    pub external_signature_pad_type: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "externalSignaturePadTypeMetadata"
    )]
    pub external_signature_pad_type_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "faxOutEnabled"
    )]
    pub fax_out_enabled: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "faxOutEnabledMetadata"
    )]
    pub fax_out_enabled_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "guidedFormsHtmlAllowed"
    )]
    pub guided_forms_html_allowed: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "guidedFormsHtmlAllowedMetadata"
    )]
    pub guided_forms_html_allowed_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hideAccountAddressInCoC"
    )]
    pub hide_account_address_in_co_c: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hideAccountAddressInCoCMetadata"
    )]
    pub hide_account_address_in_co_c_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hidePricing"
    )]
    pub hide_pricing: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hidePricingMetadata"
    )]
    pub hide_pricing_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "idCheckConfigurations"
    )]
    pub id_check_configurations: Vec<IdCheckConfiguration>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idCheckExpire"
    )]
    pub id_check_expire: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idCheckExpireDays"
    )]
    pub id_check_expire_days: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckExpireDaysMetadata"
    )]
    pub id_check_expire_days_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckExpireMetadata"
    )]
    pub id_check_expire_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idCheckExpireMinutes"
    )]
    pub id_check_expire_minutes: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckExpireMinutesMetadata"
    )]
    pub id_check_expire_minutes_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idCheckRequired"
    )]
    pub id_check_required: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckRequiredMetadata"
    )]
    pub id_check_required_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "identityVerification"
    )]
    pub identity_verification: Vec<AccountIdentityVerificationWorkflow>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityVerificationMetadata"
    )]
    pub identity_verification_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "ignoreErrorIfAnchorTabNotFound"
    )]
    pub ignore_error_if_anchor_tab_not_found: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ignoreErrorIfAnchorTabNotFoundMetadataEnabled"
    )]
    pub ignore_error_if_anchor_tab_not_found_metadata_enabled: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "inPersonIDCheckQuestion"
    )]
    pub in_person_id_check_question: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inPersonIDCheckQuestionMetadata"
    )]
    pub in_person_id_check_question_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "inPersonSigningEnabled"
    )]
    pub in_person_signing_enabled: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inPersonSigningEnabledMetadata"
    )]
    pub in_person_signing_enabled_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "inSessionEnabled"
    )]
    pub in_session_enabled: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inSessionEnabledMetadata"
    )]
    pub in_session_enabled_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "inSessionSuppressEmails"
    )]
    pub in_session_suppress_emails: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inSessionSuppressEmailsMetadata"
    )]
    pub in_session_suppress_emails_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxNumberOfCustomStamps"
    )]
    pub max_number_of_custom_stamps: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maximumSigningGroups"
    )]
    pub maximum_signing_groups: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumSigningGroupsMetadata"
    )]
    pub maximum_signing_groups_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maximumUsersPerSigningGroup"
    )]
    pub maximum_users_per_signing_group: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumUsersPerSigningGroupMetadata"
    )]
    pub maximum_users_per_signing_group_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mobileSessionTimeout"
    )]
    pub mobile_session_timeout: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mobileSessionTimeoutMetadata"
    )]
    pub mobile_session_timeout_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "numberOfActiveCustomStamps"
    )]
    pub number_of_active_custom_stamps: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "optInMobileSigningV02"
    )]
    pub opt_in_mobile_signing_v02: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "optInMobileSigningV02Metadata"
    )]
    pub opt_in_mobile_signing_v02_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "optOutAutoNavTextAndTabColorUpdates"
    )]
    pub opt_out_auto_nav_text_and_tab_color_updates: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "optOutAutoNavTextAndTabColorUpdatesMetadata"
    )]
    pub opt_out_auto_nav_text_and_tab_color_updates_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "optOutNewPlatformSeal"
    )]
    pub opt_out_new_platform_seal: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "optOutNewPlatformSealPlatformMetadata"
    )]
    pub opt_out_new_platform_seal_platform_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "phoneAuthRecipientMayProvidePhoneNumber"
    )]
    pub phone_auth_recipient_may_provide_phone_number: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phoneAuthRecipientMayProvidePhoneNumberMetadata"
    )]
    pub phone_auth_recipient_may_provide_phone_number_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pkiSignDownloadedPDFDocs"
    )]
    pub pki_sign_downloaded_pdf_docs: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pkiSignDownloadedPDFDocsMetadata"
    )]
    pub pki_sign_downloaded_pdf_docs_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientSigningAutoNavigationControl"
    )]
    pub recipient_signing_auto_navigation_control: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientSigningAutoNavigationControlMetadata"
    )]
    pub recipient_signing_auto_navigation_control_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientsCanSignOffline"
    )]
    pub recipients_can_sign_offline: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientsCanSignOfflineMetadata"
    )]
    pub recipients_can_sign_offline_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "require21CFRpt11Compliance"
    )]
    pub require_21cf_rpt_11_compliance: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "require21CFRpt11ComplianceMetadata"
    )]
    pub require_21cf_rpt_11_compliance_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireDeclineReason"
    )]
    pub require_decline_reason: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireDeclineReasonMetadata"
    )]
    pub require_decline_reason_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireExternalUserManagement"
    )]
    pub require_external_user_management: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireExternalUserManagementMetadata"
    )]
    pub require_external_user_management_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireSignerCertificateType"
    )]
    pub require_signer_certificate_type: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireSignerCertificateTypeMetadata"
    )]
    pub require_signer_certificate_type_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "rsaVeridAccountName"
    )]
    pub rsa_verid_account_name: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "rsaVeridPassword"
    )]
    pub rsa_verid_password: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "rsaVeridRuleset"
    )]
    pub rsa_verid_ruleset: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "rsaVeridUserId"
    )]
    pub rsa_verid_user_id: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "selfSignedRecipientEmailDocument"
    )]
    pub self_signed_recipient_email_document: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "selfSignedRecipientEmailDocumentMetadata"
    )]
    pub self_signed_recipient_email_document_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "selfSignedRecipientEmailDocumentUserOverride"
    )]
    pub self_signed_recipient_email_document_user_override: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "selfSignedRecipientEmailDocumentUserOverrideMetadata"
    )]
    pub self_signed_recipient_email_document_user_override_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sendToCertifiedDeliveryEnabled"
    )]
    pub send_to_certified_delivery_enabled: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendToCertifiedDeliveryEnabledMetadata"
    )]
    pub send_to_certified_delivery_enabled_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderCanSignInEachLocation"
    )]
    pub sender_can_sign_in_each_location: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "senderCanSignInEachLocationMetadata"
    )]
    pub sender_can_sign_in_each_location_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderMustAuthenticateSigning"
    )]
    pub sender_must_authenticate_signing: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "senderMustAuthenticateSigningMetadata"
    )]
    pub sender_must_authenticate_signing_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sendingTagsFontColor"
    )]
    pub sending_tags_font_color: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendingTagsFontColorMetadata"
    )]
    pub sending_tags_font_color_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sendingTagsFontName"
    )]
    pub sending_tags_font_name: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendingTagsFontNameMetadata"
    )]
    pub sending_tags_font_name_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sendingTagsFontSize"
    )]
    pub sending_tags_font_size: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendingTagsFontSizeMetadata"
    )]
    pub sending_tags_font_size_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sessionTimeout"
    )]
    pub session_timeout: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sessionTimeoutMetadata"
    )]
    pub session_timeout_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "setRecipEmailLang"
    )]
    pub set_recip_email_lang: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "setRecipEmailLangMetadata"
    )]
    pub set_recip_email_lang_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "setRecipSignLang"
    )]
    pub set_recip_sign_lang: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "setRecipSignLangMetadata"
    )]
    pub set_recip_sign_lang_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sharedTemplateFolders"
    )]
    pub shared_template_folders: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharedTemplateFoldersMetadata"
    )]
    pub shared_template_folders_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "showCompleteDialogInEmbeddedSession"
    )]
    pub show_complete_dialog_in_embedded_session: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "showCompleteDialogInEmbeddedSessionMetadata"
    )]
    pub show_complete_dialog_in_embedded_session_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "showConditionalRoutingOnSend"
    )]
    pub show_conditional_routing_on_send: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "showConditionalRoutingOnSendMetadata"
    )]
    pub show_conditional_routing_on_send_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "showInitialConditionalFields"
    )]
    pub show_initial_conditional_fields: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "showInitialConditionalFieldsMetadata"
    )]
    pub show_initial_conditional_fields_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "showLocalizedWatermarks"
    )]
    pub show_localized_watermarks: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "showLocalizedWatermarksMetadata"
    )]
    pub show_localized_watermarks_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "showTutorials"
    )]
    pub show_tutorials: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "showTutorialsMetadata"
    )]
    pub show_tutorials_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signDateFormat"
    )]
    pub sign_date_format: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signDateFormatMetadata"
    )]
    pub sign_date_format_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signTimeFormat"
    )]
    pub sign_time_format: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signTimeFormatMetadata"
    )]
    pub sign_time_format_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signTimeShowAmPm"
    )]
    pub sign_time_show_am_pm: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signTimeShowAmPmMetadata"
    )]
    pub sign_time_show_am_pm_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signatureProviders"
    )]
    pub signature_providers: Vec<String>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signatureProvidersMetadata"
    )]
    pub signature_providers_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerAttachCertificateToEnvelopePDF"
    )]
    pub signer_attach_certificate_to_envelope_pdf: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signerAttachCertificateToEnvelopePDFMetadata"
    )]
    pub signer_attach_certificate_to_envelope_pdf_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerAttachConcat"
    )]
    pub signer_attach_concat: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signerAttachConcatMetadata"
    )]
    pub signer_attach_concat_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerCanCreateAccount"
    )]
    pub signer_can_create_account: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signerCanCreateAccountMetadata"
    )]
    pub signer_can_create_account_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerCanSignOnMobile"
    )]
    pub signer_can_sign_on_mobile: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signerCanSignOnMobileMetadata"
    )]
    pub signer_can_sign_on_mobile_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerInSessionUseEnvelopeCompleteEmail"
    )]
    pub signer_in_session_use_envelope_complete_email: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signerInSessionUseEnvelopeCompleteEmailMetadata"
    )]
    pub signer_in_session_use_envelope_complete_email_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerLoginRequirements"
    )]
    pub signer_login_requirements: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signerLoginRequirementsMetadata"
    )]
    pub signer_login_requirements_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerMustHaveAccount"
    )]
    pub signer_must_have_account: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signerMustHaveAccountMetadata"
    )]
    pub signer_must_have_account_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerMustLoginToSign"
    )]
    pub signer_must_login_to_sign: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signerMustLoginToSignMetadata"
    )]
    pub signer_must_login_to_sign_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerShowSecureFieldInitialValues"
    )]
    pub signer_show_secure_field_initial_values: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signerShowSecureFieldInitialValuesMetadata"
    )]
    pub signer_show_secure_field_initial_values_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingSessionTimeout"
    )]
    pub signing_session_timeout: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingSessionTimeoutMetadata"
    )]
    pub signing_session_timeout_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingUiVersion"
    )]
    pub signing_ui_version: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingUiVersionMetadata"
    )]
    pub signing_ui_version_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "simplifiedSendingEnabled"
    )]
    pub simplified_sending_enabled: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "simplifiedSendingEnabledMetadata"
    )]
    pub simplified_sending_enabled_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "singleSignOnEnabled"
    )]
    pub single_sign_on_enabled: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "singleSignOnEnabledMetadata"
    )]
    pub single_sign_on_enabled_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "skipAuthCompletedEnvelopes"
    )]
    pub skip_auth_completed_envelopes: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipAuthCompletedEnvelopesMetadata"
    )]
    pub skip_auth_completed_envelopes_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "socialIdRecipAuth"
    )]
    pub social_id_recip_auth: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "socialIdRecipAuthMetadata"
    )]
    pub social_id_recip_auth_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "specifyDocumentVisibility"
    )]
    pub specify_document_visibility: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "specifyDocumentVisibilityMetadata"
    )]
    pub specify_document_visibility_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startInAdvancedCorrect"
    )]
    pub start_in_advanced_correct: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startInAdvancedCorrectMetadata"
    )]
    pub start_in_advanced_correct_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "supplementalDocumentsMustAccept"
    )]
    pub supplemental_documents_must_accept: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supplementalDocumentsMustAcceptMetadata"
    )]
    pub supplemental_documents_must_accept_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "supplementalDocumentsMustRead"
    )]
    pub supplemental_documents_must_read: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supplementalDocumentsMustReadMetadata"
    )]
    pub supplemental_documents_must_read_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "supplementalDocumentsMustView"
    )]
    pub supplemental_documents_must_view: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supplementalDocumentsMustViewMetadata"
    )]
    pub supplemental_documents_must_view_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "suppressCertificateEnforcement"
    )]
    pub suppress_certificate_enforcement: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "suppressCertificateEnforcementMetadata"
    )]
    pub suppress_certificate_enforcement_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabAccountSettings"
    )]
    pub tab_account_settings: Option<TabAccountSettings>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "timezoneOffsetAPI"
    )]
    pub timezone_offset_api: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timezoneOffsetAPIMetadata"
    )]
    pub timezone_offset_api_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "timezoneOffsetUI"
    )]
    pub timezone_offset_ui: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timezoneOffsetUIMetadata"
    )]
    pub timezone_offset_ui_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "universalSignatureOptIn"
    )]
    pub universal_signature_opt_in: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useAccountLevelEmail"
    )]
    pub use_account_level_email: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useAccountLevelEmailMetadata"
    )]
    pub use_account_level_email_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useConsumerDisclosure"
    )]
    pub use_consumer_disclosure: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useConsumerDisclosureMetadata"
    )]
    pub use_consumer_disclosure_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useConsumerDisclosureWithinAccount"
    )]
    pub use_consumer_disclosure_within_account: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useConsumerDisclosureWithinAccountMetadata"
    )]
    pub use_consumer_disclosure_within_account_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useDerivedKeys"
    )]
    pub use_derived_keys: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useDerivedKeysMetadata"
    )]
    pub use_derived_keys_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useDocuSignExpressSignerCertificate"
    )]
    pub use_docu_sign_express_signer_certificate: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useDocuSignExpressSignerCertificateMetadata"
    )]
    pub use_docu_sign_express_signer_certificate_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useMultiAppGroupsData"
    )]
    pub use_multi_app_groups_data: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useMultiAppGroupsDataMetadata"
    )]
    pub use_multi_app_groups_data_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useNewBlobForPdf"
    )]
    pub use_new_blob_for_pdf: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useNewBlobForPdfMetadata"
    )]
    pub use_new_blob_for_pdf_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useSAFESignerCertificates"
    )]
    pub use_safe_signer_certificates: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useSAFESignerCertificatesMetadata"
    )]
    pub use_safe_signer_certificates_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useSignatureProviderPlatform"
    )]
    pub use_signature_provider_platform: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useSignatureProviderPlatformMetadata"
    )]
    pub use_signature_provider_platform_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "usesAPI"
    )]
    pub uses_api: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "usesAPIMetadata"
    )]
    pub uses_api_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationsAllowed"
    )]
    pub validations_allowed: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationsAllowedMetadata"
    )]
    pub validations_allowed_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationsBrand"
    )]
    pub validations_brand: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationsBrandMetadata"
    )]
    pub validations_brand_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationsCadence"
    )]
    pub validations_cadence: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationsCadenceMetadata"
    )]
    pub validations_cadence_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationsEnabled"
    )]
    pub validations_enabled: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationsEnabledMetadata"
    )]
    pub validations_enabled_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationsReport"
    )]
    pub validations_report: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationsReportMetadata"
    )]
    pub validations_report_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "waterMarkEnabled"
    )]
    pub water_mark_enabled: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "waterMarkEnabledMetadata"
    )]
    pub water_mark_enabled_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "writeReminderToEnvelopeHistory"
    )]
    pub write_reminder_to_envelope_history: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeReminderToEnvelopeHistoryMetadata"
    )]
    pub write_reminder_to_envelope_history_metadata: Option<SettingsMetadata>,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "wurflMinAllowableScreenSize"
    )]
    pub wurfl_min_allowable_screen_size: String,
    /**
     * Contains account settings information. Used in requests to set property values. Used in responses to report property values.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "wurflMinAllowableScreenSizeMetadata"
    )]
    pub wurfl_min_allowable_screen_size_metadata: Option<SettingsMetadata>,
}

/// Contains shared access information.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountSharedAccess {
    /**
     * Contains shared access information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountId"
    )]
    pub account_id: String,
    /**
     * Contains shared access information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     * Contains shared access information.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Contains shared access information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     * Contains shared access information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     * Contains shared access information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     * Contains shared access information.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "sharedAccess"
    )]
    pub shared_access: Vec<MemberSharedItems>,
    /**
     * Contains shared access information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     * Contains shared access information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountSignature {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "adoptedDateTime"
    )]
    pub adopted_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdDateTime"
    )]
    pub created_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customField"
    )]
    pub custom_field: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dateStampProperties"
    )]
    pub date_stamp_properties: Option<DateStampProperties>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disallowUserResizeStamp"
    )]
    pub disallow_user_resize_stamp: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalID"
    )]
    pub external_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "imageBase64"
    )]
    pub image_base_64: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "imageType"
    )]
    pub image_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initials150ImageId"
    )]
    pub initials_150_image_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initialsImageUri"
    )]
    pub initials_image_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDefault"
    )]
    pub is_default: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModifiedDateTime"
    )]
    pub last_modified_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nrdsId"
    )]
    pub nrds_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nrdsLastName"
    )]
    pub nrds_last_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nrdsStatus"
    )]
    pub nrds_status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "phoneticName"
    )]
    pub phonetic_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signature150ImageId"
    )]
    pub signature_150_image_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureFont"
    )]
    pub signature_font: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signatureGroups"
    )]
    pub signature_groups: Vec<SignatureGroup>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureId"
    )]
    pub signature_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureImageUri"
    )]
    pub signature_image_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureInitials"
    )]
    pub signature_initials: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureName"
    )]
    pub signature_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureRights"
    )]
    pub signature_rights: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureType"
    )]
    pub signature_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signatureUsers"
    )]
    pub signature_users: Vec<SignatureUser>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampFormat"
    )]
    pub stamp_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampImageUri"
    )]
    pub stamp_image_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampSizeMM"
    )]
    pub stamp_size_mm: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampType"
    )]
    pub stamp_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountSignatureDefinition {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dateStampProperties"
    )]
    pub date_stamp_properties: Option<DateStampProperties>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disallowUserResizeStamp"
    )]
    pub disallow_user_resize_stamp: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalID"
    )]
    pub external_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "imageType"
    )]
    pub image_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDefault"
    )]
    pub is_default: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nrdsId"
    )]
    pub nrds_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nrdsLastName"
    )]
    pub nrds_last_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "phoneticName"
    )]
    pub phonetic_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureFont"
    )]
    pub signature_font: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signatureGroups"
    )]
    pub signature_groups: Vec<SignatureGroupDef>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureId"
    )]
    pub signature_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureInitials"
    )]
    pub signature_initials: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureName"
    )]
    pub signature_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signatureUsers"
    )]
    pub signature_users: Vec<SignatureUserDef>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampFormat"
    )]
    pub stamp_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampSizeMM"
    )]
    pub stamp_size_mm: String,
}

/// Contains information abotu the signature provider associated with the Identity Verification workflow.
/// If empty, then this specific workflow is not intended for signers.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountSignatureProvider {
    /**
     * Contains information abotu the signature provider associated with the Identity Verification workflow.
     *  If empty, then this specific workflow is not intended for signers.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isRequired"
    )]
    pub is_required: String,
    /**
     * Contains information abotu the signature provider associated with the Identity Verification workflow.
     *  If empty, then this specific workflow is not intended for signers.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub priority: String,
    /**
     * Contains information abotu the signature provider associated with the Identity Verification workflow.
     *  If empty, then this specific workflow is not intended for signers.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureProviderDisplayName"
    )]
    pub signature_provider_display_name: String,
    /**
     * Contains information abotu the signature provider associated with the Identity Verification workflow.
     *  If empty, then this specific workflow is not intended for signers.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureProviderId"
    )]
    pub signature_provider_id: String,
    /**
     * Contains information abotu the signature provider associated with the Identity Verification workflow.
     *  If empty, then this specific workflow is not intended for signers.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureProviderName"
    )]
    pub signature_provider_name: String,
    /**
     * Contains information abotu the signature provider associated with the Identity Verification workflow.
     *  If empty, then this specific workflow is not intended for signers.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signatureProviderOptionsMetadata"
    )]
    pub signature_provider_options_metadata: Vec<AccountSignatureProviderOption>,
    /**
     * Contains information abotu the signature provider associated with the Identity Verification workflow.
     *  If empty, then this specific workflow is not intended for signers.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signatureProviderRequiredOptions"
    )]
    pub signature_provider_required_options: Vec<SignatureProviderRequiredOption>,
}

/// Reserved for DocuSign.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountSignatureProviderOption {
    /**
     * Reserved for DocuSign.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureProviderOptionDisplayName"
    )]
    pub signature_provider_option_display_name: String,
    /**
     * Reserved for DocuSign.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureProviderOptionId"
    )]
    pub signature_provider_option_id: String,
    /**
     * Reserved for DocuSign.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureProviderOptionName"
    )]
    pub signature_provider_option_name: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountSignatureProvidersData {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signatureProviders"
    )]
    pub signature_providers: Vec<AccountSignatureProvider>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountSignaturesInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "accountSignatures"
    )]
    pub account_signatures: Vec<AccountSignature>,
}

/// An object that defines the options that are available to non-administrators in the UI.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AccountUiSettings {
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminMessage"
    )]
    pub admin_message: Option<AdminMessage>,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "askAnAdmin"
    )]
    pub ask_an_admin: Option<AskAdmin>,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableAdminMessage"
    )]
    pub enable_admin_message: String,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableAdminMessageMetadata"
    )]
    pub enable_admin_message_metadata: Option<SettingsMetadata>,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableAdvancedPaymentsReactEdit"
    )]
    pub enable_advanced_payments_react_edit: String,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableEasySignCanUseMultiTemplateApply"
    )]
    pub enable_easy_sign_can_use_multi_template_apply: String,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableEasySignCanUseMultiTemplateApplyMetadata"
    )]
    pub enable_easy_sign_can_use_multi_template_apply_metadata: Option<SettingsMetadata>,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableEasySignTemplateUpload"
    )]
    pub enable_easy_sign_template_upload: String,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableEasySignTemplateUploadMetadata"
    )]
    pub enable_easy_sign_template_upload_metadata: Option<SettingsMetadata>,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableEnvelopeCopyWithData"
    )]
    pub enable_envelope_copy_with_data: String,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableEnvelopeCopyWithDataMetadata"
    )]
    pub enable_envelope_copy_with_data_metadata: Option<SettingsMetadata>,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableLegacyHomepageLink"
    )]
    pub enable_legacy_homepage_link: String,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableLegacyHomepageLinkMetadata"
    )]
    pub enable_legacy_homepage_link_metadata: Option<SettingsMetadata>,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hideSendAnEnvelope"
    )]
    pub hide_send_an_envelope: String,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hideSendAnEnvelopeMetadata"
    )]
    pub hide_send_an_envelope_metadata: Option<SettingsMetadata>,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hideUseATemplate"
    )]
    pub hide_use_a_template: String,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hideUseATemplateInPrepare"
    )]
    pub hide_use_a_template_in_prepare: String,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hideUseATemplateInPrepareMetadata"
    )]
    pub hide_use_a_template_in_prepare_metadata: Option<SettingsMetadata>,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hideUseATemplateMetadata"
    )]
    pub hide_use_a_template_metadata: Option<SettingsMetadata>,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "orderBasedRecipientIdGeneration"
    )]
    pub order_based_recipient_id_generation: String,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "orderBasedRecipientIdGenerationMetadata"
    )]
    pub order_based_recipient_id_generation_metadata: Option<SettingsMetadata>,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "removeEnvelopeForwarding"
    )]
    pub remove_envelope_forwarding: String,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "removeEnvelopeForwardingMetadata"
    )]
    pub remove_envelope_forwarding_metadata: Option<SettingsMetadata>,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "shouldRedactAccessCode"
    )]
    pub should_redact_access_code: String,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "shouldRedactAccessCodeMetadata"
    )]
    pub should_redact_access_code_metadata: Option<SettingsMetadata>,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "uploadNewImageToSignOrInitial"
    )]
    pub upload_new_image_to_sign_or_initial: String,
    /**
     * An object that defines the options that are available to non-administrators in the UI.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "uploadNewImageToSignOrInitialMetadata"
    )]
    pub upload_new_image_to_sign_or_initial_metadata: Option<SettingsMetadata>,
}

/// Contains information about add ons.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AddOn {
    /**
     * Contains information about add ons.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub active: String,
    /**
     * Contains information about add ons.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "addOnId"
    )]
    pub add_on_id: String,
    /**
     * Contains information about add ons.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * Contains information about add ons.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/// Contains address information.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AddressInformation {
    /**
     * Contains address information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "address1"
    )]
    pub address_1: String,
    /**
     * Contains address information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "address2"
    )]
    pub address_2: String,
    /**
     * Contains address information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub city: String,
    /**
     * Contains address information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country: String,
    /**
     * Contains address information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub fax: String,
    /**
     * Contains address information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone: String,
    /**
     * Contains address information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "postalCode"
    )]
    pub postal_code: String,
    /**
     * Contains address information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stateOrProvince"
    )]
    pub state_or_province: String,
    /**
     * Contains address information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "zipPlus4"
    )]
    pub zip_plus_4: String,
}

/// Contains address input information.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AddressInformationInput {
    /**
     * Contains address input information.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "addressInformation"
    )]
    pub address_information: Option<AddressInformation>,
    /**
     * Contains address input information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayLevelCode"
    )]
    pub display_level_code: String,
    /**
     * Contains address input information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "receiveInResponse"
    )]
    pub receive_in_response: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AdminMessage {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "baseMessage"
    )]
    pub base_message: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "moreInformation"
    )]
    pub more_information: String,
}

/// Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Agent {
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCode"
    )]
    pub access_code: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessCodeMetadata"
    )]
    pub access_code_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "addAccessCodeToEmail"
    )]
    pub add_access_code_to_email: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "additionalNotifications"
    )]
    pub additional_notifications: Vec<RecipientAdditionalNotification>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSystemOverrideForLockedRecipient"
    )]
    pub allow_system_override_for_locked_recipient: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "clientUserId"
    )]
    pub client_user_id: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "completedCount"
    )]
    pub completed_count: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "customFields"
    )]
    pub custom_fields: Vec<String>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedDateTime"
    )]
    pub declined_date_time: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedReason"
    )]
    pub declined_reason: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveredDateTime"
    )]
    pub delivered_date_time: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveryMethod"
    )]
    pub delivery_method: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryMethodMetadata"
    )]
    pub delivery_method_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorId"
    )]
    pub designator_id: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorIdGuid"
    )]
    pub designator_id_guid: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentVisibility"
    )]
    pub document_visibility: Vec<DocumentVisibility>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailMetadata"
    )]
    pub email_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailNotification"
    )]
    pub email_notification: Option<RecipientEmailNotification>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "embeddedRecipientStartURL"
    )]
    pub embedded_recipient_start_url: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "excludedDocuments"
    )]
    pub excluded_documents: Vec<String>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "faxNumber"
    )]
    pub fax_number: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "faxNumberMetadata"
    )]
    pub fax_number_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "firstName"
    )]
    pub first_name: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "firstNameMetadata"
    )]
    pub first_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fullName"
    )]
    pub full_name: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fullNameMetadata"
    )]
    pub full_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idCheckConfigurationName"
    )]
    pub id_check_configuration_name: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckConfigurationNameMetadata"
    )]
    pub id_check_configuration_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckInformationInput"
    )]
    pub id_check_information_input: Option<IdCheckInformationInput>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityVerification"
    )]
    pub identity_verification: Option<RecipientIdentityVerification>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "inheritEmailNotificationConfiguration"
    )]
    pub inherit_email_notification_configuration: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastName"
    )]
    pub last_name: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastNameMetadata"
    )]
    pub last_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientPhoneAuthEditable"
    )]
    pub locked_recipient_phone_auth_editable: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientSmsEditable"
    )]
    pub locked_recipient_sms_editable: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub note: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteMetadata"
    )]
    pub note_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phoneAuthentication"
    )]
    pub phone_authentication: Option<RecipientPhoneAuthentication>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientAttachments"
    )]
    pub recipient_attachments: Vec<RecipientAttachment>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientAuthenticationStatus"
    )]
    pub recipient_authentication_status: Option<AuthenticationStatus>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientFeatureMetadata"
    )]
    pub recipient_feature_metadata: Vec<FeatureAvailableMetadata>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientType"
    )]
    pub recipient_type: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientTypeMetadata"
    )]
    pub recipient_type_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireIdLookup"
    )]
    pub require_id_lookup: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireIdLookupMetadata"
    )]
    pub require_id_lookup_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "roleName"
    )]
    pub role_name: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "routingOrder"
    )]
    pub routing_order: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routingOrderMetadata"
    )]
    pub routing_order_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentDateTime"
    )]
    pub sent_date_time: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signedDateTime"
    )]
    pub signed_date_time: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupId"
    )]
    pub signing_group_id: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingGroupIdMetadata"
    )]
    pub signing_group_id_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupName"
    )]
    pub signing_group_name: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signingGroupUsers"
    )]
    pub signing_group_users: Vec<UserInfo>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smsAuthentication"
    )]
    pub sms_authentication: Option<RecipientSmsAuthentication>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "socialAuthentications"
    )]
    pub social_authentications: Vec<SocialAuthentication>,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusCode"
    )]
    pub status_code: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "suppressEmails"
    )]
    pub suppress_emails: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalTabCount"
    )]
    pub total_tab_count: String,
    /**
     * Contains information about an agent recipient. An agent is a recipient who can add name and email information for recipients that appear after the agent in routing order.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
}

/// Contains API request log information.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ApiRequestLog {
    /**
     * Contains API request log information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdDateTime"
    )]
    pub created_date_time: String,
    /**
     * Contains API request log information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * Contains API request log information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requestLogId"
    )]
    pub request_log_id: String,
    /**
     * Contains API request log information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
}

/// Contains information about mutiple API request logs.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ApiRequestLogsResult {
    /**
     * Contains information about mutiple API request logs.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "apiRequestLogs"
    )]
    pub api_request_logs: Vec<ApiRequestLog>,
}

/// Contains information about an APP store product.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AppStoreProduct {
    /**
     * Contains information about an APP store product.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "marketPlace"
    )]
    pub market_place: String,
    /**
     * Contains information about an APP store product.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "productId"
    )]
    pub product_id: String,
}

/// Contains information about an APP store receipt.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AppStoreReceipt {
    /**
     * Contains information about an APP store receipt.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "productId"
    )]
    pub product_id: String,
    /**
     * Contains information about an APP store receipt.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "receiptData"
    )]
    pub receipt_data: String,
}

/// A tab that allows the recipient to approve documents
/// without placing a signature or initials on the
/// document.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Approve {
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "buttonText"
    )]
    pub button_text: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "buttonTextMetadata"
    )]
    pub button_text_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that allows the recipient to approve documents
     *  without placing a signature or initials on the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AskAdmin {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub message: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub phone: String,
}

/// Contains information about an attachment.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Attachment {
    /**
     * Contains information about an attachment.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessControl"
    )]
    pub access_control: String,
    /**
     * Contains information about an attachment.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "attachmentId"
    )]
    pub attachment_id: String,
    /**
     * Contains information about an attachment.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "attachmentType"
    )]
    pub attachment_type: String,
    /**
     * Contains information about an attachment.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub data: String,
    /**
     * Contains information about an attachment.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub label: String,
    /**
     * Contains information about an attachment.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Contains information about an attachment.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "remoteUrl"
    )]
    pub remote_url: String,
}

/// Contains information about the method used for authentication.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AuthenticationMethod {
    /**
     * Contains information about the method used for authentication.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authenticationType"
    )]
    pub authentication_type: String,
    /**
     * Contains information about the method used for authentication.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastProvider"
    )]
    pub last_provider: String,
    /**
     * Contains information about the method used for authentication.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastTimestamp"
    )]
    pub last_timestamp: String,
    /**
     * Contains information about the method used for authentication.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalCount"
    )]
    pub total_count: String,
}

/// A complex element that contains information about a user's authentication status.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct AuthenticationStatus {
    /**
     * A complex element that contains information about a user's authentication status.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessCodeResult"
    )]
    pub access_code_result: Option<EventResult>,
    /**
     * A complex element that contains information about a user's authentication status.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ageVerifyResult"
    )]
    pub age_verify_result: Option<EventResult>,
    /**
     * A complex element that contains information about a user's authentication status.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anySocialIDResult"
    )]
    pub any_social_id_result: Option<EventResult>,
    /**
     * A complex element that contains information about a user's authentication status.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "facebookResult"
    )]
    pub facebook_result: Option<EventResult>,
    /**
     * A complex element that contains information about a user's authentication status.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "googleResult"
    )]
    pub google_result: Option<EventResult>,
    /**
     * A complex element that contains information about a user's authentication status.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idLookupResult"
    )]
    pub id_lookup_result: Option<EventResult>,
    /**
     * A complex element that contains information about a user's authentication status.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idQuestionsResult"
    )]
    pub id_questions_result: Option<EventResult>,
    /**
     * A complex element that contains information about a user's authentication status.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityVerificationResult"
    )]
    pub identity_verification_result: Option<EventResult>,
    /**
     * A complex element that contains information about a user's authentication status.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "linkedinResult"
    )]
    pub linkedin_result: Option<EventResult>,
    /**
     * A complex element that contains information about a user's authentication status.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "liveIDResult"
    )]
    pub live_id_result: Option<EventResult>,
    /**
     * A complex element that contains information about a user's authentication status.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ofacResult"
    )]
    pub ofac_result: Option<EventResult>,
    /**
     * A complex element that contains information about a user's authentication status.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "openIDResult"
    )]
    pub open_id_result: Option<EventResult>,
    /**
     * A complex element that contains information about a user's authentication status.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phoneAuthResult"
    )]
    pub phone_auth_result: Option<EventResult>,
    /**
     * A complex element that contains information about a user's authentication status.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sTANPinResult"
    )]
    pub s_tan_pin_result: Option<EventResult>,
    /**
     * A complex element that contains information about a user's authentication status.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "salesforceResult"
    )]
    pub salesforce_result: Option<EventResult>,
    /**
     * A complex element that contains information about a user's authentication status.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signatureProviderResult"
    )]
    pub signature_provider_result: Option<EventResult>,
    /**
     * A complex element that contains information about a user's authentication status.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smsAuthResult"
    )]
    pub sms_auth_result: Option<EventResult>,
    /**
     * A complex element that contains information about a user's authentication status.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "twitterResult"
    )]
    pub twitter_result: Option<EventResult>,
    /**
     * A complex element that contains information about a user's authentication status.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yahooResult"
    )]
    pub yahoo_result: Option<EventResult>,
}

/// Contains information about the BCC email address.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BccEmailAddress {
    /**
     * Contains information about the BCC email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bccEmailAddressId"
    )]
    pub bcc_email_address_id: String,
    /**
     * Contains information about the BCC email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
}

/// This object contains information abut a BCC email archive configuration (a BCC email address used to archive DocuSign-generated emails).
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BccEmailArchiveData {
    /**
     * This object contains information abut a BCC email archive configuration (a BCC email address used to archive DocuSign-generated emails).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountId"
    )]
    pub account_id: String,
    /**
     * This object contains information abut a BCC email archive configuration (a BCC email address used to archive DocuSign-generated emails).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bccEmailArchiveId"
    )]
    pub bcc_email_archive_id: String,
    /**
     * This object contains information abut a BCC email archive configuration (a BCC email address used to archive DocuSign-generated emails).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub created: String,
    /**
     * This object contains information abut a BCC email archive configuration (a BCC email address used to archive DocuSign-generated emails).
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdBy")]
    pub created_by: Option<UserInfo>,
    /**
     * This object contains information abut a BCC email archive configuration (a BCC email address used to archive DocuSign-generated emails).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * This object contains information abut a BCC email archive configuration (a BCC email address used to archive DocuSign-generated emails).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailNotificationId"
    )]
    pub email_notification_id: String,
    /**
     * This object contains information abut a BCC email archive configuration (a BCC email address used to archive DocuSign-generated emails).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub modified: String,
    /**
     * This object contains information abut a BCC email archive configuration (a BCC email address used to archive DocuSign-generated emails).
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "modifiedBy"
    )]
    pub modified_by: Option<UserInfo>,
    /**
     * This object contains information abut a BCC email archive configuration (a BCC email address used to archive DocuSign-generated emails).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * This object contains information abut a BCC email archive configuration (a BCC email address used to archive DocuSign-generated emails).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uri: String,
}

/// Contains details about the history of the BCC email archive configuration.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BccEmailArchiveHistory {
    /**
     * Contains details about the history of the BCC email archive configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountId"
    )]
    pub account_id: String,
    /**
     * Contains details about the history of the BCC email archive configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub action: String,
    /**
     * Contains details about the history of the BCC email archive configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Contains details about the history of the BCC email archive configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub modified: String,
    /**
     * Contains details about the history of the BCC email archive configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "modifiedBy"
    )]
    pub modified_by: Option<UserInfo>,
    /**
     * Contains details about the history of the BCC email archive configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BccEmailArchiveHistoryList {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "bccEmailArchiveHistory"
    )]
    pub bcc_email_archive_history: Vec<BccEmailArchiveHistory>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

/// Contains a list of BCC email archive configurations.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BccEmailArchiveList {
    /**
     * Contains a list of BCC email archive configurations.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "bccEmailArchives"
    )]
    pub bcc_email_archives: Vec<BccEmailArchiveData>,
    /**
     * Contains a list of BCC email archive configurations.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     * Contains a list of BCC email archive configurations.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     * Contains a list of BCC email archive configurations.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     * Contains a list of BCC email archive configurations.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     * Contains a list of BCC email archive configurations.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     * Contains a list of BCC email archive configurations.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

/// Contains information about a billing charge.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingCharge {
    /**
     * Contains information about a billing charge.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowedQuantity"
    )]
    pub allowed_quantity: String,
    /**
     * Contains information about a billing charge.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub blocked: String,
    /**
     * Contains information about a billing charge.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "chargeName"
    )]
    pub charge_name: String,
    /**
     * Contains information about a billing charge.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "chargeType"
    )]
    pub charge_type: String,
    /**
     * Contains information about a billing charge.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "chargeUnitOfMeasure"
    )]
    pub charge_unit_of_measure: String,
    /**
     * Contains information about a billing charge.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub discounts: Vec<BillingDiscount>,
    /**
     * Contains information about a billing charge.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "firstEffectiveDate"
    )]
    pub first_effective_date: Option<chrono::NaiveDate>,
    /**
     * Contains information about a billing charge.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includedQuantity"
    )]
    pub included_quantity: String,
    /**
     * Contains information about a billing charge.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "incrementalQuantity"
    )]
    pub incremental_quantity: String,
    /**
     * Contains information about a billing charge.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "lastEffectiveDate"
    )]
    pub last_effective_date: Option<chrono::NaiveDate>,
    /**
     * Contains information about a billing charge.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub prices: Vec<BillingPrice>,
    /**
     * Contains information about a billing charge.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "unitPrice"
    )]
    pub unit_price: String,
    /**
     * Contains information about a billing charge.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "usedQuantity"
    )]
    pub used_quantity: String,
}

/// Defines a billing charge response object.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingChargeResponse {
    /**
     * Defines a billing charge response object.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "billingChargeItems"
    )]
    pub billing_charge_items: Vec<BillingCharge>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingDiscount {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "beginQuantity"
    )]
    pub begin_quantity: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub discount: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endQuantity"
    )]
    pub end_quantity: String,
}

/// Contains information about a billing invoice.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingInvoice {
    /**
     * Contains information about a billing invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub amount: String,
    /**
     * Contains information about a billing invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub balance: String,
    /**
     * Contains information about a billing invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "dueDate"
    )]
    pub due_date: Option<chrono::NaiveDate>,
    /**
     * Contains information about a billing invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "invoiceId"
    )]
    pub invoice_id: String,
    /**
     * Contains information about a billing invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "invoiceItems"
    )]
    pub invoice_items: Vec<BillingInvoiceItem>,
    /**
     * Contains information about a billing invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "invoiceNumber"
    )]
    pub invoice_number: String,
    /**
     * Contains information about a billing invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "invoiceUri"
    )]
    pub invoice_uri: String,
    /**
     * Contains information about a billing invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nonTaxableAmount"
    )]
    pub non_taxable_amount: String,
    /**
     * Contains information about a billing invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pdfAvailable"
    )]
    pub pdf_available: String,
    /**
     * Contains information about a billing invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "taxableAmount"
    )]
    pub taxable_amount: String,
}

/// Contains information about an item on a billing invoice.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingInvoiceItem {
    /**
     * Contains information about an item on a billing invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "chargeAmount"
    )]
    pub charge_amount: String,
    /**
     * Contains information about an item on a billing invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "chargeName"
    )]
    pub charge_name: String,
    /**
     * Contains information about an item on a billing invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "invoiceItemId"
    )]
    pub invoice_item_id: String,
    /**
     * Contains information about an item on a billing invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub quantity: String,
    /**
     * Contains information about an item on a billing invoice.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "unitPrice"
    )]
    pub unit_price: String,
}

/// Defines a billing invoice response object.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingInvoicesResponse {
    /**
     * Defines a billing invoice response object.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "billingInvoices"
    )]
    pub billing_invoices: Vec<BillingInvoice>,
    /**
     * Defines a billing invoice response object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     * Defines a billing invoice response object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingInvoicesSummary {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "billingInvoices"
    )]
    pub billing_invoices: Vec<BillingInvoice>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pastDueBalance"
    )]
    pub past_due_balance: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentAllowed"
    )]
    pub payment_allowed: String,
}

/// Contains information on a billing plan.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingPayment {
    /**
     * Contains information on a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub amount: String,
    /**
     * Contains information on a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "invoiceId"
    )]
    pub invoice_id: String,
    /**
     * Contains information on a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentId"
    )]
    pub payment_id: String,
}

/// Defines a billing payment request object.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingPaymentItem {
    /**
     * Defines a billing payment request object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub amount: String,
    /**
     * Defines a billing payment request object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * Defines a billing payment request object.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "paymentDate"
    )]
    pub payment_date: Option<chrono::NaiveDate>,
    /**
     * Defines a billing payment request object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentId"
    )]
    pub payment_id: String,
    /**
     * Defines a billing payment request object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentNumber"
    )]
    pub payment_number: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingPaymentRequest {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentAmount"
    )]
    pub payment_amount: String,
}

/// Defines an billing payment response object.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingPaymentResponse {
    /**
     * Defines an billing payment response object.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "billingPayments"
    )]
    pub billing_payments: Vec<BillingPayment>,
}

/// Defines a billing payments response object.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingPaymentsResponse {
    /**
     * Defines a billing payments response object.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "billingPayments"
    )]
    pub billing_payments: Vec<BillingPaymentItem>,
    /**
     * Defines a billing payments response object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     * Defines a billing payments response object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
}

/// Contains information about a billing plan.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingPlan {
    /**
     * Contains information about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "appStoreProducts"
    )]
    pub app_store_products: Vec<AppStoreProduct>,
    /**
     * Contains information about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "currencyPlanPrices"
    )]
    pub currency_plan_prices: Vec<CurrencyPlanPrice>,
    /**
     * Contains information about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSupport"
    )]
    pub enable_support: String,
    /**
     * Contains information about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includedSeats"
    )]
    pub included_seats: String,
    /**
     * Contains information about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "otherDiscountPercent"
    )]
    pub other_discount_percent: String,
    /**
     * Contains information about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentCycle"
    )]
    pub payment_cycle: String,
    /**
     * Contains information about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentMethod"
    )]
    pub payment_method: String,
    /**
     * Contains information about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "perSeatPrice"
    )]
    pub per_seat_price: String,
    /**
     * Contains information about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "planClassification"
    )]
    pub plan_classification: String,
    /**
     * Contains information about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "planFeatureSets"
    )]
    pub plan_feature_sets: Vec<FeatureSet>,
    /**
     * Contains information about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "planId"
    )]
    pub plan_id: String,
    /**
     * Contains information about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "planName"
    )]
    pub plan_name: String,
    /**
     * Contains information about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "seatDiscounts"
    )]
    pub seat_discounts: Vec<SeatDiscount>,
    /**
     * Contains information about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "supportIncidentFee"
    )]
    pub support_incident_fee: String,
    /**
     * Contains information about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "supportPlanFee"
    )]
    pub support_plan_fee: String,
}

/// This object contains details about a billing plan.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingPlanInformation {
    /**
     * This object contains details about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appStoreReceipt"
    )]
    pub app_store_receipt: Option<AppStoreReceipt>,
    /**
     * This object contains details about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "billingAddress"
    )]
    pub billing_address: Option<AccountAddress>,
    /**
     * This object contains details about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "creditCardInformation"
    )]
    pub credit_card_information: Option<CreditCardInformation>,
    /**
     * This object contains details about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "directDebitProcessorInformation"
    )]
    pub direct_debit_processor_information: Option<DirectDebitProcessorInformation>,
    /**
     * This object contains details about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "downgradeReason"
    )]
    pub downgrade_reason: String,
    /**
     * This object contains details about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSupport"
    )]
    pub enable_support: String,
    /**
     * This object contains details about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includedSeats"
    )]
    pub included_seats: String,
    /**
     * This object contains details about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "incrementalSeats"
    )]
    pub incremental_seats: String,
    /**
     * This object contains details about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentMethod"
    )]
    pub payment_method: String,
    /**
     * This object contains details about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "paymentProcessorInformation"
    )]
    pub payment_processor_information: Option<PaymentProcessorInformation>,
    /**
     * This object contains details about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "planInformation"
    )]
    pub plan_information: Option<PlanInformation>,
    /**
     * This object contains details about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "referralInformation"
    )]
    pub referral_information: Option<ReferralInformation>,
    /**
     * This object contains details about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "renewalStatus"
    )]
    pub renewal_status: String,
    /**
     * This object contains details about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "saleDiscountAmount"
    )]
    pub sale_discount_amount: String,
    /**
     * This object contains details about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "saleDiscountFixedAmount"
    )]
    pub sale_discount_fixed_amount: String,
    /**
     * This object contains details about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "saleDiscountPercent"
    )]
    pub sale_discount_percent: String,
    /**
     * This object contains details about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "saleDiscountPeriods"
    )]
    pub sale_discount_periods: String,
    /**
     * This object contains details about a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "saleDiscountSeatPriceOverride"
    )]
    pub sale_discount_seat_price_override: String,
}

/// Information used to provide a preview of a billing plan.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingPlanPreview {
    /**
     * Information used to provide a preview of a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currencyCode"
    )]
    pub currency_code: String,
    /**
     * Information used to provide a preview of a billing plan.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub invoice: Option<BillingInvoice>,
    /**
     * Information used to provide a preview of a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isProrated"
    )]
    pub is_prorated: String,
    /**
     * Information used to provide a preview of a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "subtotalAmount"
    )]
    pub subtotal_amount: String,
    /**
     * Information used to provide a preview of a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "taxAmount"
    )]
    pub tax_amount: String,
    /**
     * Information used to provide a preview of a billing plan.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalAmount"
    )]
    pub total_amount: String,
}

/// Defines a billing plan response object.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingPlanResponse {
    /**
     * Defines a billing plan response object.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "billingPlan"
    )]
    pub billing_plan: Option<BillingPlan>,
    /**
     * Defines a billing plan response object.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "successorPlans"
    )]
    pub successor_plans: Vec<BillingPlan>,
}

/// Defines a billing plan update response object.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingPlanUpdateResponse {
    /**
     * Defines a billing plan update response object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountPaymentMethod"
    )]
    pub account_payment_method: String,
    /**
     * Defines a billing plan update response object.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "billingPlanPreview"
    )]
    pub billing_plan_preview: Option<BillingPlanPreview>,
    /**
     * Defines a billing plan update response object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currencyCode"
    )]
    pub currency_code: String,
    /**
     * Defines a billing plan update response object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includedSeats"
    )]
    pub included_seats: String,
    /**
     * Defines a billing plan update response object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentCycle"
    )]
    pub payment_cycle: String,
    /**
     * Defines a billing plan update response object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentMethod"
    )]
    pub payment_method: String,
    /**
     * Defines a billing plan update response object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "planId"
    )]
    pub plan_id: String,
    /**
     * Defines a billing plan update response object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "planName"
    )]
    pub plan_name: String,
}

/// Defines a billing plans response object.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingPlansResponse {
    /**
     * Defines a billing plans response object.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "billingPlans"
    )]
    pub billing_plans: Vec<BillingPlan>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BillingPrice {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "beginQuantity"
    )]
    pub begin_quantity: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endQuantity"
    )]
    pub end_quantity: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "unitPrice"
    )]
    pub unit_price: String,
}

/// Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Brand {
    /**
     * Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "brandCompany"
    )]
    pub brand_company: String,
    /**
     * Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "brandId"
    )]
    pub brand_id: String,
    /**
     * Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "brandLanguages"
    )]
    pub brand_languages: Vec<String>,
    /**
     * Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "brandName"
    )]
    pub brand_name: String,
    /**
     * Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub colors: Vec<NameValue>,
    /**
     * Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "defaultBrandLanguage"
    )]
    pub default_brand_language: String,
    /**
     * Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "emailContent"
    )]
    pub email_content: Vec<BrandEmailContent>,
    /**
     * Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "isOverridingCompanyName"
    )]
    pub is_overriding_company_name: bool,
    /**
     * Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "isSendingDefault"
    )]
    pub is_sending_default: bool,
    /**
     * Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "isSigningDefault"
    )]
    pub is_signing_default: bool,
    /**
     * Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "landingPages"
    )]
    pub landing_pages: Vec<NameValue>,
    /**
     * Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub links: Vec<BrandLink>,
    /**
     * Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logos: Option<BrandLogos>,
    /**
     * Information about a brand that is associated with an account. A brand applies custom styles and text to an envelope.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<BrandResourceUrls>,
}

/// Deprecated.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BrandEmailContent {
    /**
     * Deprecated.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub content: String,
    /**
     * Deprecated.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailContentType"
    )]
    pub email_content_type: String,
    /**
     * Deprecated.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailToLink"
    )]
    pub email_to_link: String,
    /**
     * Deprecated.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "linkText"
    )]
    pub link_text: String,
}

/// Information about a link that a brand uses.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BrandLink {
    /**
     * Information about a link that a brand uses.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "linkText"
    )]
    pub link_text: String,
    /**
     * Information about a link that a brand uses.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "linkType"
    )]
    pub link_type: String,
    /**
     * Information about a link that a brand uses.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "showLink"
    )]
    pub show_link: String,
    /**
     * Information about a link that a brand uses.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "urlOrMailTo"
    )]
    pub url_or_mail_to: String,
}

/// Information about the logos associated with the brand.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BrandLogos {
    /**
     * Information about the logos associated with the brand.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Information about the logos associated with the brand.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub primary: String,
    /**
     * Information about the logos associated with the brand.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub secondary: String,
}

/// This request object contains information about a specific brand.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BrandRequest {
    /**
     * This request object contains information about a specific brand.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "brandId"
    )]
    pub brand_id: String,
}

/// Brands use resource files to style the following experiences:
///
/// - Email
/// - Sending
/// - Signing
/// - Captive (embedded) signing
///
/// You can modify these resource files to customize these experiences.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BrandResourceUrls {
    /**
     * Brands use resource files to style the following experiences:
     *  
     *  - Email
     *  - Sending
     *  - Signing
     *  - Captive (embedded) signing
     *  
     *  You can modify these resource files to customize these experiences.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Brands use resource files to style the following experiences:
     *  
     *  - Email
     *  - Sending
     *  - Signing
     *  - Captive (embedded) signing
     *  
     *  You can modify these resource files to customize these experiences.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sending: String,
    /**
     * Brands use resource files to style the following experiences:
     *  
     *  - Email
     *  - Sending
     *  - Signing
     *  - Captive (embedded) signing
     *  
     *  You can modify these resource files to customize these experiences.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub signing: String,
    /**
     * Brands use resource files to style the following experiences:
     *  
     *  - Email
     *  - Sending
     *  - Signing
     *  - Captive (embedded) signing
     *  
     *  You can modify these resource files to customize these experiences.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingCaptive"
    )]
    pub signing_captive: String,
}

/// Information about the resource files that the brand uses for the email, signing, sending, and captive (embedded) signing experiences.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BrandResources {
    /**
     * Information about the resource files that the brand uses for the email, signing, sending, and captive (embedded) signing experiences.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createdByUserInfo"
    )]
    pub created_by_user_info: Option<UserInfo>,
    /**
     * Information about the resource files that the brand uses for the email, signing, sending, and captive (embedded) signing experiences.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "createdDate"
    )]
    pub created_date: Option<chrono::NaiveDate>,
    /**
     * Information about the resource files that the brand uses for the email, signing, sending, and captive (embedded) signing experiences.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "dataNotSavedNotInMaster"
    )]
    pub data_not_saved_not_in_master: Vec<String>,
    /**
     * Information about the resource files that the brand uses for the email, signing, sending, and captive (embedded) signing experiences.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "modifiedByUserInfo"
    )]
    pub modified_by_user_info: Option<UserInfo>,
    /**
     * Information about the resource files that the brand uses for the email, signing, sending, and captive (embedded) signing experiences.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "modifiedDate"
    )]
    pub modified_date: Option<chrono::NaiveDate>,
    /**
     * Information about the resource files that the brand uses for the email, signing, sending, and captive (embedded) signing experiences.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "modifiedTemplates"
    )]
    pub modified_templates: Vec<String>,
    /**
     * Information about the resource files that the brand uses for the email, signing, sending, and captive (embedded) signing experiences.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resourcesContentType"
    )]
    pub resources_content_type: String,
    /**
     * Information about the resource files that the brand uses for the email, signing, sending, and captive (embedded) signing experiences.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resourcesContentUri"
    )]
    pub resources_content_uri: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BrandResourcesList {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "resourcesContentTypes"
    )]
    pub resources_content_types: Vec<BrandResources>,
}

/// Details about one or more brands.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BrandsRequest {
    /**
     * Details about one or more brands.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub brands: Vec<BrandRequest>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BrandsResponse {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub brands: Vec<Brand>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientBrandIdDefault"
    )]
    pub recipient_brand_id_default: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderBrandIdDefault"
    )]
    pub sender_brand_id_default: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkEnvelope {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bulkRecipientRow"
    )]
    pub bulk_recipient_row: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bulkStatus"
    )]
    pub bulk_status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeUri"
    )]
    pub envelope_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "submittedDateTime"
    )]
    pub submitted_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "transactionId"
    )]
    pub transaction_id: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkEnvelopeStatus {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "batchId"
    )]
    pub batch_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "batchSize"
    )]
    pub batch_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "bulkEnvelopes"
    )]
    pub bulk_envelopes: Vec<BulkEnvelope>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bulkEnvelopesBatchUri"
    )]
    pub bulk_envelopes_batch_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub failed: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub queued: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sent: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "submittedDate"
    )]
    pub submitted_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkRecipient {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCode"
    )]
    pub access_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "errorDetails"
    )]
    pub error_details: Vec<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub identification: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub note: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "phoneNumber"
    )]
    pub phone_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientSignatureProviderInfo"
    )]
    pub recipient_signature_provider_info: Vec<BulkRecipientSignatureProvider>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "rowNumber"
    )]
    pub row_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabLabels"
    )]
    pub tab_labels: Vec<BulkRecipientTabLabel>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkRecipientSignatureProvider {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkRecipientTabLabel {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkRecipientsRequest {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "bulkRecipients"
    )]
    pub bulk_recipients: Vec<BulkRecipient>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkRecipientsResponse {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "bulkRecipients"
    )]
    pub bulk_recipients: Vec<BulkRecipient>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkRecipientsSummaryResponse {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "bulkRecipients"
    )]
    pub bulk_recipients: Vec<BulkRecipient>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bulkRecipientsCount"
    )]
    pub bulk_recipients_count: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bulkRecipientsUri"
    )]
    pub bulk_recipients_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "errorDetails"
    )]
    pub error_details: Vec<ErrorDetails>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkRecipientsUpdateResponse {
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub signer: Option<Signer>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkSendBatchRequest {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "batchName"
    )]
    pub batch_name: String,
}

/// Result of `getBulkSendBatchStatus`
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkSendBatchStatus {
    /**
     * Result of `getBulkSendBatchStatus`
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "batchId"
    )]
    pub batch_id: String,
    /**
     * Result of `getBulkSendBatchStatus`
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "batchName"
    )]
    pub batch_name: String,
    /**
     * Result of `getBulkSendBatchStatus`
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "batchSize"
    )]
    pub batch_size: String,
    /**
     * Result of `getBulkSendBatchStatus`
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "bulkErrors"
    )]
    pub bulk_errors: Vec<BulkSendErrorStatus>,
    /**
     * Result of `getBulkSendBatchStatus`
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeIdOrTemplateId"
    )]
    pub envelope_id_or_template_id: String,
    /**
     * Result of `getBulkSendBatchStatus`
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopesUri"
    )]
    pub envelopes_uri: String,
    /**
     * Result of `getBulkSendBatchStatus`
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub failed: String,
    /**
     * Result of `getBulkSendBatchStatus`
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mailingListId"
    )]
    pub mailing_list_id: String,
    /**
     * Result of `getBulkSendBatchStatus`
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "ownerUserId"
    )]
    pub owner_user_id: String,
    /**
     * Result of `getBulkSendBatchStatus`
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub queued: String,
    /**
     * Result of `getBulkSendBatchStatus`
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderUserId"
    )]
    pub sender_user_id: String,
    /**
     * Result of `getBulkSendBatchStatus`
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sent: String,
    /**
     * Result of `getBulkSendBatchStatus`
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "submittedDate"
    )]
    pub submitted_date: Option<chrono::NaiveDate>,
}

/// A list of bulk send batch summaries.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkSendBatchSummaries {
    /**
     * A list of bulk send batch summaries.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "batchSizeLimit"
    )]
    pub batch_size_limit: String,
    /**
     * A list of bulk send batch summaries.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "bulkBatchSummaries"
    )]
    pub bulk_batch_summaries: Vec<BulkSendBatchSummary>,
    /**
     * A list of bulk send batch summaries.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     * A list of bulk send batch summaries.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     * A list of bulk send batch summaries.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     * A list of bulk send batch summaries.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "queueLimit"
    )]
    pub queue_limit: String,
    /**
     * A list of bulk send batch summaries.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     * A list of bulk send batch summaries.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     * A list of bulk send batch summaries.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalQueued"
    )]
    pub total_queued: String,
    /**
     * A list of bulk send batch summaries.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

/// Summary status of a single batch.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkSendBatchSummary {
    /**
     * Summary status of a single batch.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "batchId"
    )]
    pub batch_id: String,
    /**
     * Summary status of a single batch.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "batchName"
    )]
    pub batch_name: String,
    /**
     * Summary status of a single batch.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "batchSize"
    )]
    pub batch_size: String,
    /**
     * Summary status of a single batch.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "batchUri"
    )]
    pub batch_uri: String,
    /**
     * Summary status of a single batch.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub failed: String,
    /**
     * Summary status of a single batch.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub queued: String,
    /**
     * Summary status of a single batch.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sent: String,
    /**
     * Summary status of a single batch.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "submittedDate"
    )]
    pub submitted_date: Option<chrono::NaiveDate>,
}

/// A single bulk send error report.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkSendErrorStatus {
    /**
     * A single bulk send error report.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub created: String,
    /**
     * A single bulk send error report.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "errorMessage"
    )]
    pub error_message: String,
    /**
     * A single bulk send error report.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientEmails"
    )]
    pub recipient_emails: Vec<String>,
}

/// This object contains information about the envelope or template that you want to send in bulk.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkSendRequest {
    /**
     * This object contains information about the envelope or template that you want to send in bulk.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "batchName"
    )]
    pub batch_name: String,
    /**
     * This object contains information about the envelope or template that you want to send in bulk.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeOrTemplateId"
    )]
    pub envelope_or_template_id: String,
}

/// The object contains the response to a bulk send request.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkSendResponse {
    /**
     * The object contains the response to a bulk send request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "batchId"
    )]
    pub batch_id: String,
    /**
     * The object contains the response to a bulk send request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "batchName"
    )]
    pub batch_name: String,
    /**
     * The object contains the response to a bulk send request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "batchSize"
    )]
    pub batch_size: String,
    /**
     * The object contains the response to a bulk send request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeOrTemplateId"
    )]
    pub envelope_or_template_id: String,
    /**
     * The object contains the response to a bulk send request.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "errorDetails"
    )]
    pub error_details: Vec<String>,
    /**
     * The object contains the response to a bulk send request.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub errors: Vec<String>,
    /**
     * The object contains the response to a bulk send request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "queueLimit"
    )]
    pub queue_limit: String,
    /**
     * The object contains the response to a bulk send request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalQueued"
    )]
    pub total_queued: String,
}

/// This object contains the results of a bulk send test.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkSendTestResponse {
    /**
     * This object contains the results of a bulk send test.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "canBeSent"
    )]
    pub can_be_sent: bool,
    /**
     * This object contains the results of a bulk send test.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "validationErrorDetails"
    )]
    pub validation_error_details: Vec<String>,
    /**
     * This object contains the results of a bulk send test.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "validationErrors"
    )]
    pub validation_errors: Vec<String>,
}

/// This object contains the details to use for a specific copy, or instance, of the envelope. When you send an envelope by using a bulk send list, you can customize these properties for each instance.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkSendingCopy {
    /**
     * This object contains the details to use for a specific copy, or instance, of the envelope. When you send an envelope by using a bulk send list, you can customize these properties for each instance.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "customFields"
    )]
    pub custom_fields: Vec<BulkSendingCopyCustomField>,
    /**
     * This object contains the details to use for a specific copy, or instance, of the envelope. When you send an envelope by using a bulk send list, you can customize these properties for each instance.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailBlurb"
    )]
    pub email_blurb: String,
    /**
     * This object contains the details to use for a specific copy, or instance, of the envelope. When you send an envelope by using a bulk send list, you can customize these properties for each instance.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailSubject"
    )]
    pub email_subject: String,
    /**
     * This object contains the details to use for a specific copy, or instance, of the envelope. When you send an envelope by using a bulk send list, you can customize these properties for each instance.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub recipients: Vec<BulkSendingCopyRecipient>,
}

/// This object contains details about a custom field for a bulk send copy. In a bulk send request, each custom field in the bulk send list must match a custom field in the envelope or template that you want to send.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkSendingCopyCustomField {
    /**
     * This object contains details about a custom field for a bulk send copy. In a bulk send request, each custom field in the bulk send list must match a custom field in the envelope or template that you want to send.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * This object contains details about a custom field for a bulk send copy. In a bulk send request, each custom field in the bulk send list must match a custom field in the envelope or template that you want to send.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

/// This object contains details about a bulk send recipient.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkSendingCopyRecipient {
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCode"
    )]
    pub access_code: String,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "clientUserId"
    )]
    pub client_user_id: String,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "customFields"
    )]
    pub custom_fields: Vec<String>,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveryMethod"
    )]
    pub delivery_method: String,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailNotification"
    )]
    pub email_notification: Option<RecipientEmailNotification>,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "embeddedRecipientStartURL"
    )]
    pub embedded_recipient_start_url: String,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "faxNumber"
    )]
    pub fax_number: String,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hostEmail"
    )]
    pub host_email: String,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hostName"
    )]
    pub host_name: String,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idCheckConfigurationName"
    )]
    pub id_check_configuration_name: String,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckInformationInput"
    )]
    pub id_check_information_input: Option<IdCheckInformationInput>,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "identificationMethod"
    )]
    pub identification_method: String,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub note: String,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phoneAuthentication"
    )]
    pub phone_authentication: Option<RecipientPhoneAuthentication>,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientSignatureProviders"
    )]
    pub recipient_signature_providers: Vec<RecipientSignatureProvider>,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "roleName"
    )]
    pub role_name: String,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerName"
    )]
    pub signer_name: String,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupId"
    )]
    pub signing_group_id: String,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smsAuthentication"
    )]
    pub sms_authentication: Option<RecipientSmsAuthentication>,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "socialAuthentications"
    )]
    pub social_authentications: Vec<SocialAuthentication>,
    /**
     * This object contains details about a bulk send recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub tabs: Vec<BulkSendingCopyTab>,
}

/// A tab associated with the bulk send recipient. In a bulk send request, each recipient tab must match a recipient tab on the envelope or template that you want to send. To match up, the `tabLabel` for this tab and the `tabLabel` for the corresponding tab on the envelope or template must be the same.
///
/// For example, if the envelope has a placeholder text tab with the `tabLabel` `childName`, you must assign the same `tabLabel` `childName` to the tab here that you are populating with that information.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkSendingCopyTab {
    /**
     * A tab associated with the bulk send recipient. In a bulk send request, each recipient tab must match a recipient tab on the envelope or template that you want to send. To match up, the `tabLabel` for this tab and the `tabLabel` for the corresponding tab on the envelope or template must be the same.
     *  
     *  For example, if the envelope has a placeholder text tab with the `tabLabel` `childName`, you must assign the same `tabLabel` `childName` to the tab here that you are populating with that information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initialValue"
    )]
    pub initial_value: String,
    /**
     * A tab associated with the bulk send recipient. In a bulk send request, each recipient tab must match a recipient tab on the envelope or template that you want to send. To match up, the `tabLabel` for this tab and the `tabLabel` for the corresponding tab on the envelope or template must be the same.
     *  
     *  For example, if the envelope has a placeholder text tab with the `tabLabel` `childName`, you must assign the same `tabLabel` `childName` to the tab here that you are populating with that information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
}

/// This object contains the details for the bulk send list.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkSendingList {
    /**
     * This object contains the details for the bulk send list.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "bulkCopies"
    )]
    pub bulk_copies: Vec<BulkSendingCopy>,
    /**
     * This object contains the details for the bulk send list.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "listId"
    )]
    pub list_id: String,
    /**
     * This object contains the details for the bulk send list.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/// This complex type contains summaries that provide basic information about the bulk send lists that belong to the current user.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkSendingListSummaries {
    /**
     * This complex type contains summaries that provide basic information about the bulk send lists that belong to the current user.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "bulkListSummaries"
    )]
    pub bulk_list_summaries: Vec<BulkSendingListSummary>,
}

/// This object contains basic information about a bulk send list.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct BulkSendingListSummary {
    /**
     * This object contains basic information about a bulk send list.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bulkSendListId"
    )]
    pub bulk_send_list_id: String,
    /**
     * This object contains basic information about a bulk send list.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdByUser"
    )]
    pub created_by_user: String,
    /**
     * This object contains basic information about a bulk send list.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "createdDate"
    )]
    pub created_date: Option<chrono::NaiveDate>,
    /**
     * This object contains basic information about a bulk send list.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/// This object contains details about a captive (embedded) recipient.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CaptiveRecipient {
    /**
     * This object contains details about a captive (embedded) recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "clientUserId"
    )]
    pub client_user_id: String,
    /**
     * This object contains details about a captive (embedded) recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * This object contains details about a captive (embedded) recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * This object contains details about a captive (embedded) recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userName"
    )]
    pub user_name: String,
}

/// Contains information about captive (embedded) recipients.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CaptiveRecipientInformation {
    /**
     * Contains information about captive (embedded) recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "captiveRecipients"
    )]
    pub captive_recipients: Vec<CaptiveRecipient>,
}

/// Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CarbonCopy {
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCode"
    )]
    pub access_code: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessCodeMetadata"
    )]
    pub access_code_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "addAccessCodeToEmail"
    )]
    pub add_access_code_to_email: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "additionalNotifications"
    )]
    pub additional_notifications: Vec<RecipientAdditionalNotification>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "agentCanEditEmail"
    )]
    pub agent_can_edit_email: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "agentCanEditName"
    )]
    pub agent_can_edit_name: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSystemOverrideForLockedRecipient"
    )]
    pub allow_system_override_for_locked_recipient: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "clientUserId"
    )]
    pub client_user_id: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "completedCount"
    )]
    pub completed_count: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "customFields"
    )]
    pub custom_fields: Vec<String>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedDateTime"
    )]
    pub declined_date_time: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedReason"
    )]
    pub declined_reason: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveredDateTime"
    )]
    pub delivered_date_time: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveryMethod"
    )]
    pub delivery_method: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryMethodMetadata"
    )]
    pub delivery_method_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorId"
    )]
    pub designator_id: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorIdGuid"
    )]
    pub designator_id_guid: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentVisibility"
    )]
    pub document_visibility: Vec<DocumentVisibility>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailMetadata"
    )]
    pub email_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailNotification"
    )]
    pub email_notification: Option<RecipientEmailNotification>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "embeddedRecipientStartURL"
    )]
    pub embedded_recipient_start_url: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "excludedDocuments"
    )]
    pub excluded_documents: Vec<String>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "faxNumber"
    )]
    pub fax_number: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "faxNumberMetadata"
    )]
    pub fax_number_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "firstName"
    )]
    pub first_name: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "firstNameMetadata"
    )]
    pub first_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fullName"
    )]
    pub full_name: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fullNameMetadata"
    )]
    pub full_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idCheckConfigurationName"
    )]
    pub id_check_configuration_name: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckConfigurationNameMetadata"
    )]
    pub id_check_configuration_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckInformationInput"
    )]
    pub id_check_information_input: Option<IdCheckInformationInput>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityVerification"
    )]
    pub identity_verification: Option<RecipientIdentityVerification>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "inheritEmailNotificationConfiguration"
    )]
    pub inherit_email_notification_configuration: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastName"
    )]
    pub last_name: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastNameMetadata"
    )]
    pub last_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientPhoneAuthEditable"
    )]
    pub locked_recipient_phone_auth_editable: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientSmsEditable"
    )]
    pub locked_recipient_sms_editable: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub note: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteMetadata"
    )]
    pub note_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phoneAuthentication"
    )]
    pub phone_authentication: Option<RecipientPhoneAuthentication>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proofFile")]
    pub proof_file: Option<RecipientProofFile>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientAttachments"
    )]
    pub recipient_attachments: Vec<RecipientAttachment>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientAuthenticationStatus"
    )]
    pub recipient_authentication_status: Option<AuthenticationStatus>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientFeatureMetadata"
    )]
    pub recipient_feature_metadata: Vec<FeatureAvailableMetadata>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientType"
    )]
    pub recipient_type: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientTypeMetadata"
    )]
    pub recipient_type_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireIdLookup"
    )]
    pub require_id_lookup: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireIdLookupMetadata"
    )]
    pub require_id_lookup_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "roleName"
    )]
    pub role_name: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "routingOrder"
    )]
    pub routing_order: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routingOrderMetadata"
    )]
    pub routing_order_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentDateTime"
    )]
    pub sent_date_time: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signedDateTime"
    )]
    pub signed_date_time: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupId"
    )]
    pub signing_group_id: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingGroupIdMetadata"
    )]
    pub signing_group_id_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupName"
    )]
    pub signing_group_name: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signingGroupUsers"
    )]
    pub signing_group_users: Vec<UserInfo>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smsAuthentication"
    )]
    pub sms_authentication: Option<RecipientSmsAuthentication>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "socialAuthentications"
    )]
    pub social_authentications: Vec<SocialAuthentication>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusCode"
    )]
    pub status_code: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "suppressEmails"
    )]
    pub suppress_emails: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tabs: Option<EnvelopeRecipientTabs>,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalTabCount"
    )]
    pub total_tab_count: String,
    /**
     * Contains information about a carbon copy recipient. Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
}

/// Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CertifiedDelivery {
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCode"
    )]
    pub access_code: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessCodeMetadata"
    )]
    pub access_code_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "addAccessCodeToEmail"
    )]
    pub add_access_code_to_email: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "additionalNotifications"
    )]
    pub additional_notifications: Vec<RecipientAdditionalNotification>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "agentCanEditEmail"
    )]
    pub agent_can_edit_email: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "agentCanEditName"
    )]
    pub agent_can_edit_name: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSystemOverrideForLockedRecipient"
    )]
    pub allow_system_override_for_locked_recipient: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "clientUserId"
    )]
    pub client_user_id: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "completedCount"
    )]
    pub completed_count: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "customFields"
    )]
    pub custom_fields: Vec<String>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedDateTime"
    )]
    pub declined_date_time: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedReason"
    )]
    pub declined_reason: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveredDateTime"
    )]
    pub delivered_date_time: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveryMethod"
    )]
    pub delivery_method: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryMethodMetadata"
    )]
    pub delivery_method_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorId"
    )]
    pub designator_id: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorIdGuid"
    )]
    pub designator_id_guid: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentVisibility"
    )]
    pub document_visibility: Vec<DocumentVisibility>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailMetadata"
    )]
    pub email_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailNotification"
    )]
    pub email_notification: Option<RecipientEmailNotification>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "embeddedRecipientStartURL"
    )]
    pub embedded_recipient_start_url: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "excludedDocuments"
    )]
    pub excluded_documents: Vec<String>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "faxNumber"
    )]
    pub fax_number: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "faxNumberMetadata"
    )]
    pub fax_number_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "firstName"
    )]
    pub first_name: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "firstNameMetadata"
    )]
    pub first_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fullName"
    )]
    pub full_name: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fullNameMetadata"
    )]
    pub full_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idCheckConfigurationName"
    )]
    pub id_check_configuration_name: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckConfigurationNameMetadata"
    )]
    pub id_check_configuration_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckInformationInput"
    )]
    pub id_check_information_input: Option<IdCheckInformationInput>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityVerification"
    )]
    pub identity_verification: Option<RecipientIdentityVerification>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "inheritEmailNotificationConfiguration"
    )]
    pub inherit_email_notification_configuration: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastName"
    )]
    pub last_name: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastNameMetadata"
    )]
    pub last_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientPhoneAuthEditable"
    )]
    pub locked_recipient_phone_auth_editable: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientSmsEditable"
    )]
    pub locked_recipient_sms_editable: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub note: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteMetadata"
    )]
    pub note_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phoneAuthentication"
    )]
    pub phone_authentication: Option<RecipientPhoneAuthentication>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proofFile")]
    pub proof_file: Option<RecipientProofFile>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientAttachments"
    )]
    pub recipient_attachments: Vec<RecipientAttachment>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientAuthenticationStatus"
    )]
    pub recipient_authentication_status: Option<AuthenticationStatus>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientFeatureMetadata"
    )]
    pub recipient_feature_metadata: Vec<FeatureAvailableMetadata>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientType"
    )]
    pub recipient_type: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientTypeMetadata"
    )]
    pub recipient_type_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireIdLookup"
    )]
    pub require_id_lookup: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireIdLookupMetadata"
    )]
    pub require_id_lookup_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "roleName"
    )]
    pub role_name: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "routingOrder"
    )]
    pub routing_order: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routingOrderMetadata"
    )]
    pub routing_order_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentDateTime"
    )]
    pub sent_date_time: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signedDateTime"
    )]
    pub signed_date_time: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupId"
    )]
    pub signing_group_id: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingGroupIdMetadata"
    )]
    pub signing_group_id_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupName"
    )]
    pub signing_group_name: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signingGroupUsers"
    )]
    pub signing_group_users: Vec<UserInfo>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smsAuthentication"
    )]
    pub sms_authentication: Option<RecipientSmsAuthentication>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "socialAuthentications"
    )]
    pub social_authentications: Vec<SocialAuthentication>,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusCode"
    )]
    pub status_code: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "suppressEmails"
    )]
    pub suppress_emails: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalTabCount"
    )]
    pub total_tab_count: String,
    /**
     * Contains information about a certified delivery recipient. Certified delivery recipients must receive the completed documents for the envelope to be completed. However, they don't need to sign, initial, date or add information to any of the documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
}

/// A tab that allows the recipient to select a yes/no (on/off) option.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Checkbox {
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireInitialOnSharedChange"
    )]
    pub require_initial_on_shared_change: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireInitialOnSharedChangeMetadata"
    )]
    pub require_initial_on_shared_change_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub selected: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "selectedMetadata"
    )]
    pub selected_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharedMetadata"
    )]
    pub shared_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that allows the recipient to select a yes/no (on/off) option.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// An object that contains information about the chunked upload part.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ChunkedUploadPart {
    /**
     * An object that contains information about the chunked upload part.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sequence: String,
    /**
     * An object that contains information about the chunked upload part.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub size: String,
}

/// This is the request object for uploading a chunked upload.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ChunkedUploadRequest {
    /**
     * This is the request object for uploading a chunked upload.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "chunkedUploadId"
    )]
    pub chunked_upload_id: String,
    /**
     * This is the request object for uploading a chunked upload.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub data: String,
}

/// This response object is returned after you upload a chunked upload.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ChunkedUploadResponse {
    /**
     * This response object is returned after you upload a chunked upload.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub checksum: String,
    /**
     * This response object is returned after you upload a chunked upload.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "chunkedUploadId"
    )]
    pub chunked_upload_id: String,
    /**
     * This response object is returned after you upload a chunked upload.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "chunkedUploadParts"
    )]
    pub chunked_upload_parts: Vec<ChunkedUploadPart>,
    /**
     * This response object is returned after you upload a chunked upload.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "chunkedUploadUri"
    )]
    pub chunked_upload_uri: String,
    /**
     * This response object is returned after you upload a chunked upload.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub committed: String,
    /**
     * This response object is returned after you upload a chunked upload.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expirationDateTime"
    )]
    pub expiration_date_time: String,
    /**
     * This response object is returned after you upload a chunked upload.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxChunkedUploadParts"
    )]
    pub max_chunked_upload_parts: String,
    /**
     * This response object is returned after you upload a chunked upload.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxTotalSize"
    )]
    pub max_total_size: String,
    /**
     * This response object is returned after you upload a chunked upload.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSize"
    )]
    pub total_size: String,
}

/// Contains details about a specific cloud storage provider.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CloudStorageProvider {
    /**
     * Contains details about a specific cloud storage provider.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authenticationUrl"
    )]
    pub authentication_url: String,
    /**
     * Contains details about a specific cloud storage provider.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Contains details about a specific cloud storage provider.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "redirectUrl"
    )]
    pub redirect_url: String,
    /**
     * Contains details about a specific cloud storage provider.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub service: String,
    /**
     * Contains details about a specific cloud storage provider.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "serviceId"
    )]
    pub service_id: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CloudStorageProvidersData {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "storageProviders"
    )]
    pub storage_providers: Vec<CloudStorageProvider>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Comment {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub hmac: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub mentions: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize"
    )]
    pub read: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentByEmail"
    )]
    pub sent_by_email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentByFullName"
    )]
    pub sent_by_full_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentByImageId"
    )]
    pub sent_by_image_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentByInitials"
    )]
    pub sent_by_initials: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentByRecipientId"
    )]
    pub sent_by_recipient_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentByUserId"
    )]
    pub sent_by_user_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupId"
    )]
    pub signing_group_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupName"
    )]
    pub signing_group_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub subject: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub text: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "threadId"
    )]
    pub thread_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "threadOriginatorId"
    )]
    pub thread_originator_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "timeStampFormatted"
    )]
    pub time_stamp_formatted: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub timestamp: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "visibleTo"
    )]
    pub visible_to: Vec<String>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CommentHistoryResult {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub comments: Vec<Comment>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize"
    )]
    pub count: i64,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endTimetoken"
    )]
    pub end_timetoken: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startTimetoken"
    )]
    pub start_timetoken: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CommentPublish {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub mentions: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub text: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "threadAnchorKeys"
    )]
    pub thread_anchor_keys: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "threadId"
    )]
    pub thread_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "visibleTo"
    )]
    pub visible_to: Vec<String>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CommentThread {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub comments: Vec<Comment>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "threadId"
    )]
    pub thread_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CommentsPublish {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commentsToPublish"
    )]
    pub comments_to_publish: Vec<CommentPublish>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CommissionCounty {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "concealValueOnDocument"
    )]
    pub conceal_value_on_document: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "concealValueOnDocumentMetadata"
    )]
    pub conceal_value_on_document_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableAutoSize"
    )]
    pub disable_auto_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableAutoSizeMetadata"
    )]
    pub disable_auto_size_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxLength"
    )]
    pub max_length: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxLengthMetadata"
    )]
    pub max_length_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "originalValue"
    )]
    pub original_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "originalValueMetadata"
    )]
    pub original_value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CommissionExpiration {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "concealValueOnDocument"
    )]
    pub conceal_value_on_document: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "concealValueOnDocumentMetadata"
    )]
    pub conceal_value_on_document_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableAutoSize"
    )]
    pub disable_auto_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableAutoSizeMetadata"
    )]
    pub disable_auto_size_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxLength"
    )]
    pub max_length: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxLengthMetadata"
    )]
    pub max_length_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "originalValue"
    )]
    pub original_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "originalValueMetadata"
    )]
    pub original_value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CommissionNumber {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "concealValueOnDocument"
    )]
    pub conceal_value_on_document: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "concealValueOnDocumentMetadata"
    )]
    pub conceal_value_on_document_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableAutoSize"
    )]
    pub disable_auto_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableAutoSizeMetadata"
    )]
    pub disable_auto_size_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxLength"
    )]
    pub max_length: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxLengthMetadata"
    )]
    pub max_length_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "originalValue"
    )]
    pub original_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "originalValueMetadata"
    )]
    pub original_value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CommissionState {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "concealValueOnDocument"
    )]
    pub conceal_value_on_document: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "concealValueOnDocumentMetadata"
    )]
    pub conceal_value_on_document_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableAutoSize"
    )]
    pub disable_auto_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableAutoSizeMetadata"
    )]
    pub disable_auto_size_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxLength"
    )]
    pub max_length: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxLengthMetadata"
    )]
    pub max_length_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "originalValue"
    )]
    pub original_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "originalValueMetadata"
    )]
    pub original_value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// A tab that displays the recipient's company name.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Company {
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "concealValueOnDocument"
    )]
    pub conceal_value_on_document: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "concealValueOnDocumentMetadata"
    )]
    pub conceal_value_on_document_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableAutoSize"
    )]
    pub disable_auto_size: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableAutoSizeMetadata"
    )]
    pub disable_auto_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxLength"
    )]
    pub max_length: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxLengthMetadata"
    )]
    pub max_length_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "originalValue"
    )]
    pub original_value: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "originalValueMetadata"
    )]
    pub original_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that displays the recipient's company name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CompleteSignHashResponse {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub documents: Vec<serde_json::Value>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "redirectionUrl"
    )]
    pub redirection_url: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "remainingSignatureRequests"
    )]
    pub remaining_signature_requests: String,
}

/// This object contains information about a [composite template][composite], which you can use to to apply multiple templates to a single envelope, combine templates with PDF forms, and combine templates with documents from cloud sources.
///
/// [composite]: https://developers.docusign.com/esign-rest-api/guides/features/templates#composite-templates
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CompositeTemplate {
    /**
     * This object contains information about a [composite template][composite], which you can use to to apply multiple templates to a single envelope, combine templates with PDF forms, and combine templates with documents from cloud sources.
     *  
     *  [composite]: https://developers.docusign.com/esign-rest-api/guides/features/templates#composite-templates
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "compositeTemplateId"
    )]
    pub composite_template_id: String,
    /**
     * This object contains information about a [composite template][composite], which you can use to to apply multiple templates to a single envelope, combine templates with PDF forms, and combine templates with documents from cloud sources.
     *  
     *  [composite]: https://developers.docusign.com/esign-rest-api/guides/features/templates#composite-templates
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub document: Option<Document>,
    /**
     * This object contains information about a [composite template][composite], which you can use to to apply multiple templates to a single envelope, combine templates with PDF forms, and combine templates with documents from cloud sources.
     *  
     *  [composite]: https://developers.docusign.com/esign-rest-api/guides/features/templates#composite-templates
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "inlineTemplates"
    )]
    pub inline_templates: Vec<InlineTemplate>,
    /**
     * This object contains information about a [composite template][composite], which you can use to to apply multiple templates to a single envelope, combine templates with PDF forms, and combine templates with documents from cloud sources.
     *  
     *  [composite]: https://developers.docusign.com/esign-rest-api/guides/features/templates#composite-templates
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pdfMetaDataTemplateSequence"
    )]
    pub pdf_meta_data_template_sequence: String,
    /**
     * This object contains information about a [composite template][composite], which you can use to to apply multiple templates to a single envelope, combine templates with PDF forms, and combine templates with documents from cloud sources.
     *  
     *  [composite]: https://developers.docusign.com/esign-rest-api/guides/features/templates#composite-templates
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "serverTemplates"
    )]
    pub server_templates: Vec<ServerTemplate>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConditionalRecipientRule {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub conditions: Vec<ConditionalRecipientRuleCondition>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientGroup"
    )]
    pub recipient_group: Option<RecipientGroup>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConditionalRecipientRuleCondition {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub filters: Vec<ConditionalRecipientRuleFilter>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientLabel"
    )]
    pub recipient_label: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConditionalRecipientRuleFilter {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub operator: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub scope: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

/// This object contains the results of a ConnectConfigurations::GET method.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConnectConfigResults {
    /**
     * This object contains the results of a ConnectConfigurations::GET method.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub configurations: Vec<ConnectCustomConfiguration>,
    /**
     * This object contains the results of a ConnectConfigurations::GET method.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalRecords"
    )]
    pub total_records: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConnectCustomConfiguration {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allUsers"
    )]
    pub all_users: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowEnvelopePublish"
    )]
    pub allow_envelope_publish: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSalesforcePublish"
    )]
    pub allow_salesforce_publish: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "configurationType"
    )]
    pub configuration_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "connectId"
    )]
    pub connect_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableLog"
    )]
    pub enable_log: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeEvents"
    )]
    pub envelope_events: Vec<String>,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventData")]
    pub event_data: Option<ConnectEventData>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalFolderId"
    )]
    pub external_folder_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalFolderLabel"
    )]
    pub external_folder_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeCertSoapHeader"
    )]
    pub include_cert_soap_header: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeCertificateOfCompletion"
    )]
    pub include_certificate_of_completion: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeDocumentFields"
    )]
    pub include_document_fields: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeDocuments"
    )]
    pub include_documents: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeEnvelopeVoidReason"
    )]
    pub include_envelope_void_reason: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeHMAC"
    )]
    pub include_hmac: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeSenderAccountasCustomField"
    )]
    pub include_sender_accountas_custom_field: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeTimeZoneInformation"
    )]
    pub include_time_zone_information: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientEvents"
    )]
    pub recipient_events: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireMutualTls"
    )]
    pub require_mutual_tls: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requiresAcknowledgement"
    )]
    pub requires_acknowledgement: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "salesforceApiVersion"
    )]
    pub salesforce_api_version: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "salesforceAuthcode"
    )]
    pub salesforce_authcode: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "salesforceCallBackUrl"
    )]
    pub salesforce_call_back_url: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "salesforceDocumentsAsContentFiles"
    )]
    pub salesforce_documents_as_content_files: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderOverride"
    )]
    pub sender_override: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "senderSelectableItems"
    )]
    pub sender_selectable_items: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "sfObjects"
    )]
    pub sf_objects: Vec<ConnectSalesforceObject>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signMessageWithX509Certificate"
    )]
    pub sign_message_with_x509_certificate: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "soapNamespace"
    )]
    pub soap_namespace: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "urlToPublishTo"
    )]
    pub url_to_publish_to: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useSoapInterface"
    )]
    pub use_soap_interface: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "userIds"
    )]
    pub user_ids: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userName"
    )]
    pub user_name: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConnectDebugLog {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "connectConfig"
    )]
    pub connect_config: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "eventDateTime"
    )]
    pub event_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "eventDescription"
    )]
    pub event_description: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub payload: String,
}

/// This object lets you choose the data format of your Connect response.
/// For  more information about using this object, see [Connect webhooks with JSON notifications](https://www.docusign.com/blog/developers/connect-webhooks-json-notifications).
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConnectEventData {
    /**
     * This object lets you choose the data format of your Connect response.
     *  For  more information about using this object, see [Connect webhooks with JSON notifications](https://www.docusign.com/blog/developers/connect-webhooks-json-notifications).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub format: String,
    /**
     * This object lets you choose the data format of your Connect response.
     *  For  more information about using this object, see [Connect webhooks with JSON notifications](https://www.docusign.com/blog/developers/connect-webhooks-json-notifications).
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "includeData"
    )]
    pub include_data: Vec<String>,
    /**
     * This object lets you choose the data format of your Connect response.
     *  For  more information about using this object, see [Connect webhooks with JSON notifications](https://www.docusign.com/blog/developers/connect-webhooks-json-notifications).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub version: String,
}

/// A list of failed envelope IDs to retry.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConnectFailureFilter {
    /**
     * A list of failed envelope IDs to retry.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeIds"
    )]
    pub envelope_ids: Vec<String>,
    /**
     * A list of failed envelope IDs to retry.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub synchronous: String,
}

/// This object contains details about a Connect failure result.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConnectFailureResult {
    /**
     * This object contains details about a Connect failure result.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "configId"
    )]
    pub config_id: String,
    /**
     * This object contains details about a Connect failure result.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "configUrl"
    )]
    pub config_url: String,
    /**
     * This object contains details about a Connect failure result.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     * This object contains details about a Connect failure result.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * This object contains details about a Connect failure result.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusMessage"
    )]
    pub status_message: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConnectFailureResults {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "retryQueue"
    )]
    pub retry_queue: Vec<ConnectFailureResult>,
}

/// Contains information about a Connect log entry.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConnectLog {
    /**
     * Contains information about a Connect log entry.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountId"
    )]
    pub account_id: String,
    /**
     * Contains information about a Connect log entry.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "configUrl"
    )]
    pub config_url: String,
    /**
     * Contains information about a Connect log entry.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "connectDebugLog"
    )]
    pub connect_debug_log: Vec<ConnectDebugLog>,
    /**
     * Contains information about a Connect log entry.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "connectId"
    )]
    pub connect_id: String,
    /**
     * Contains information about a Connect log entry.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub created: String,
    /**
     * Contains information about a Connect log entry.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Contains information about a Connect log entry.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     * Contains information about a Connect log entry.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub error: String,
    /**
     * Contains information about a Connect log entry.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "failureId"
    )]
    pub failure_id: String,
    /**
     * Contains information about a Connect log entry.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "failureUri"
    )]
    pub failure_uri: String,
    /**
     * Contains information about a Connect log entry.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastTry"
    )]
    pub last_try: String,
    /**
     * Contains information about a Connect log entry.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "logId"
    )]
    pub log_id: String,
    /**
     * Contains information about a Connect log entry.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "logUri"
    )]
    pub log_uri: String,
    /**
     * Contains information about a Connect log entry.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "retryCount"
    )]
    pub retry_count: String,
    /**
     * Contains information about a Connect log entry.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "retryUri"
    )]
    pub retry_uri: String,
    /**
     * Contains information about a Connect log entry.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * Contains information about a Connect log entry.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub subject: String,
    /**
     * Contains information about a Connect log entry.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userName"
    )]
    pub user_name: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConnectLogs {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub failures: Vec<ConnectLog>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub logs: Vec<ConnectLog>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalRecords"
    )]
    pub total_records: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

/// This object is used to match a DocuSign field to a Salesforce field so that Docusign can send information to your Salesforce account.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConnectSalesforceField {
    /**
     * This object is used to match a DocuSign field to a Salesforce field so that Docusign can send information to your Salesforce account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "dsAttribute"
    )]
    pub ds_attribute: String,
    /**
     * This object is used to match a DocuSign field to a Salesforce field so that Docusign can send information to your Salesforce account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "dsLink"
    )]
    pub ds_link: String,
    /**
     * This object is used to match a DocuSign field to a Salesforce field so that Docusign can send information to your Salesforce account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "dsNode"
    )]
    pub ds_node: String,
    /**
     * This object is used to match a DocuSign field to a Salesforce field so that Docusign can send information to your Salesforce account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * This object is used to match a DocuSign field to a Salesforce field so that Docusign can send information to your Salesforce account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sfField"
    )]
    pub sf_field: String,
    /**
     * This object is used to match a DocuSign field to a Salesforce field so that Docusign can send information to your Salesforce account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sfFieldName"
    )]
    pub sf_field_name: String,
    /**
     * This object is used to match a DocuSign field to a Salesforce field so that Docusign can send information to your Salesforce account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sfFolder"
    )]
    pub sf_folder: String,
    /**
     * This object is used to match a DocuSign field to a Salesforce field so that Docusign can send information to your Salesforce account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sfLockedValue"
    )]
    pub sf_locked_value: String,
}

/// A `connectSalesforceObject` is an object that updates envelope and document status or recipient status in your Salesforce account.
///
/// When you install DocuSign Connect for Salesforce, the service automatically sets up two Connect objects: one that updates envelope status and documents and one that updates recipient status. You can also customize DocuSign Connect for Salesforce by associating DocuSign objects with Salesforce objects so that DocuSign Connect for Salesforce updates or inserts the information into the Salesforce object. For more information, see
/// [DocuSign for Salesforce - Adding Completed Documents to the Notes and Attachments](https://support.docusign.com/articles/DocuSign-for-Salesforce-Adding-Completed-Documents-to-the-Notes-and-Attachments-New).
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConnectSalesforceObject {
    /**
     * A `connectSalesforceObject` is an object that updates envelope and document status or recipient status in your Salesforce account.
     *  
     *  When you install DocuSign Connect for Salesforce, the service automatically sets up two Connect objects: one that updates envelope status and documents and one that updates recipient status. You can also customize DocuSign Connect for Salesforce by associating DocuSign objects with Salesforce objects so that DocuSign Connect for Salesforce updates or inserts the information into the Salesforce object. For more information, see
     *  [DocuSign for Salesforce - Adding Completed Documents to the Notes and Attachments](https://support.docusign.com/articles/DocuSign-for-Salesforce-Adding-Completed-Documents-to-the-Notes-and-Attachments-New).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub active: String,
    /**
     * A `connectSalesforceObject` is an object that updates envelope and document status or recipient status in your Salesforce account.
     *  
     *  When you install DocuSign Connect for Salesforce, the service automatically sets up two Connect objects: one that updates envelope status and documents and one that updates recipient status. You can also customize DocuSign Connect for Salesforce by associating DocuSign objects with Salesforce objects so that DocuSign Connect for Salesforce updates or inserts the information into the Salesforce object. For more information, see
     *  [DocuSign for Salesforce - Adding Completed Documents to the Notes and Attachments](https://support.docusign.com/articles/DocuSign-for-Salesforce-Adding-Completed-Documents-to-the-Notes-and-Attachments-New).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * A `connectSalesforceObject` is an object that updates envelope and document status or recipient status in your Salesforce account.
     *  
     *  When you install DocuSign Connect for Salesforce, the service automatically sets up two Connect objects: one that updates envelope status and documents and one that updates recipient status. You can also customize DocuSign Connect for Salesforce by associating DocuSign objects with Salesforce objects so that DocuSign Connect for Salesforce updates or inserts the information into the Salesforce object. For more information, see
     *  [DocuSign for Salesforce - Adding Completed Documents to the Notes and Attachments](https://support.docusign.com/articles/DocuSign-for-Salesforce-Adding-Completed-Documents-to-the-Notes-and-Attachments-New).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * A `connectSalesforceObject` is an object that updates envelope and document status or recipient status in your Salesforce account.
     *  
     *  When you install DocuSign Connect for Salesforce, the service automatically sets up two Connect objects: one that updates envelope status and documents and one that updates recipient status. You can also customize DocuSign Connect for Salesforce by associating DocuSign objects with Salesforce objects so that DocuSign Connect for Salesforce updates or inserts the information into the Salesforce object. For more information, see
     *  [DocuSign for Salesforce - Adding Completed Documents to the Notes and Attachments](https://support.docusign.com/articles/DocuSign-for-Salesforce-Adding-Completed-Documents-to-the-Notes-and-Attachments-New).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub insert: String,
    /**
     * A `connectSalesforceObject` is an object that updates envelope and document status or recipient status in your Salesforce account.
     *  
     *  When you install DocuSign Connect for Salesforce, the service automatically sets up two Connect objects: one that updates envelope status and documents and one that updates recipient status. You can also customize DocuSign Connect for Salesforce by associating DocuSign objects with Salesforce objects so that DocuSign Connect for Salesforce updates or inserts the information into the Salesforce object. For more information, see
     *  [DocuSign for Salesforce - Adding Completed Documents to the Notes and Attachments](https://support.docusign.com/articles/DocuSign-for-Salesforce-Adding-Completed-Documents-to-the-Notes-and-Attachments-New).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "onCompleteOnly"
    )]
    pub on_complete_only: String,
    /**
     * A `connectSalesforceObject` is an object that updates envelope and document status or recipient status in your Salesforce account.
     *  
     *  When you install DocuSign Connect for Salesforce, the service automatically sets up two Connect objects: one that updates envelope status and documents and one that updates recipient status. You can also customize DocuSign Connect for Salesforce by associating DocuSign objects with Salesforce objects so that DocuSign Connect for Salesforce updates or inserts the information into the Salesforce object. For more information, see
     *  [DocuSign for Salesforce - Adding Completed Documents to the Notes and Attachments](https://support.docusign.com/articles/DocuSign-for-Salesforce-Adding-Completed-Documents-to-the-Notes-and-Attachments-New).
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "selectFields"
    )]
    pub select_fields: Vec<ConnectSalesforceField>,
    /**
     * A `connectSalesforceObject` is an object that updates envelope and document status or recipient status in your Salesforce account.
     *  
     *  When you install DocuSign Connect for Salesforce, the service automatically sets up two Connect objects: one that updates envelope status and documents and one that updates recipient status. You can also customize DocuSign Connect for Salesforce by associating DocuSign objects with Salesforce objects so that DocuSign Connect for Salesforce updates or inserts the information into the Salesforce object. For more information, see
     *  [DocuSign for Salesforce - Adding Completed Documents to the Notes and Attachments](https://support.docusign.com/articles/DocuSign-for-Salesforce-Adding-Completed-Documents-to-the-Notes-and-Attachments-New).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sfObject"
    )]
    pub sf_object: String,
    /**
     * A `connectSalesforceObject` is an object that updates envelope and document status or recipient status in your Salesforce account.
     *  
     *  When you install DocuSign Connect for Salesforce, the service automatically sets up two Connect objects: one that updates envelope status and documents and one that updates recipient status. You can also customize DocuSign Connect for Salesforce by associating DocuSign objects with Salesforce objects so that DocuSign Connect for Salesforce updates or inserts the information into the Salesforce object. For more information, see
     *  [DocuSign for Salesforce - Adding Completed Documents to the Notes and Attachments](https://support.docusign.com/articles/DocuSign-for-Salesforce-Adding-Completed-Documents-to-the-Notes-and-Attachments-New).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sfObjectName"
    )]
    pub sf_object_name: String,
    /**
     * A `connectSalesforceObject` is an object that updates envelope and document status or recipient status in your Salesforce account.
     *  
     *  When you install DocuSign Connect for Salesforce, the service automatically sets up two Connect objects: one that updates envelope status and documents and one that updates recipient status. You can also customize DocuSign Connect for Salesforce by associating DocuSign objects with Salesforce objects so that DocuSign Connect for Salesforce updates or inserts the information into the Salesforce object. For more information, see
     *  [DocuSign for Salesforce - Adding Completed Documents to the Notes and Attachments](https://support.docusign.com/articles/DocuSign-for-Salesforce-Adding-Completed-Documents-to-the-Notes-and-Attachments-New).
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "updateFields"
    )]
    pub update_fields: Vec<ConnectSalesforceField>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConnectUserObject {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub configurationtype: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "connectId"
    )]
    pub connect_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hasAccess"
    )]
    pub has_access: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "senderSearchableItems"
    )]
    pub sender_searchable_items: Vec<String>,
}

/// The request object for the EnvelopeViews::createConsole method.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConsoleViewRequest {
    /**
     * The request object for the EnvelopeViews::createConsole method.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     * The request object for the EnvelopeViews::createConsole method.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "returnUrl"
    )]
    pub return_url: String,
}

/// Details about consumer disclosures.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ConsumerDisclosure {
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountEsignId"
    )]
    pub account_esign_id: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowCDWithdraw"
    )]
    pub allow_cd_withdraw: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowCDWithdrawMetadata"
    )]
    pub allow_cd_withdraw_metadata: Option<SettingsMetadata>,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "changeEmail"
    )]
    pub change_email: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "changeEmailOther"
    )]
    pub change_email_other: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "companyName"
    )]
    pub company_name: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "companyPhone"
    )]
    pub company_phone: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "copyCostPerPage"
    )]
    pub copy_cost_per_page: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "copyFeeCollectionMethod"
    )]
    pub copy_fee_collection_method: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "copyRequestEmail"
    )]
    pub copy_request_email: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub custom: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableEsign"
    )]
    pub enable_esign: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "esignAgreement"
    )]
    pub esign_agreement: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "esignText"
    )]
    pub esign_text: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "languageCode"
    )]
    pub language_code: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mustAgreeToEsign"
    )]
    pub must_agree_to_esign: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pdfId"
    )]
    pub pdf_id: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useBrand"
    )]
    pub use_brand: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useConsumerDisclosureWithinAccount"
    )]
    pub use_consumer_disclosure_within_account: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useConsumerDisclosureWithinAccountMetadata"
    )]
    pub use_consumer_disclosure_within_account_metadata: Option<SettingsMetadata>,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawAddressLine1"
    )]
    pub withdraw_address_line_1: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawAddressLine2"
    )]
    pub withdraw_address_line_2: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawByEmail"
    )]
    pub withdraw_by_email: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawByMail"
    )]
    pub withdraw_by_mail: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawByPhone"
    )]
    pub withdraw_by_phone: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawCity"
    )]
    pub withdraw_city: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawConsequences"
    )]
    pub withdraw_consequences: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawEmail"
    )]
    pub withdraw_email: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawOther"
    )]
    pub withdraw_other: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawPhone"
    )]
    pub withdraw_phone: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawPostalCode"
    )]
    pub withdraw_postal_code: String,
    /**
     * Details about consumer disclosures.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawState"
    )]
    pub withdraw_state: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Contact {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "cloudProvider"
    )]
    pub cloud_provider: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "cloudProviderContainerId"
    )]
    pub cloud_provider_container_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "contactId"
    )]
    pub contact_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "contactPhoneNumbers"
    )]
    pub contact_phone_numbers: Vec<ContactPhoneNumber>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "contactUri"
    )]
    pub contact_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub emails: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "isOwner"
    )]
    pub is_owner: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub organization: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroup"
    )]
    pub signing_group: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupName"
    )]
    pub signing_group_name: String,
}

/// This response object contains information about the contacts associated with an account.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ContactGetResponse {
    /**
     * This response object contains information about the contacts associated with an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub contacts: Vec<Contact>,
    /**
     * This response object contains information about the contacts associated with an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     * This response object contains information about the contacts associated with an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     * This response object contains information about the contacts associated with an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     * This response object contains information about the contacts associated with an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     * This response object contains information about the contacts associated with an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     * This response object contains information about the contacts associated with an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

/// The request object containing the new information for the contacts.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ContactModRequest {
    /**
     * The request object containing the new information for the contacts.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "contactList"
    )]
    pub contact_list: Vec<Contact>,
}

/// Details about the phone numbers associated with a specific contact.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ContactPhoneNumber {
    /**
     * Details about the phone numbers associated with a specific contact.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "phoneNumber"
    )]
    pub phone_number: String,
    /**
     * Details about the phone numbers associated with a specific contact.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "phoneType"
    )]
    pub phone_type: String,
}

/// This response objects shows the updated details for the contacts.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ContactUpdateResponse {
    /**
     * This response objects shows the updated details for the contacts.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub contacts: Vec<Contact>,
}

/// The request body for the EnvelopeViews::createCorrect method.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CorrectViewRequest {
    /**
     * The request body for the EnvelopeViews::createCorrect method.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "returnUrl"
    )]
    pub return_url: String,
    /**
     * The request body for the EnvelopeViews::createCorrect method.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "suppressNavigation"
    )]
    pub suppress_navigation: String,
    /**
     * The request body for the EnvelopeViews::createCorrect method.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "viewUrl"
    )]
    pub view_url: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Country {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isoCode"
    )]
    pub iso_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "provinceValidated"
    )]
    pub province_validated: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub provinces: Vec<Province>,
}

/// This object contains information about a credit card that is associated with an account.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CreditCardInformation {
    /**
     * This object contains information about a credit card that is associated with an account.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<AddressInformation>,
    /**
     * This object contains information about a credit card that is associated with an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "cardNumber"
    )]
    pub card_number: String,
    /**
     * This object contains information about a credit card that is associated with an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "cardType"
    )]
    pub card_type: String,
    /**
     * This object contains information about a credit card that is associated with an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "cvNumber"
    )]
    pub cv_number: String,
    /**
     * This object contains information about a credit card that is associated with an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expirationMonth"
    )]
    pub expiration_month: String,
    /**
     * This object contains information about a credit card that is associated with an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expirationYear"
    )]
    pub expiration_year: String,
    /**
     * This object contains information about a credit card that is associated with an account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nameOnCard"
    )]
    pub name_on_card: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CreditCardTypes {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "cardTypes"
    )]
    pub card_types: Vec<String>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Currency {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "concealValueOnDocument"
    )]
    pub conceal_value_on_document: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "concealValueOnDocumentMetadata"
    )]
    pub conceal_value_on_document_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableAutoSize"
    )]
    pub disable_auto_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableAutoSizeMetadata"
    )]
    pub disable_auto_size_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxLength"
    )]
    pub max_length: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxLengthMetadata"
    )]
    pub max_length_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "numericalValue"
    )]
    pub numerical_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "originalValue"
    )]
    pub original_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "originalValueMetadata"
    )]
    pub original_value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireAll"
    )]
    pub require_all: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireAllMetadata"
    )]
    pub require_all_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireInitialOnSharedChange"
    )]
    pub require_initial_on_shared_change: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireInitialOnSharedChangeMetadata"
    )]
    pub require_initial_on_shared_change_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderRequired"
    )]
    pub sender_required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "senderRequiredMetadata"
    )]
    pub sender_required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharedMetadata"
    )]
    pub shared_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// Information about the price and currency associated with the feature set. Reserved for internal DocuSign use only.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CurrencyFeatureSetPrice {
    /**
     * Information about the price and currency associated with the feature set. Reserved for internal DocuSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currencyCode"
    )]
    pub currency_code: String,
    /**
     * Information about the price and currency associated with the feature set. Reserved for internal DocuSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currencySymbol"
    )]
    pub currency_symbol: String,
    /**
     * Information about the price and currency associated with the feature set. Reserved for internal DocuSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeFee"
    )]
    pub envelope_fee: String,
    /**
     * Information about the price and currency associated with the feature set. Reserved for internal DocuSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fixedFee"
    )]
    pub fixed_fee: String,
    /**
     * Information about the price and currency associated with the feature set. Reserved for internal DocuSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "seatFee"
    )]
    pub seat_fee: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CurrencyPlanPrice {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currencyCode"
    )]
    pub currency_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currencySymbol"
    )]
    pub currency_symbol: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "perSeatPrice"
    )]
    pub per_seat_price: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "supportIncidentFee"
    )]
    pub support_incident_fee: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "supportPlanFee"
    )]
    pub support_plan_fee: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supportedCardTypes"
    )]
    pub supported_card_types: Option<CreditCardTypes>,
}

/// This object provides details about a custom field.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CustomField {
    /**
     * This object provides details about a custom field.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customFieldType"
    )]
    pub custom_field_type: String,
    /**
     * This object provides details about a custom field.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * This object provides details about a custom field.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fieldId"
    )]
    pub field_id: String,
    /**
     * This object provides details about a custom field.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "listItems"
    )]
    pub list_items: Vec<String>,
    /**
     * This object provides details about a custom field.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * This object provides details about a custom field.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     * This object provides details about a custom field.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub show: String,
    /**
     * This object provides details about a custom field.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

/// Contains information about custom fields.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CustomFields {
    /**
     * Contains information about custom fields.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "listCustomFields"
    )]
    pub list_custom_fields: Vec<ListCustomField>,
    /**
     * Contains information about custom fields.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "textCustomFields"
    )]
    pub text_custom_fields: Vec<TextCustomField>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CustomFieldsEnvelope {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "listCustomFields"
    )]
    pub list_custom_fields: Vec<ListCustomField>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "textCustomFields"
    )]
    pub text_custom_fields: Vec<TextCustomField>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct CustomSettingsInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "customSettings"
    )]
    pub custom_settings: Vec<NameValue>,
}

/// A tab that allows the recipient to enter a date. Date tabs
/// are one-line fields that allow date information to be
/// entered in any format. The tooltip for this tab recommends
/// entering the date as MM/DD/YYYY, but this is not enforced.
/// The format entered by the signer is retained. If you need a
/// particular date format enforced, DocuSign recommends using a
/// Text tab with a validation pattern and a validation message
/// to enforce the format.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Date {
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "concealValueOnDocument"
    )]
    pub conceal_value_on_document: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "concealValueOnDocumentMetadata"
    )]
    pub conceal_value_on_document_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableAutoSize"
    )]
    pub disable_auto_size: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableAutoSizeMetadata"
    )]
    pub disable_auto_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxLength"
    )]
    pub max_length: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxLengthMetadata"
    )]
    pub max_length_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "originalValue"
    )]
    pub original_value: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "originalValueMetadata"
    )]
    pub original_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireAll"
    )]
    pub require_all: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireAllMetadata"
    )]
    pub require_all_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireInitialOnSharedChange"
    )]
    pub require_initial_on_shared_change: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireInitialOnSharedChangeMetadata"
    )]
    pub require_initial_on_shared_change_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderRequired"
    )]
    pub sender_required: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "senderRequiredMetadata"
    )]
    pub sender_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharedMetadata"
    )]
    pub shared_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationMessage"
    )]
    pub validation_message: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationMessageMetadata"
    )]
    pub validation_message_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationPattern"
    )]
    pub validation_pattern: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationPatternMetadata"
    )]
    pub validation_pattern_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that allows the recipient to enter a date. Date tabs
     *  are one-line fields that allow date information to be
     *  entered in any format. The tooltip for this tab recommends
     *  entering the date as MM/DD/YYYY, but this is not enforced.
     *  The format entered by the signer is retained. If you need a
     *  particular date format enforced, DocuSign recommends using a
     *  Text tab with a validation pattern and a validation message
     *  to enforce the format.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// A tab that displays the date that the recipient signed the
/// document.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DateSigned {
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that displays the date that the recipient signed the
     *  document.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area. The stamp is superimposed on top of this central area.
///
/// This property contains the following information about the central rectangle:
///
/// - `DateAreaX`: The X axis position of the top-left corner.
/// - `DateAreaY`: The Y axis position of the top-left corner.
/// - `DateAreaWidth`: The width of the rectangle.
/// - `DateAreaHeight`: The height of the rectangle.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DateStampProperties {
    /**
     * Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area. The stamp is superimposed on top of this central area.
     *  
     *  This property contains the following information about the central rectangle:
     *  
     *  - `DateAreaX`: The X axis position of the top-left corner.
     *  - `DateAreaY`: The Y axis position of the top-left corner.
     *  - `DateAreaWidth`: The width of the rectangle.
     *  - `DateAreaHeight`: The height of the rectangle.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "dateAreaHeight"
    )]
    pub date_area_height: Option<chrono::NaiveDate>,
    /**
     * Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area. The stamp is superimposed on top of this central area.
     *  
     *  This property contains the following information about the central rectangle:
     *  
     *  - `DateAreaX`: The X axis position of the top-left corner.
     *  - `DateAreaY`: The Y axis position of the top-left corner.
     *  - `DateAreaWidth`: The width of the rectangle.
     *  - `DateAreaHeight`: The height of the rectangle.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "dateAreaWidth"
    )]
    pub date_area_width: Option<chrono::NaiveDate>,
    /**
     * Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area. The stamp is superimposed on top of this central area.
     *  
     *  This property contains the following information about the central rectangle:
     *  
     *  - `DateAreaX`: The X axis position of the top-left corner.
     *  - `DateAreaY`: The Y axis position of the top-left corner.
     *  - `DateAreaWidth`: The width of the rectangle.
     *  - `DateAreaHeight`: The height of the rectangle.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "dateAreaX"
    )]
    pub date_area_x: Option<chrono::NaiveDate>,
    /**
     * Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area. The stamp is superimposed on top of this central area.
     *  
     *  This property contains the following information about the central rectangle:
     *  
     *  - `DateAreaX`: The X axis position of the top-left corner.
     *  - `DateAreaY`: The Y axis position of the top-left corner.
     *  - `DateAreaWidth`: The width of the rectangle.
     *  - `DateAreaHeight`: The height of the rectangle.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "dateAreaY"
    )]
    pub date_area_y: Option<chrono::NaiveDate>,
}

/// A tab that allows the recipient the option of declining an
/// envelope. If the recipient clicks the tab during the signing
/// process, the envelope is voided.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Decline {
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "buttonText"
    )]
    pub button_text: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "buttonTextMetadata"
    )]
    pub button_text_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declineReason"
    )]
    pub decline_reason: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "declineReasonMetadata"
    )]
    pub decline_reason_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that allows the recipient the option of declining an
     *  envelope. If the recipient clicks the tab during the signing
     *  process, the envelope is voided.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DiagnosticsSettingsInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "apiRequestLogMaxEntries"
    )]
    pub api_request_log_max_entries: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "apiRequestLogRemainingEntries"
    )]
    pub api_request_log_remaining_entries: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "apiRequestLogging"
    )]
    pub api_request_logging: String,
}

/// Contains information about a bank that processes a customer's direct debit payments.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DirectDebitProcessorInformation {
    /**
     * Contains information about a bank that processes a customer's direct debit payments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bankBranchCode"
    )]
    pub bank_branch_code: String,
    /**
     * Contains information about a bank that processes a customer's direct debit payments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bankCheckDigit"
    )]
    pub bank_check_digit: String,
    /**
     * Contains information about a bank that processes a customer's direct debit payments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bankCode"
    )]
    pub bank_code: String,
    /**
     * Contains information about a bank that processes a customer's direct debit payments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bankName"
    )]
    pub bank_name: String,
    /**
     * Contains information about a bank that processes a customer's direct debit payments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bankTransferAccountName"
    )]
    pub bank_transfer_account_name: String,
    /**
     * Contains information about a bank that processes a customer's direct debit payments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bankTransferAccountNumber"
    )]
    pub bank_transfer_account_number: String,
    /**
     * Contains information about a bank that processes a customer's direct debit payments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bankTransferType"
    )]
    pub bank_transfer_type: String,
    /**
     * Contains information about a bank that processes a customer's direct debit payments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub country: String,
    /**
     * Contains information about a bank that processes a customer's direct debit payments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Contains information about a bank that processes a customer's direct debit payments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "firstName"
    )]
    pub first_name: String,
    /**
     * Contains information about a bank that processes a customer's direct debit payments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "iBAN"
    )]
    pub i_ban: String,
    /**
     * Contains information about a bank that processes a customer's direct debit payments.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastName"
    )]
    pub last_name: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DisplayApplianceAccount {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountId"
    )]
    pub account_id: String,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "optOutAutoNavTextAndTabColorUpdates"
    )]
    pub opt_out_auto_nav_text_and_tab_color_updates: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "showInitialConditionalFields"
    )]
    pub show_initial_conditional_fields: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingVersion"
    )]
    pub signing_version: String,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "tagHasSigBlock"
    )]
    pub tag_has_sig_block: bool,
}

/// Complex type containing:
///
/// * dateOfBirth
/// * displayLevelCode
/// * receiveInResponse
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DobInformationInput {
    /**
     * Complex type containing:
     *  
     *  \* dateOfBirth
     *  \* displayLevelCode
     *  \* receiveInResponse
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "dateOfBirth"
    )]
    pub date_of_birth: Option<chrono::NaiveDate>,
    /**
     * Complex type containing:
     *  
     *  \* dateOfBirth
     *  \* displayLevelCode
     *  \* receiveInResponse
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayLevelCode"
    )]
    pub display_level_code: String,
    /**
     * Complex type containing:
     *  
     *  \* dateOfBirth
     *  \* displayLevelCode
     *  \* receiveInResponse
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "receiveInResponse"
    )]
    pub receive_in_response: String,
}

/// A document object.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Document {
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "applyAnchorTabs"
    )]
    pub apply_anchor_tabs: String,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "assignTabsToRecipientId"
    )]
    pub assign_tabs_to_recipient_id: String,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display: String,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentBase64"
    )]
    pub document_base_64: String,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentFields"
    )]
    pub document_fields: Vec<NameValue>,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "encryptedWithKeyManager"
    )]
    pub encrypted_with_key_manager: String,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fileExtension"
    )]
    pub file_extension: String,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fileFormatHint"
    )]
    pub file_format_hint: String,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "htmlDefinition"
    )]
    pub html_definition: Option<DocumentHtmlDefinition>,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeInDownload"
    )]
    pub include_in_download: String,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "matchBoxes"
    )]
    pub match_boxes: Vec<MatchBox>,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub order: String,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub pages: String,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pdfFormFieldOption"
    )]
    pub pdf_form_field_option: String,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "remoteUrl"
    )]
    pub remote_url: String,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerMustAcknowledge"
    )]
    pub signer_must_acknowledge: String,
    /**
     * A document object.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "signerMustAcknowledgeUseAccountDefault"
    )]
    pub signer_must_acknowledge_use_account_default: bool,
    /**
     * A document object.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tabs: Option<EnvelopeRecipientTabs>,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "transformPdfFields"
    )]
    pub transform_pdf_fields: String,
    /**
     * A document object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uri: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DocumentFieldsInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentFields"
    )]
    pub document_fields: Vec<NameValue>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DocumentHtmlCollapsibleDisplaySettings {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "arrowClosed"
    )]
    pub arrow_closed: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "arrowColor"
    )]
    pub arrow_color: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "arrowLocation"
    )]
    pub arrow_location: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "arrowOpen"
    )]
    pub arrow_open: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "arrowSize"
    )]
    pub arrow_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "arrowStyle"
    )]
    pub arrow_style: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "containerStyle"
    )]
    pub container_style: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "labelStyle"
    )]
    pub label_style: String,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "onlyArrowIsClickable"
    )]
    pub only_arrow_is_clickable: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "outerLabelAndArrowStyle"
    )]
    pub outer_label_and_arrow_style: String,
}

/// Holds the properties that define how to generate the responsive-formatted HTML for the document.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DocumentHtmlDefinition {
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayAnchorPrefix"
    )]
    pub display_anchor_prefix: String,
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "displayAnchors"
    )]
    pub display_anchors: Vec<DocumentHtmlDisplayAnchor>,
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayOrder"
    )]
    pub display_order: String,
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayPageNumber"
    )]
    pub display_page_number: String,
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentGuid"
    )]
    pub document_guid: String,
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "headerLabel"
    )]
    pub header_label: String,
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxScreenWidth"
    )]
    pub max_screen_width: String,
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "removeEmptyTags"
    )]
    pub remove_empty_tags: String,
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "showMobileOptimizedToggle"
    )]
    pub show_mobile_optimized_toggle: String,
    /**
     * Holds the properties that define how to generate the responsive-formatted HTML for the document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub source: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DocumentHtmlDefinitionOriginal {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentIdGuid"
    )]
    pub document_id_guid: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "htmlDefinition"
    )]
    pub html_definition: Option<DocumentHtmlDefinition>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DocumentHtmlDefinitionOriginals {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "htmlDefinitions"
    )]
    pub html_definitions: Vec<DocumentHtmlDefinitionOriginal>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DocumentHtmlDefinitions {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "htmlDefinitions"
    )]
    pub html_definitions: Vec<String>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DocumentHtmlDisplayAnchor {
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "caseSensitive"
    )]
    pub case_sensitive: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displaySettings"
    )]
    pub display_settings: Option<DocumentHtmlDisplaySettings>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endAnchor"
    )]
    pub end_anchor: String,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "removeEndAnchor"
    )]
    pub remove_end_anchor: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "removeStartAnchor"
    )]
    pub remove_start_anchor: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startAnchor"
    )]
    pub start_anchor: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DocumentHtmlDisplaySettings {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "cellStyle"
    )]
    pub cell_style: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "collapsibleSettings"
    )]
    pub collapsible_settings: Option<DocumentHtmlCollapsibleDisplaySettings>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayLabel"
    )]
    pub display_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "displayOrder"
    )]
    pub display_order: i64,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "displayPageNumber"
    )]
    pub display_page_number: i64,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "hideLabelWhenOpened"
    )]
    pub hide_label_when_opened: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "inlineOuterStyle"
    )]
    pub inline_outer_style: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "labelWhenOpened"
    )]
    pub label_when_opened: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "preLabel"
    )]
    pub pre_label: String,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "scrollToTopWhenOpened"
    )]
    pub scroll_to_top_when_opened: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tableStyle"
    )]
    pub table_style: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DocumentTemplate {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentEndPage"
    )]
    pub document_end_page: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentStartPage"
    )]
    pub document_start_page: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateId"
    )]
    pub template_id: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DocumentTemplateList {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentTemplates"
    )]
    pub document_templates: Vec<DocumentTemplate>,
}

/// This object configures a recipient's read/write access to a document.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DocumentVisibility {
    /**
     * This object configures a recipient's read/write access to a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * This object configures a recipient's read/write access to a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * This object configures a recipient's read/write access to a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * This object configures a recipient's read/write access to a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub rights: String,
    /**
     * This object configures a recipient's read/write access to a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub visible: String,
}

/// A list of `documentVisibility` objects that specify whether documents are visible to recipients.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DocumentVisibilityList {
    /**
     * A list of `documentVisibility` objects that specify whether documents are visible to recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentVisibility"
    )]
    pub document_visibility: Vec<DocumentVisibility>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DowngradRequestBillingInfoResponse {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "downgradePlanInformation"
    )]
    pub downgrade_plan_information: Option<DowngradePlanUpdateResponse>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentMethod"
    )]
    pub payment_method: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DowngradeBillingPlanInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "downgradeEventType"
    )]
    pub downgrade_event_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "planInformation"
    )]
    pub plan_information: Option<PlanInformation>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct DowngradePlanUpdateResponse {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountPaymentMethod"
    )]
    pub account_payment_method: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "downgradeEffectiveDate"
    )]
    pub downgrade_effective_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "downgradePaymentCycle"
    )]
    pub downgrade_payment_cycle: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "downgradePlanId"
    )]
    pub downgrade_plan_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "downgradePlanName"
    )]
    pub downgrade_plan_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "downgradeRequestStatus"
    )]
    pub downgrade_request_status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub message: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Draw {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSignerUpload"
    )]
    pub allow_signer_upload: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharedMetadata"
    )]
    pub shared_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useBackgroundAsCanvas"
    )]
    pub use_background_as_canvas: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// This object contains information used to configure [eNote](https://www.docusign.com/products/enote) functionality. To use eNote, the Allow eNote for eOriginal account plan item must be on, and the Connect configuration for eOriginal must be set correctly.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ENoteConfiguration {
    /**
     * This object contains information used to configure [eNote](https://www.docusign.com/products/enote) functionality. To use eNote, the Allow eNote for eOriginal account plan item must be on, and the Connect configuration for eOriginal must be set correctly.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "apiKey"
    )]
    pub api_key: String,
    /**
     * This object contains information used to configure [eNote](https://www.docusign.com/products/enote) functionality. To use eNote, the Allow eNote for eOriginal account plan item must be on, and the Connect configuration for eOriginal must be set correctly.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "connectConfigured"
    )]
    pub connect_configured: String,
    /**
     * This object contains information used to configure [eNote](https://www.docusign.com/products/enote) functionality. To use eNote, the Allow eNote for eOriginal account plan item must be on, and the Connect configuration for eOriginal must be set correctly.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "eNoteConfigured"
    )]
    pub e_note_configured: String,
    /**
     * This object contains information used to configure [eNote](https://www.docusign.com/products/enote) functionality. To use eNote, the Allow eNote for eOriginal account plan item must be on, and the Connect configuration for eOriginal must be set correctly.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub organization: String,
    /**
     * This object contains information used to configure [eNote](https://www.docusign.com/products/enote) functionality. To use eNote, the Allow eNote for eOriginal account plan item must be on, and the Connect configuration for eOriginal must be set correctly.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * This object contains information used to configure [eNote](https://www.docusign.com/products/enote) functionality. To use eNote, the Allow eNote for eOriginal account plan item must be on, and the Connect configuration for eOriginal must be set correctly.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userName"
    )]
    pub user_name: String,
}

/// A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Editor {
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCode"
    )]
    pub access_code: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessCodeMetadata"
    )]
    pub access_code_metadata: Option<PropertyMetadata>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "addAccessCodeToEmail"
    )]
    pub add_access_code_to_email: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "additionalNotifications"
    )]
    pub additional_notifications: Vec<RecipientAdditionalNotification>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSystemOverrideForLockedRecipient"
    )]
    pub allow_system_override_for_locked_recipient: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "clientUserId"
    )]
    pub client_user_id: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "completedCount"
    )]
    pub completed_count: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "customFields"
    )]
    pub custom_fields: Vec<String>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedDateTime"
    )]
    pub declined_date_time: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedReason"
    )]
    pub declined_reason: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveredDateTime"
    )]
    pub delivered_date_time: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveryMethod"
    )]
    pub delivery_method: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryMethodMetadata"
    )]
    pub delivery_method_metadata: Option<PropertyMetadata>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorId"
    )]
    pub designator_id: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorIdGuid"
    )]
    pub designator_id_guid: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentVisibility"
    )]
    pub document_visibility: Vec<DocumentVisibility>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailMetadata"
    )]
    pub email_metadata: Option<PropertyMetadata>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailNotification"
    )]
    pub email_notification: Option<RecipientEmailNotification>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "embeddedRecipientStartURL"
    )]
    pub embedded_recipient_start_url: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "faxNumber"
    )]
    pub fax_number: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "faxNumberMetadata"
    )]
    pub fax_number_metadata: Option<PropertyMetadata>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "firstName"
    )]
    pub first_name: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "firstNameMetadata"
    )]
    pub first_name_metadata: Option<PropertyMetadata>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fullName"
    )]
    pub full_name: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fullNameMetadata"
    )]
    pub full_name_metadata: Option<PropertyMetadata>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idCheckConfigurationName"
    )]
    pub id_check_configuration_name: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckConfigurationNameMetadata"
    )]
    pub id_check_configuration_name_metadata: Option<PropertyMetadata>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckInformationInput"
    )]
    pub id_check_information_input: Option<IdCheckInformationInput>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityVerification"
    )]
    pub identity_verification: Option<RecipientIdentityVerification>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "inheritEmailNotificationConfiguration"
    )]
    pub inherit_email_notification_configuration: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastName"
    )]
    pub last_name: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastNameMetadata"
    )]
    pub last_name_metadata: Option<PropertyMetadata>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientPhoneAuthEditable"
    )]
    pub locked_recipient_phone_auth_editable: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientSmsEditable"
    )]
    pub locked_recipient_sms_editable: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub note: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteMetadata"
    )]
    pub note_metadata: Option<PropertyMetadata>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phoneAuthentication"
    )]
    pub phone_authentication: Option<RecipientPhoneAuthentication>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientAttachments"
    )]
    pub recipient_attachments: Vec<RecipientAttachment>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientAuthenticationStatus"
    )]
    pub recipient_authentication_status: Option<AuthenticationStatus>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientFeatureMetadata"
    )]
    pub recipient_feature_metadata: Vec<FeatureAvailableMetadata>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientType"
    )]
    pub recipient_type: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientTypeMetadata"
    )]
    pub recipient_type_metadata: Option<PropertyMetadata>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireIdLookup"
    )]
    pub require_id_lookup: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireIdLookupMetadata"
    )]
    pub require_id_lookup_metadata: Option<PropertyMetadata>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "roleName"
    )]
    pub role_name: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "routingOrder"
    )]
    pub routing_order: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routingOrderMetadata"
    )]
    pub routing_order_metadata: Option<PropertyMetadata>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentDateTime"
    )]
    pub sent_date_time: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signedDateTime"
    )]
    pub signed_date_time: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupId"
    )]
    pub signing_group_id: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingGroupIdMetadata"
    )]
    pub signing_group_id_metadata: Option<PropertyMetadata>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupName"
    )]
    pub signing_group_name: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signingGroupUsers"
    )]
    pub signing_group_users: Vec<UserInfo>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smsAuthentication"
    )]
    pub sms_authentication: Option<RecipientSmsAuthentication>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "socialAuthentications"
    )]
    pub social_authentications: Vec<SocialAuthentication>,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusCode"
    )]
    pub status_code: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "suppressEmails"
    )]
    pub suppress_emails: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalTabCount"
    )]
    pub total_tab_count: String,
    /**
     * A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
}

/// A tab that allows the recipient to enter an email address.
/// This is a one-line field that checks that a valid email
/// address is entered. It uses the same parameters as a Text
/// tab, with the validation message and pattern set for email
/// information.
///
/// When getting information that includes
/// this tab type, the original value of the tab when the
/// associated envelope was sent is included in the response.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Email {
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "concealValueOnDocument"
    )]
    pub conceal_value_on_document: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "concealValueOnDocumentMetadata"
    )]
    pub conceal_value_on_document_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableAutoSize"
    )]
    pub disable_auto_size: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableAutoSizeMetadata"
    )]
    pub disable_auto_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxLength"
    )]
    pub max_length: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxLengthMetadata"
    )]
    pub max_length_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "originalValue"
    )]
    pub original_value: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "originalValueMetadata"
    )]
    pub original_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireAll"
    )]
    pub require_all: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireAllMetadata"
    )]
    pub require_all_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireInitialOnSharedChange"
    )]
    pub require_initial_on_shared_change: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireInitialOnSharedChangeMetadata"
    )]
    pub require_initial_on_shared_change_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderRequired"
    )]
    pub sender_required: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "senderRequiredMetadata"
    )]
    pub sender_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharedMetadata"
    )]
    pub shared_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationMessage"
    )]
    pub validation_message: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationMessageMetadata"
    )]
    pub validation_message_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationPattern"
    )]
    pub validation_pattern: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationPatternMetadata"
    )]
    pub validation_pattern_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that allows the recipient to enter an email address.
     *  This is a one-line field that checks that a valid email
     *  address is entered. It uses the same parameters as a Text
     *  tab, with the validation message and pattern set for email
     *  information.
     *  
     *  When getting information that includes
     *  this tab type, the original value of the tab when the
     *  associated envelope was sent is included in the response.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// A tab that displays the recipient's email as entered in the
/// recipient information.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EmailAddress {
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that displays the recipient's email as entered in the
     *  recipient information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// A complex element that allows  the sender to override some envelope email setting information. This can be used to override the Reply To email address and name associated with the envelope and to override the BCC email addresses to which an envelope is sent.
///
/// When the emailSettings information is used for an envelope, it only applies to that envelope.
///
/// **IMPORTANT**: The emailSettings information is not returned in the GET for envelope status. Use GET /email_settings to return information about the emailSettings.
///
/// EmailSettings consists of:
///
/// * replyEmailAddressOverride - The Reply To email used for the envelope. DocuSign will verify that a correct email format is used, but does not verify that the email is active. Maximum Length: 100 characters.
/// * replyEmailNameOverride - The name associated with the Reply To email address. Maximum Length: 100 characters.
/// * bccEmailAddresses - An array of up to five email addresses to which the envelope is sent to as a BCC email. Only users with canManageAccount setting set to true can use this option.
/// DocuSign verifies that the email format is correct, but does not verify that the email is active. Using this overrides the BCC for Email Archive information setting for this envelope. Maximum Length: 100 characters.
/// *Example*: if your account has BCC for Email Archive set up for the email address 'archive@mycompany.com' and you send an envelope using the BCC Email Override to send a BCC email to 'salesarchive@mycompany.com', then a copy of the envelope is only sent to the 'salesarchive@mycompany.com' email address.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EmailSettings {
    /**
     * A complex element that allows  the sender to override some envelope email setting information. This can be used to override the Reply To email address and name associated with the envelope and to override the BCC email addresses to which an envelope is sent.
     *  
     *  When the emailSettings information is used for an envelope, it only applies to that envelope.
     *  
     *  \*\*IMPORTANT\*\*: The emailSettings information is not returned in the GET for envelope status. Use GET /email_settings to return information about the emailSettings.
     *  
     *  EmailSettings consists of:
     *  
     *  \* replyEmailAddressOverride - The Reply To email used for the envelope. DocuSign will verify that a correct email format is used, but does not verify that the email is active. Maximum Length: 100 characters.
     *  \* replyEmailNameOverride - The name associated with the Reply To email address. Maximum Length: 100 characters.
     *  \* bccEmailAddresses - An array of up to five email addresses to which the envelope is sent to as a BCC email. Only users with canManageAccount setting set to true can use this option.
     *  DocuSign verifies that the email format is correct, but does not verify that the email is active. Using this overrides the BCC for Email Archive information setting for this envelope. Maximum Length: 100 characters.
     *  \*Example\*: if your account has BCC for Email Archive set up for the email address 'archive@mycompany.com' and you send an envelope using the BCC Email Override to send a BCC email to 'salesarchive@mycompany.com', then a copy of the envelope is only sent to the 'salesarchive@mycompany.com' email address.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "bccEmailAddresses"
    )]
    pub bcc_email_addresses: Vec<BccEmailAddress>,
    /**
     * A complex element that allows  the sender to override some envelope email setting information. This can be used to override the Reply To email address and name associated with the envelope and to override the BCC email addresses to which an envelope is sent.
     *  
     *  When the emailSettings information is used for an envelope, it only applies to that envelope.
     *  
     *  \*\*IMPORTANT\*\*: The emailSettings information is not returned in the GET for envelope status. Use GET /email_settings to return information about the emailSettings.
     *  
     *  EmailSettings consists of:
     *  
     *  \* replyEmailAddressOverride - The Reply To email used for the envelope. DocuSign will verify that a correct email format is used, but does not verify that the email is active. Maximum Length: 100 characters.
     *  \* replyEmailNameOverride - The name associated with the Reply To email address. Maximum Length: 100 characters.
     *  \* bccEmailAddresses - An array of up to five email addresses to which the envelope is sent to as a BCC email. Only users with canManageAccount setting set to true can use this option.
     *  DocuSign verifies that the email format is correct, but does not verify that the email is active. Using this overrides the BCC for Email Archive information setting for this envelope. Maximum Length: 100 characters.
     *  \*Example\*: if your account has BCC for Email Archive set up for the email address 'archive@mycompany.com' and you send an envelope using the BCC Email Override to send a BCC email to 'salesarchive@mycompany.com', then a copy of the envelope is only sent to the 'salesarchive@mycompany.com' email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "replyEmailAddressOverride"
    )]
    pub reply_email_address_override: String,
    /**
     * A complex element that allows  the sender to override some envelope email setting information. This can be used to override the Reply To email address and name associated with the envelope and to override the BCC email addresses to which an envelope is sent.
     *  
     *  When the emailSettings information is used for an envelope, it only applies to that envelope.
     *  
     *  \*\*IMPORTANT\*\*: The emailSettings information is not returned in the GET for envelope status. Use GET /email_settings to return information about the emailSettings.
     *  
     *  EmailSettings consists of:
     *  
     *  \* replyEmailAddressOverride - The Reply To email used for the envelope. DocuSign will verify that a correct email format is used, but does not verify that the email is active. Maximum Length: 100 characters.
     *  \* replyEmailNameOverride - The name associated with the Reply To email address. Maximum Length: 100 characters.
     *  \* bccEmailAddresses - An array of up to five email addresses to which the envelope is sent to as a BCC email. Only users with canManageAccount setting set to true can use this option.
     *  DocuSign verifies that the email format is correct, but does not verify that the email is active. Using this overrides the BCC for Email Archive information setting for this envelope. Maximum Length: 100 characters.
     *  \*Example\*: if your account has BCC for Email Archive set up for the email address 'archive@mycompany.com' and you send an envelope using the BCC Email Override to send a BCC email to 'salesarchive@mycompany.com', then a copy of the envelope is only sent to the 'salesarchive@mycompany.com' email address.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "replyEmailNameOverride"
    )]
    pub reply_email_name_override: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Envelope {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessControlListBase64"
    )]
    pub access_control_list_base_64: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowComments"
    )]
    pub allow_comments: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowMarkup"
    )]
    pub allow_markup: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowReassign"
    )]
    pub allow_reassign: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowViewHistory"
    )]
    pub allow_view_history: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anySigner"
    )]
    pub any_signer: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub asynchronous: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "attachmentsUri"
    )]
    pub attachments_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authoritativeCopy"
    )]
    pub authoritative_copy: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authoritativeCopyDefault"
    )]
    pub authoritative_copy_default: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "autoNavigation"
    )]
    pub auto_navigation: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "brandId"
    )]
    pub brand_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "brandLock"
    )]
    pub brand_lock: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "certificateUri"
    )]
    pub certificate_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "completedDateTime"
    )]
    pub completed_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "copyRecipientData"
    )]
    pub copy_recipient_data: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdDateTime"
    )]
    pub created_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customFields"
    )]
    pub custom_fields: Option<AccountCustomFields>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customFieldsUri"
    )]
    pub custom_fields_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedDateTime"
    )]
    pub declined_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deletedDateTime"
    )]
    pub deleted_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveredDateTime"
    )]
    pub delivered_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableResponsiveDocument"
    )]
    pub disable_responsive_document: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentsCombinedUri"
    )]
    pub documents_combined_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentsUri"
    )]
    pub documents_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailBlurb"
    )]
    pub email_blurb: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailSettings"
    )]
    pub email_settings: Option<EmailSettings>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailSubject"
    )]
    pub email_subject: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableWetSign"
    )]
    pub enable_wet_sign: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enforceSignerVisibility"
    )]
    pub enforce_signer_visibility: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeAttachments"
    )]
    pub envelope_attachments: Vec<Attachment>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeDocuments"
    )]
    pub envelope_documents: Vec<EnvelopeDocument>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeIdStamping"
    )]
    pub envelope_id_stamping: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeLocation"
    )]
    pub envelope_location: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "envelopeMetadata"
    )]
    pub envelope_metadata: Option<EnvelopeMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeUri"
    )]
    pub envelope_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expireAfter"
    )]
    pub expire_after: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expireDateTime"
    )]
    pub expire_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expireEnabled"
    )]
    pub expire_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalEnvelopeId"
    )]
    pub external_envelope_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub folders: Vec<Folder>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hasComments"
    )]
    pub has_comments: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hasFormDataChanged"
    )]
    pub has_form_data_changed: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hasWavFile"
    )]
    pub has_wav_file: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub holder: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initialSentDateTime"
    )]
    pub initial_sent_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "is21CFRPart11"
    )]
    pub is_21cfr_part_11: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDynamicEnvelope"
    )]
    pub is_dynamic_envelope: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isSignatureProviderEnvelope"
    )]
    pub is_signature_provider_envelope: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModifiedDateTime"
    )]
    pub last_modified_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockInformation"
    )]
    pub lock_information: Option<EnvelopeLocks>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "messageLock"
    )]
    pub message_lock: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notification: Option<Notification>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "notificationUri"
    )]
    pub notification_uri: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "powerForm")]
    pub power_form: Option<PowerForm>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "purgeCompletedDate"
    )]
    pub purge_completed_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "purgeRequestDate"
    )]
    pub purge_request_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "purgeState"
    )]
    pub purge_state: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recipients: Option<EnvelopeRecipients>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientsLock"
    )]
    pub recipients_lock: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientsUri"
    )]
    pub recipients_uri: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sender: Option<UserInfo>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentDateTime"
    )]
    pub sent_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerCanSignOnMobile"
    )]
    pub signer_can_sign_on_mobile: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingLocation"
    )]
    pub signing_location: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusChangedDateTime"
    )]
    pub status_changed_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusDateTime"
    )]
    pub status_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templatesUri"
    )]
    pub templates_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "transactionId"
    )]
    pub transaction_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useDisclosure"
    )]
    pub use_disclosure: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "voidedDateTime"
    )]
    pub voided_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "voidedReason"
    )]
    pub voided_reason: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workflow: Option<Workflow>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeAttachment {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessControl"
    )]
    pub access_control: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "attachmentId"
    )]
    pub attachment_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "attachmentType"
    )]
    pub attachment_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeAttachmentsRequest {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub attachments: Vec<Attachment>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeAttachmentsResult {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub attachments: Vec<EnvelopeAttachment>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeAuditEvent {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "eventFields"
    )]
    pub event_fields: Vec<NameValue>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeAuditEventResponse {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "auditEvents"
    )]
    pub audit_events: Vec<EnvelopeAuditEvent>,
}

/// Envelope object definition.
#[derive(Serialize, Default, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeDefinition {
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessControlListBase64"
    )]
    pub access_control_list_base_64: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub accessibility: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowComments"
    )]
    pub allow_comments: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowMarkup"
    )]
    pub allow_markup: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowReassign"
    )]
    pub allow_reassign: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowRecipientRecursion"
    )]
    pub allow_recipient_recursion: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowViewHistory"
    )]
    pub allow_view_history: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anySigner"
    )]
    pub any_signer: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub asynchronous: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub attachments: Vec<Attachment>,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "attachmentsUri"
    )]
    pub attachments_uri: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authoritativeCopy"
    )]
    pub authoritative_copy: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authoritativeCopyDefault"
    )]
    pub authoritative_copy_default: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "autoNavigation"
    )]
    pub auto_navigation: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "brandId"
    )]
    pub brand_id: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "brandLock"
    )]
    pub brand_lock: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "certificateUri"
    )]
    pub certificate_uri: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "completedDateTime"
    )]
    pub completed_date_time: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "compositeTemplates"
    )]
    pub composite_templates: Vec<CompositeTemplate>,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "copyRecipientData"
    )]
    pub copy_recipient_data: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdDateTime"
    )]
    pub created_date_time: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customFields"
    )]
    pub custom_fields: Option<AccountCustomFields>,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customFieldsUri"
    )]
    pub custom_fields_uri: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedDateTime"
    )]
    pub declined_date_time: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deletedDateTime"
    )]
    pub deleted_date_time: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveredDateTime"
    )]
    pub delivered_date_time: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableResponsiveDocument"
    )]
    pub disable_responsive_document: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub documents: Vec<Document>,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentsCombinedUri"
    )]
    pub documents_combined_uri: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentsUri"
    )]
    pub documents_uri: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailBlurb"
    )]
    pub email_blurb: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailSettings"
    )]
    pub email_settings: Option<EmailSettings>,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailSubject"
    )]
    pub email_subject: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableWetSign"
    )]
    pub enable_wet_sign: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enforceSignerVisibility"
    )]
    pub enforce_signer_visibility: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeAttachments"
    )]
    pub envelope_attachments: Vec<Attachment>,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeDocuments"
    )]
    pub envelope_documents: Vec<EnvelopeDocument>,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeIdStamping"
    )]
    pub envelope_id_stamping: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeLocation"
    )]
    pub envelope_location: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "envelopeMetadata"
    )]
    pub envelope_metadata: Option<EnvelopeMetadata>,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeUri"
    )]
    pub envelope_uri: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventNotification"
    )]
    pub event_notification: Option<EventNotification>,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expireAfter"
    )]
    pub expire_after: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expireDateTime"
    )]
    pub expire_date_time: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expireEnabled"
    )]
    pub expire_enabled: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalEnvelopeId"
    )]
    pub external_envelope_id: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub folders: Vec<Folder>,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hasComments"
    )]
    pub has_comments: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hasFormDataChanged"
    )]
    pub has_form_data_changed: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hasWavFile"
    )]
    pub has_wav_file: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub holder: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initialSentDateTime"
    )]
    pub initial_sent_date_time: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "is21CFRPart11"
    )]
    pub is_21cfr_part_11: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDynamicEnvelope"
    )]
    pub is_dynamic_envelope: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isSignatureProviderEnvelope"
    )]
    pub is_signature_provider_envelope: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModifiedDateTime"
    )]
    pub last_modified_date_time: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockInformation"
    )]
    pub lock_information: Option<EnvelopeLocks>,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "messageLock"
    )]
    pub message_lock: String,
    /**
     * Envelope object definition.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notification: Option<Notification>,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "notificationUri"
    )]
    pub notification_uri: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * Envelope object definition.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "powerForm")]
    pub power_form: Option<PowerForm>,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "purgeCompletedDate"
    )]
    pub purge_completed_date: Option<chrono::NaiveDate>,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "purgeRequestDate"
    )]
    pub purge_request_date: Option<chrono::NaiveDate>,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "purgeState"
    )]
    pub purge_state: String,
    /**
     * Envelope object definition.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recipients: Option<EnvelopeRecipients>,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientsLock"
    )]
    pub recipients_lock: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientsUri"
    )]
    pub recipients_uri: String,
    /**
     * Envelope object definition.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sender: Option<UserInfo>,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentDateTime"
    )]
    pub sent_date_time: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerCanSignOnMobile"
    )]
    pub signer_can_sign_on_mobile: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingLocation"
    )]
    pub signing_location: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusChangedDateTime"
    )]
    pub status_changed_date_time: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusDateTime"
    )]
    pub status_date_time: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateId"
    )]
    pub template_id: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "templateRoles"
    )]
    pub template_roles: Vec<TemplateRole>,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templatesUri"
    )]
    pub templates_uri: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "transactionId"
    )]
    pub transaction_id: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useDisclosure"
    )]
    pub use_disclosure: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "voidedDateTime"
    )]
    pub voided_date_time: String,
    /**
     * Envelope object definition.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "voidedReason"
    )]
    pub voided_reason: String,
    /**
     * Envelope object definition.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workflow: Option<Workflow>,
}

/// This object contains details about the envelope document.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeDocument {
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "addedRecipientIds"
    )]
    pub added_recipient_ids: Vec<String>,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "attachmentTabId"
    )]
    pub attachment_tab_id: String,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authoritativeCopy"
    )]
    pub authoritative_copy: String,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authoritativeCopyMetadata"
    )]
    pub authoritative_copy_metadata: Option<PropertyMetadata>,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "availableDocumentTypes"
    )]
    pub available_document_types: Vec<SignatureType>,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "containsPdfFormFields"
    )]
    pub contains_pdf_form_fields: String,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display: String,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayMetadata"
    )]
    pub display_metadata: Option<PropertyMetadata>,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentFields"
    )]
    pub document_fields: Vec<NameValue>,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentIdGuid"
    )]
    pub document_id_guid: String,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeInDownload"
    )]
    pub include_in_download: String,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includeInDownloadMetadata"
    )]
    pub include_in_download_metadata: Option<PropertyMetadata>,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub order: String,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub pages: Vec<Page>,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerMustAcknowledge"
    )]
    pub signer_must_acknowledge: String,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signerMustAcknowledgeMetadata"
    )]
    pub signer_must_acknowledge_metadata: Option<PropertyMetadata>,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sizeBytes"
    )]
    pub size_bytes: String,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
    /**
     * This object contains details about the envelope document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uri: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeDocumentsResult {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeDocuments"
    )]
    pub envelope_documents: Vec<EnvelopeDocument>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
}

/// For which envelope events should your webhook be called?
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeEvent {
    /**
     * For which envelope events should your webhook be called?
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeEventStatusCode"
    )]
    pub envelope_event_status_code: String,
    /**
     * For which envelope events should your webhook be called?
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeDocuments"
    )]
    pub include_documents: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeFormDataType {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailSubject"
    )]
    pub email_subject: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "formData"
    )]
    pub form_data: Vec<FormDataItem>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "prefillFormData"
    )]
    pub prefill_form_data: Vec<FormDataItem>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientFormData"
    )]
    pub recipient_form_data: Vec<RecipientFormData>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentDateTime"
    )]
    pub sent_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
}

/// A tab that displays the envelope ID. Recipients cannot enter
/// or change the information in this tab.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeId {
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that displays the envelope ID. Recipients cannot enter
     *  or change the information in this tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// Lists of envelope and transaction IDs to use in the results.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeIdsRequest {
    /**
     * Lists of envelope and transaction IDs to use in the results.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeIds"
    )]
    pub envelope_ids: Vec<String>,
    /**
     * Lists of envelope and transaction IDs to use in the results.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "transactionIds"
    )]
    pub transaction_ids: Vec<String>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeMetadata {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowAdvancedCorrect"
    )]
    pub allow_advanced_correct: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowCorrect"
    )]
    pub allow_correct: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSignWithNotary"
    )]
    pub enable_sign_with_notary: String,
}

/// A complex element that specifies the notification settings for the envelope.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeNotificationRequest {
    /**
     * A complex element that specifies the notification settings for the envelope.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expirations: Option<Expirations>,
    /**
     * A complex element that specifies the notification settings for the envelope.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reminders: Option<Reminders>,
    /**
     * A complex element that specifies the notification settings for the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useAccountDefaults"
    )]
    pub use_account_defaults: String,
}

/// Contains information about the current envelope purge configuration for an account, which enables account administrators to purge documents from completed and voided envelopes after a set number of days (`retentionDays`).
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopePurgeConfiguration {
    /**
     * Contains information about the current envelope purge configuration for an account, which enables account administrators to purge documents from completed and voided envelopes after a set number of days (`retentionDays`).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "purgeEnvelopes"
    )]
    pub purge_envelopes: String,
    /**
     * Contains information about the current envelope purge configuration for an account, which enables account administrators to purge documents from completed and voided envelopes after a set number of days (`retentionDays`).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "redactPII"
    )]
    pub redact_pii: String,
    /**
     * Contains information about the current envelope purge configuration for an account, which enables account administrators to purge documents from completed and voided envelopes after a set number of days (`retentionDays`).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "removeTabsAndEnvelopeAttachments"
    )]
    pub remove_tabs_and_envelope_attachments: String,
    /**
     * Contains information about the current envelope purge configuration for an account, which enables account administrators to purge documents from completed and voided envelopes after a set number of days (`retentionDays`).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "retentionDays"
    )]
    pub retention_days: String,
}

///  This object describes an envelope.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeSummary {
    /**
     *  This object describes an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bulkEnvelopeStatus"
    )]
    pub bulk_envelope_status: Option<BulkEnvelopeStatus>,
    /**
     *  This object describes an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     *  This object describes an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *  This object describes an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     *  This object describes an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusDateTime"
    )]
    pub status_date_time: String,
    /**
     *  This object describes an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uri: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeTemplate {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessControlListBase64"
    )]
    pub access_control_list_base_64: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowComments"
    )]
    pub allow_comments: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowMarkup"
    )]
    pub allow_markup: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowReassign"
    )]
    pub allow_reassign: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowViewHistory"
    )]
    pub allow_view_history: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anySigner"
    )]
    pub any_signer: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub asynchronous: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "attachmentsUri"
    )]
    pub attachments_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authoritativeCopy"
    )]
    pub authoritative_copy: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authoritativeCopyDefault"
    )]
    pub authoritative_copy_default: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "autoMatch"
    )]
    pub auto_match: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "autoMatchSpecifiedByUser"
    )]
    pub auto_match_specified_by_user: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "autoNavigation"
    )]
    pub auto_navigation: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "brandId"
    )]
    pub brand_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "brandLock"
    )]
    pub brand_lock: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "certificateUri"
    )]
    pub certificate_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "completedDateTime"
    )]
    pub completed_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "copyRecipientData"
    )]
    pub copy_recipient_data: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub created: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdDateTime"
    )]
    pub created_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customFields"
    )]
    pub custom_fields: Option<AccountCustomFields>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customFieldsUri"
    )]
    pub custom_fields_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedDateTime"
    )]
    pub declined_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deletedDateTime"
    )]
    pub deleted_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveredDateTime"
    )]
    pub delivered_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableResponsiveDocument"
    )]
    pub disable_responsive_document: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub documents: Vec<Document>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentsCombinedUri"
    )]
    pub documents_combined_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentsUri"
    )]
    pub documents_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailBlurb"
    )]
    pub email_blurb: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailSettings"
    )]
    pub email_settings: Option<EmailSettings>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailSubject"
    )]
    pub email_subject: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableWetSign"
    )]
    pub enable_wet_sign: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enforceSignerVisibility"
    )]
    pub enforce_signer_visibility: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeAttachments"
    )]
    pub envelope_attachments: Vec<Attachment>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeDocuments"
    )]
    pub envelope_documents: Vec<EnvelopeDocument>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeIdStamping"
    )]
    pub envelope_id_stamping: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeLocation"
    )]
    pub envelope_location: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "envelopeMetadata"
    )]
    pub envelope_metadata: Option<EnvelopeMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeUri"
    )]
    pub envelope_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expireAfter"
    )]
    pub expire_after: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expireDateTime"
    )]
    pub expire_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expireEnabled"
    )]
    pub expire_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalEnvelopeId"
    )]
    pub external_envelope_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "favoritedByMe"
    )]
    pub favorited_by_me: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "folderId"
    )]
    pub folder_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "folderIds"
    )]
    pub folder_ids: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "folderName"
    )]
    pub folder_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub folders: Vec<Folder>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hasComments"
    )]
    pub has_comments: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hasFormDataChanged"
    )]
    pub has_form_data_changed: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hasWavFile"
    )]
    pub has_wav_file: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub holder: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initialSentDateTime"
    )]
    pub initial_sent_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "is21CFRPart11"
    )]
    pub is_21cfr_part_11: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDynamicEnvelope"
    )]
    pub is_dynamic_envelope: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isSignatureProviderEnvelope"
    )]
    pub is_signature_provider_envelope: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModified"
    )]
    pub last_modified: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastModifiedBy"
    )]
    pub last_modified_by: Option<UserInfo>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModifiedDateTime"
    )]
    pub last_modified_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastUsed"
    )]
    pub last_used: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub location: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockInformation"
    )]
    pub lock_information: Option<EnvelopeLocks>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "messageLock"
    )]
    pub message_lock: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "newPassword"
    )]
    pub new_password: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notification: Option<Notification>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "notificationUri"
    )]
    pub notification_uri: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<UserInfo>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageCount"
    )]
    pub page_count: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordProtected"
    )]
    pub password_protected: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "powerForm")]
    pub power_form: Option<PowerForm>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "powerForms"
    )]
    pub power_forms: Vec<PowerForm>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "purgeCompletedDate"
    )]
    pub purge_completed_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "purgeRequestDate"
    )]
    pub purge_request_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "purgeState"
    )]
    pub purge_state: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recipients: Option<EnvelopeRecipients>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientsLock"
    )]
    pub recipients_lock: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientsUri"
    )]
    pub recipients_uri: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sender: Option<UserInfo>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentDateTime"
    )]
    pub sent_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerCanSignOnMobile"
    )]
    pub signer_can_sign_on_mobile: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingLocation"
    )]
    pub signing_location: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusChangedDateTime"
    )]
    pub status_changed_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusDateTime"
    )]
    pub status_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateId"
    )]
    pub template_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templatesUri"
    )]
    pub templates_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "transactionId"
    )]
    pub transaction_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useDisclosure"
    )]
    pub use_disclosure: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "voidedDateTime"
    )]
    pub voided_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "voidedReason"
    )]
    pub voided_reason: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workflow: Option<Workflow>,
}

/// Information about templates.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeTemplateResults {
    /**
     * Information about templates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     * Information about templates.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeTemplates"
    )]
    pub envelope_templates: Vec<EnvelopeTemplate>,
    /**
     * Information about templates.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub folders: Vec<Folder>,
    /**
     * Information about templates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     * Information about templates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     * Information about templates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     * Information about templates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     * Information about templates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeTransactionStatus {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "transactionId"
    )]
    pub transaction_id: String,
}

/// This object contains details about an envelope transfer rule.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeTransferRule {
    /**
     * This object contains details about an envelope transfer rule.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "carbonCopyOriginalOwner"
    )]
    pub carbon_copy_original_owner: String,
    /**
     * This object contains details about an envelope transfer rule.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub enabled: String,
    /**
     * This object contains details about an envelope transfer rule.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeTransferRuleId"
    )]
    pub envelope_transfer_rule_id: String,
    /**
     * This object contains details about an envelope transfer rule.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "eventType"
    )]
    pub event_type: String,
    /**
     * This object contains details about an envelope transfer rule.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromGroup")]
    pub from_group: Option<Group>,
    /**
     * This object contains details about an envelope transfer rule.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromUser")]
    pub from_user: Option<UserInformation>,
    /**
     * This object contains details about an envelope transfer rule.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "modifiedDate"
    )]
    pub modified_date: Option<chrono::NaiveDate>,
    /**
     * This object contains details about an envelope transfer rule.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "modifiedUser"
    )]
    pub modified_user: Option<UserInformation>,
    /**
     * This object contains details about an envelope transfer rule.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toFolder")]
    pub to_folder: Option<Folder>,
    /**
     * This object contains details about an envelope transfer rule.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toUser")]
    pub to_user: Option<UserInformation>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeTransferRuleInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeTransferRules"
    )]
    pub envelope_transfer_rules: Vec<EnvelopeTransferRule>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

/// This object contains details about the envelope transfer rule that you want to create.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeTransferRuleRequest {
    /**
     * This object contains details about the envelope transfer rule that you want to create.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "carbonCopyOriginalOwner"
    )]
    pub carbon_copy_original_owner: String,
    /**
     * This object contains details about the envelope transfer rule that you want to create.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub enabled: String,
    /**
     * This object contains details about the envelope transfer rule that you want to create.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeTransferRuleId"
    )]
    pub envelope_transfer_rule_id: String,
    /**
     * This object contains details about the envelope transfer rule that you want to create.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "eventType"
    )]
    pub event_type: String,
    /**
     * This object contains details about the envelope transfer rule that you want to create.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "fromGroups"
    )]
    pub from_groups: Vec<Group>,
    /**
     * This object contains details about the envelope transfer rule that you want to create.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "fromUsers"
    )]
    pub from_users: Vec<UserInformation>,
    /**
     * This object contains details about the envelope transfer rule that you want to create.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "modifiedDate"
    )]
    pub modified_date: Option<chrono::NaiveDate>,
    /**
     * This object contains details about the envelope transfer rule that you want to create.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "modifiedUser"
    )]
    pub modified_user: Option<UserInformation>,
    /**
     * This object contains details about the envelope transfer rule that you want to create.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toFolder")]
    pub to_folder: Option<Folder>,
    /**
     * This object contains details about the envelope transfer rule that you want to create.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toUser")]
    pub to_user: Option<UserInformation>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopeUpdateSummary {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bulkEnvelopeStatus"
    )]
    pub bulk_envelope_status: Option<BulkEnvelopeStatus>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "listCustomFieldUpdateResults"
    )]
    pub list_custom_field_update_results: Vec<ListCustomField>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockInformation"
    )]
    pub lock_information: Option<EnvelopeLocks>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "purgeState"
    )]
    pub purge_state: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientUpdateResults"
    )]
    pub recipient_update_results: Vec<RecipientUpdateResponse>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabUpdateResults"
    )]
    pub tab_update_results: Option<EnvelopeRecipientTabs>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "textCustomFieldUpdateResults"
    )]
    pub text_custom_field_update_results: Vec<TextCustomField>,
}

/// Result set for the Envelopes: listStatusChanges method
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EnvelopesInformation {
    /**
     * Result set for the Envelopes: listStatusChanges method
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "continuationToken"
    )]
    pub continuation_token: String,
    /**
     * Result set for the Envelopes: listStatusChanges method
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     * Result set for the Envelopes: listStatusChanges method
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeTransactionStatuses"
    )]
    pub envelope_transaction_statuses: Vec<EnvelopeTransactionStatus>,
    /**
     * Result set for the Envelopes: listStatusChanges method
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub envelopes: Vec<Envelope>,
    /**
     * Result set for the Envelopes: listStatusChanges method
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub folders: Vec<Folder>,
    /**
     * Result set for the Envelopes: listStatusChanges method
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastQueriedDateTime"
    )]
    pub last_queried_date_time: String,
    /**
     * Result set for the Envelopes: listStatusChanges method
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     * Result set for the Envelopes: listStatusChanges method
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     * Result set for the Envelopes: listStatusChanges method
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

/// This object describes errors that occur. It is only valid for responses and ignored in requests.
#[derive(Serialize, Default, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ErrorDetails {
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "errorCode"
    )]
    pub error_code: String,
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub message: String,
}

/// Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EventNotification {
    /**
     * Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeEvents"
    )]
    pub envelope_events: Vec<EnvelopeEvent>,
    /**
     * Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventData")]
    pub event_data: Option<ConnectEventData>,
    /**
     * Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeCertificateOfCompletion"
    )]
    pub include_certificate_of_completion: String,
    /**
     * Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeCertificateWithSoap"
    )]
    pub include_certificate_with_soap: String,
    /**
     * Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeDocumentFields"
    )]
    pub include_document_fields: String,
    /**
     * Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeDocuments"
    )]
    pub include_documents: String,
    /**
     * Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeEnvelopeVoidReason"
    )]
    pub include_envelope_void_reason: String,
    /**
     * Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeHMAC"
    )]
    pub include_hmac: String,
    /**
     * Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeSenderAccountAsCustomField"
    )]
    pub include_sender_account_as_custom_field: String,
    /**
     * Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeTimeZone"
    )]
    pub include_time_zone: String,
    /**
     * Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "loggingEnabled"
    )]
    pub logging_enabled: String,
    /**
     * Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientEvents"
    )]
    pub recipient_events: Vec<RecipientEvent>,
    /**
     * Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireAcknowledgment"
    )]
    pub require_acknowledgment: String,
    /**
     * Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signMessageWithX509Cert"
    )]
    pub sign_message_with_x509_cert: String,
    /**
     * Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "soapNameSpace"
    )]
    pub soap_name_space: String,
    /**
     * Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub url: String,
    /**
     * Use this object to configure a [DocuSign Connect webhook](https://developers.docusign.com/platform/webhooks/connect/).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useSoapInterface"
    )]
    pub use_soap_interface: String,
}

/// Information about the result of an event.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct EventResult {
    /**
     * Information about the result of an event.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "eventTimestamp"
    )]
    pub event_timestamp: String,
    /**
     * Information about the result of an event.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "failureDescription"
    )]
    pub failure_description: String,
    /**
     * Information about the result of an event.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * Information about the result of an event.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "vendorFailureStatusCode"
    )]
    pub vendor_failure_status_code: String,
}

/// A complex element that specifies the expiration settings for the envelope.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Expirations {
    /**
     * A complex element that specifies the expiration settings for the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expireAfter"
    )]
    pub expire_after: String,
    /**
     * A complex element that specifies the expiration settings for the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expireEnabled"
    )]
    pub expire_enabled: String,
    /**
     * A complex element that specifies the expiration settings for the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expireWarn"
    )]
    pub expire_warn: String,
}

///  Claims about the user from an external provider. This object is reserved for DocuSign internal use.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ExternalClaim {
    /**
     *  Claims about the user from an external provider. This object is reserved for DocuSign internal use.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "acquiredTime"
    )]
    pub acquired_time: String,
    /**
     *  Claims about the user from an external provider. This object is reserved for DocuSign internal use.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "claimName"
    )]
    pub claim_name: String,
    /**
     *  Claims about the user from an external provider. This object is reserved for DocuSign internal use.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub provider: String,
    /**
     *  Claims about the user from an external provider. This object is reserved for DocuSign internal use.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ExternalDocServiceErrorDetails {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authenticationUrl"
    )]
    pub authentication_url: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "errorCode"
    )]
    pub error_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub message: String,
}

/// A complex object specifying the external document sources.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ExternalDocumentSources {
    /**
     * A complex object specifying the external document sources.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "boxnetEnabled"
    )]
    pub boxnet_enabled: String,
    /**
     * A complex object specifying the external document sources.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boxnetMetadata"
    )]
    pub boxnet_metadata: Option<SettingsMetadata>,
    /**
     * A complex object specifying the external document sources.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "dropboxEnabled"
    )]
    pub dropbox_enabled: String,
    /**
     * A complex object specifying the external document sources.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dropboxMetadata"
    )]
    pub dropbox_metadata: Option<SettingsMetadata>,
    /**
     * A complex object specifying the external document sources.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "googleDriveEnabled"
    )]
    pub google_drive_enabled: String,
    /**
     * A complex object specifying the external document sources.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "googleDriveMetadata"
    )]
    pub google_drive_metadata: Option<SettingsMetadata>,
    /**
     * A complex object specifying the external document sources.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "oneDriveEnabled"
    )]
    pub one_drive_enabled: String,
    /**
     * A complex object specifying the external document sources.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "oneDriveMetadata"
    )]
    pub one_drive_metadata: Option<SettingsMetadata>,
    /**
     * A complex object specifying the external document sources.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "salesforceEnabled"
    )]
    pub salesforce_enabled: String,
    /**
     * A complex object specifying the external document sources.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "salesforceMetadata"
    )]
    pub salesforce_metadata: Option<SettingsMetadata>,
}

/// This object contains information about a file or folder in cloud storage.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ExternalFile {
    /**
     * This object contains information about a file or folder in cloud storage.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub date: String,
    /**
     * This object contains information about a file or folder in cloud storage.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * This object contains information about a file or folder in cloud storage.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub img: String,
    /**
     * This object contains information about a file or folder in cloud storage.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * This object contains information about a file or folder in cloud storage.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub size: String,
    /**
     * This object contains information about a file or folder in cloud storage.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub supported: String,
    /**
     * This object contains information about a file or folder in cloud storage.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
    /**
     * This object contains information about a file or folder in cloud storage.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uri: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ExternalFolder {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ExternalDocServiceErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub items: Vec<ExternalFile>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct FavoriteTemplatesContentItem {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "favoritedDate"
    )]
    pub favorited_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateId"
    )]
    pub template_id: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct FavoriteTemplatesInfo {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "favoriteTemplates"
    )]
    pub favorite_templates: Vec<FavoriteTemplatesContentItem>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "templatesUpdatedCount"
    )]
    pub templates_updated_count: i64,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct FeatureAvailableMetadata {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub availabilty: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "featureName"
    )]
    pub feature_name: String,
}

/// This object provides details about a feature set, or add-on product that is associated with an account. It is reserved for DocuSign internal use only.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct FeatureSet {
    /**
     * This object provides details about a feature set, or add-on product that is associated with an account. It is reserved for DocuSign internal use only.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "currencyFeatureSetPrices"
    )]
    pub currency_feature_set_prices: Vec<CurrencyFeatureSetPrice>,
    /**
     * This object provides details about a feature set, or add-on product that is associated with an account. It is reserved for DocuSign internal use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeFee"
    )]
    pub envelope_fee: String,
    /**
     * This object provides details about a feature set, or add-on product that is associated with an account. It is reserved for DocuSign internal use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "featureSetId"
    )]
    pub feature_set_id: String,
    /**
     * This object provides details about a feature set, or add-on product that is associated with an account. It is reserved for DocuSign internal use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fixedFee"
    )]
    pub fixed_fee: String,
    /**
     * This object provides details about a feature set, or add-on product that is associated with an account. It is reserved for DocuSign internal use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "is21CFRPart11"
    )]
    pub is_21cfr_part_11: String,
    /**
     * This object provides details about a feature set, or add-on product that is associated with an account. It is reserved for DocuSign internal use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isActive"
    )]
    pub is_active: String,
    /**
     * This object provides details about a feature set, or add-on product that is associated with an account. It is reserved for DocuSign internal use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isEnabled"
    )]
    pub is_enabled: String,
    /**
     * This object provides details about a feature set, or add-on product that is associated with an account. It is reserved for DocuSign internal use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * This object provides details about a feature set, or add-on product that is associated with an account. It is reserved for DocuSign internal use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "seatFee"
    )]
    pub seat_fee: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct FileType {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fileExtension"
    )]
    pub file_extension: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mimeType"
    )]
    pub mime_type: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct FileTypeList {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "fileTypes"
    )]
    pub file_types: Vec<FileType>,
}

/// Use this object to create a filtered view of the items in a folder.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Filter {
    /**
     * Use this object to create a filtered view of the items in a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "actionRequired"
    )]
    pub action_required: String,
    /**
     * Use this object to create a filtered view of the items in a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub expires: String,
    /**
     * Use this object to create a filtered view of the items in a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "folderIds"
    )]
    pub folder_ids: String,
    /**
     * Use this object to create a filtered view of the items in a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fromDateTime"
    )]
    pub from_date_time: String,
    /**
     * Use this object to create a filtered view of the items in a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isTemplate"
    )]
    pub is_template: String,
    /**
     * Use this object to create a filtered view of the items in a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub order: String,
    /**
     * Use this object to create a filtered view of the items in a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "orderBy"
    )]
    pub order_by: String,
    /**
     * Use this object to create a filtered view of the items in a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "searchTarget"
    )]
    pub search_target: String,
    /**
     * Use this object to create a filtered view of the items in a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "searchText"
    )]
    pub search_text: String,
    /**
     * Use this object to create a filtered view of the items in a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * Use this object to create a filtered view of the items in a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "toDateTime"
    )]
    pub to_date_time: String,
}

/// A tab that displays the recipient's first name. This tab
/// takes the recipient's name as entered in the recipient
/// information, splits it into sections based on spaces and
/// uses the first section as the first name.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct FirstName {
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that displays the recipient's first name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the first section as the first name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// This object contains details about a folder.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Folder {
    /**
     * This object contains details about a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * This object contains details about a folder.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<Filter>,
    /**
     * This object contains details about a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "folderId"
    )]
    pub folder_id: String,
    /**
     * This object contains details about a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "folderItems"
    )]
    pub folder_items: Vec<FolderItemV2>,
    /**
     * This object contains details about a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub folders: Vec<Folder>,
    /**
     * This object contains details about a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hasAccess"
    )]
    pub has_access: String,
    /**
     * This object contains details about a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hasSubFolders"
    )]
    pub has_sub_folders: String,
    /**
     * This object contains details about a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "itemCount"
    )]
    pub item_count: String,
    /**
     * This object contains details about a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * This object contains details about a folder.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<UserInfo>,
    /**
     * This object contains details about a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "parentFolderId"
    )]
    pub parent_folder_id: String,
    /**
     * This object contains details about a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "parentFolderUri"
    )]
    pub parent_folder_uri: String,
    /**
     * This object contains details about a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "subFolderCount"
    )]
    pub sub_folder_count: String,
    /**
     * This object contains details about a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
    /**
     * This object contains details about a folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uri: String,
}

/// Results from a folder item request.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct FolderItemResponse {
    /**
     * Results from a folder item request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     * Results from a folder item request.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "folderItems"
    )]
    pub folder_items: Vec<FolderItemV2>,
    /**
     * Results from a folder item request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     * Results from a folder item request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     * Results from a folder item request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     * Results from a folder item request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     * Results from a folder item request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalRows"
    )]
    pub total_rows: String,
}

/// Information about folder item results.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct FolderItemV2 {
    /**
     * Information about folder item results.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "completedDateTime"
    )]
    pub completed_date_time: String,
    /**
     * Information about folder item results.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdDateTime"
    )]
    pub created_date_time: String,
    /**
     * Information about folder item results.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     * Information about folder item results.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeUri"
    )]
    pub envelope_uri: String,
    /**
     * Information about folder item results.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expireDateTime"
    )]
    pub expire_date_time: String,
    /**
     * Information about folder item results.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "folderId"
    )]
    pub folder_id: String,
    /**
     * Information about folder item results.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "folderUri"
    )]
    pub folder_uri: String,
    /**
     * Information about folder item results.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "is21CFRPart11"
    )]
    pub is_21cfr_part_11: String,
    /**
     * Information about folder item results.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "ownerName"
    )]
    pub owner_name: String,
    /**
     * Information about folder item results.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recipients: Option<EnvelopeRecipients>,
    /**
     * Information about folder item results.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientsUri"
    )]
    pub recipients_uri: String,
    /**
     * Information about folder item results.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderCompany"
    )]
    pub sender_company: String,
    /**
     * Information about folder item results.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderEmail"
    )]
    pub sender_email: String,
    /**
     * Information about folder item results.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderName"
    )]
    pub sender_name: String,
    /**
     * Information about folder item results.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderUserId"
    )]
    pub sender_user_id: String,
    /**
     * Information about folder item results.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentDateTime"
    )]
    pub sent_date_time: String,
    /**
     * Information about folder item results.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * Information about folder item results.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub subject: String,
    /**
     * Information about folder item results.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateId"
    )]
    pub template_id: String,
    /**
     * Information about folder item results.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateUri"
    )]
    pub template_uri: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct FolderItemsResponse {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub envelopes: Vec<EnvelopeSummary>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub folders: Vec<Folder>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct FolderSharedItem {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "folderId"
    )]
    pub folder_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<UserInfo>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "parentFolderId"
    )]
    pub parent_folder_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "parentFolderUri"
    )]
    pub parent_folder_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "sharedGroups"
    )]
    pub shared_groups: Vec<MemberGroupSharedItem>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "sharedUsers"
    )]
    pub shared_users: Vec<UserSharedItem>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uri: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<UserInfo>,
}

/// Information for a folder request.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct FoldersRequest {
    /**
     * Information for a folder request.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeIds"
    )]
    pub envelope_ids: Vec<String>,
    /**
     * Information for a folder request.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub folders: Vec<Folder>,
    /**
     * Information for a folder request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fromFolderId"
    )]
    pub from_folder_id: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct FoldersResponse {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub envelopes: Vec<EnvelopeSummary>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub folders: Vec<Folder>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

/// A complex element that has up to four Question/Answer pairs for forgotten password information.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ForgottenPasswordInformation {
    /**
     * A complex element that has up to four Question/Answer pairs for forgotten password information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "forgottenPasswordAnswer1"
    )]
    pub forgotten_password_answer_1: String,
    /**
     * A complex element that has up to four Question/Answer pairs for forgotten password information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "forgottenPasswordAnswer2"
    )]
    pub forgotten_password_answer_2: String,
    /**
     * A complex element that has up to four Question/Answer pairs for forgotten password information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "forgottenPasswordAnswer3"
    )]
    pub forgotten_password_answer_3: String,
    /**
     * A complex element that has up to four Question/Answer pairs for forgotten password information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "forgottenPasswordAnswer4"
    )]
    pub forgotten_password_answer_4: String,
    /**
     * A complex element that has up to four Question/Answer pairs for forgotten password information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "forgottenPasswordQuestion1"
    )]
    pub forgotten_password_question_1: String,
    /**
     * A complex element that has up to four Question/Answer pairs for forgotten password information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "forgottenPasswordQuestion2"
    )]
    pub forgotten_password_question_2: String,
    /**
     * A complex element that has up to four Question/Answer pairs for forgotten password information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "forgottenPasswordQuestion3"
    )]
    pub forgotten_password_question_3: String,
    /**
     * A complex element that has up to four Question/Answer pairs for forgotten password information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "forgottenPasswordQuestion4"
    )]
    pub forgotten_password_question_4: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct FormDataItem {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "listSelectedValue"
    )]
    pub list_selected_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "originalValue"
    )]
    pub original_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

/// The value of a formula tab is calculated
/// from the values of other
/// number or date tabs in the document.
/// When the recipient completes the underlying fields,
/// the formula tab calculates and displays the result.
///
/// The `formula` property of the tab
/// contains the references
/// to the underlying tabs.
/// See [Calculated Fields][calculatedfields]
/// in the DocuSign Support Center
/// to learn more about formulas.
///
/// If a formula tab contains
/// a `paymentDetails` property,
/// the tab is considered a payment item.
/// See [Requesting Payments Along with Signatures][paymentguide]
/// in the DocuSign Support Center
/// to learn more about payments.
///
/// [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
/// [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct FormulaTab {
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "concealValueOnDocument"
    )]
    pub conceal_value_on_document: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "concealValueOnDocumentMetadata"
    )]
    pub conceal_value_on_document_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableAutoSize"
    )]
    pub disable_auto_size: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableAutoSizeMetadata"
    )]
    pub disable_auto_size_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub formula: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formulaMetadata"
    )]
    pub formula_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub hidden: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hiddenMetadata"
    )]
    pub hidden_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "isPaymentAmountMetadata"
    )]
    pub is_payment_amount_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxLength"
    )]
    pub max_length: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxLengthMetadata"
    )]
    pub max_length_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "originalValue"
    )]
    pub original_value: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "originalValueMetadata"
    )]
    pub original_value_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "paymentDetails"
    )]
    pub payment_details: Option<PaymentDetails>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireAll"
    )]
    pub require_all: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireAllMetadata"
    )]
    pub require_all_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireInitialOnSharedChange"
    )]
    pub require_initial_on_shared_change: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireInitialOnSharedChangeMetadata"
    )]
    pub require_initial_on_shared_change_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "roundDecimalPlaces"
    )]
    pub round_decimal_places: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roundDecimalPlacesMetadata"
    )]
    pub round_decimal_places_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderRequired"
    )]
    pub sender_required: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "senderRequiredMetadata"
    )]
    pub sender_required_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharedMetadata"
    )]
    pub shared_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationMessage"
    )]
    pub validation_message: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationMessageMetadata"
    )]
    pub validation_message_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationPattern"
    )]
    pub validation_pattern: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationPatternMetadata"
    )]
    pub validation_pattern_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * The value of a formula tab is calculated
     *  from the values of other
     *  number or date tabs in the document.
     *  When the recipient completes the underlying fields,
     *  the formula tab calculates and displays the result.
     *  
     *  The `formula` property of the tab
     *  contains the references
     *  to the underlying tabs.
     *  See [Calculated Fields][calculatedfields]
     *  in the DocuSign Support Center
     *  to learn more about formulas.
     *  
     *  If a formula tab contains
     *  a `paymentDetails` property,
     *  the tab is considered a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [calculatedfields]: https://support.docusign.com/en/guides/ndse-user-guide-calculated-fields
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// A tab that displays the recipient's full name.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct FullName {
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that displays the recipient's full name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct GraphicsContext {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fillColor"
    )]
    pub fill_color: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lineColor"
    )]
    pub line_color: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lineWeight"
    )]
    pub line_weight: String,
}

/// This object contains information about a group.
#[derive(Serialize, Default, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Group {
    /**
     * This object contains information about a group.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * This object contains information about a group.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupId"
    )]
    pub group_id: String,
    /**
     * This object contains information about a group.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupName"
    )]
    pub group_name: String,
    /**
     * This object contains information about a group.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupType"
    )]
    pub group_type: String,
    /**
     * This object contains information about a group.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "permissionProfileId"
    )]
    pub permission_profile_id: String,
    /**
     * This object contains information about a group.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub users: Vec<UserInfo>,
    /**
     * This object contains information about a group.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "usersCount"
    )]
    pub users_count: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct GroupInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub groups: Vec<Group>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

/// A complex object specifying ID check configuration.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct IdCheckConfiguration {
    /**
     * A complex object specifying ID check configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "authSteps"
    )]
    pub auth_steps: Vec<IdCheckSecurityStep>,
    /**
     * A complex object specifying ID check configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDefault"
    )]
    pub is_default: String,
    /**
     * A complex object specifying ID check configuration.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/// A complex element that contains input information related to a recipient ID check.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct IdCheckInformationInput {
    /**
     * A complex element that contains input information related to a recipient ID check.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "addressInformationInput"
    )]
    pub address_information_input: Option<AddressInformationInput>,
    /**
     * A complex element that contains input information related to a recipient ID check.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dobInformationInput"
    )]
    pub dob_information_input: Option<DobInformationInput>,
    /**
     * A complex element that contains input information related to a recipient ID check.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ssn4InformationInput"
    )]
    pub ssn_4_information_input: Option<Ssn4InformationInput>,
    /**
     * A complex element that contains input information related to a recipient ID check.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ssn9InformationInput"
    )]
    pub ssn_9_information_input: Option<Ssn9InformationInput>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct IdCheckSecurityStep {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authType"
    )]
    pub auth_type: String,
}

/// Contains information about an in-person recipient. This is a DocuSign user,
/// acting as a Signing Host,
/// who is in the same physical location as the signer.
/// To learn about the fields used
/// for the eNotary feature,
/// see the [EnvelopeRecipients resource][resource].
///
/// [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct InPersonSigner {
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCode"
    )]
    pub access_code: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessCodeMetadata"
    )]
    pub access_code_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "addAccessCodeToEmail"
    )]
    pub add_access_code_to_email: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSystemOverrideForLockedRecipient"
    )]
    pub allow_system_override_for_locked_recipient: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "autoNavigation"
    )]
    pub auto_navigation: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canSignOffline"
    )]
    pub can_sign_offline: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "clientUserId"
    )]
    pub client_user_id: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "completedCount"
    )]
    pub completed_count: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "creationReason"
    )]
    pub creation_reason: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "customFields"
    )]
    pub custom_fields: Vec<String>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedDateTime"
    )]
    pub declined_date_time: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedReason"
    )]
    pub declined_reason: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "defaultRecipient"
    )]
    pub default_recipient: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveredDateTime"
    )]
    pub delivered_date_time: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveryMethod"
    )]
    pub delivery_method: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryMethodMetadata"
    )]
    pub delivery_method_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorId"
    )]
    pub designator_id: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorIdGuid"
    )]
    pub designator_id_guid: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentVisibility"
    )]
    pub document_visibility: Vec<DocumentVisibility>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailMetadata"
    )]
    pub email_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailNotification"
    )]
    pub email_notification: Option<RecipientEmailNotification>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "embeddedRecipientStartURL"
    )]
    pub embedded_recipient_start_url: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "excludedDocuments"
    )]
    pub excluded_documents: Vec<String>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "faxNumber"
    )]
    pub fax_number: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "faxNumberMetadata"
    )]
    pub fax_number_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hostEmail"
    )]
    pub host_email: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hostEmailMetadata"
    )]
    pub host_email_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hostName"
    )]
    pub host_name: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hostNameMetadata"
    )]
    pub host_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idCheckConfigurationName"
    )]
    pub id_check_configuration_name: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckConfigurationNameMetadata"
    )]
    pub id_check_configuration_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckInformationInput"
    )]
    pub id_check_information_input: Option<IdCheckInformationInput>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityVerification"
    )]
    pub identity_verification: Option<RecipientIdentityVerification>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "inPersonSigningType"
    )]
    pub in_person_signing_type: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inPersonSigningTypeMetadata"
    )]
    pub in_person_signing_type_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "inheritEmailNotificationConfiguration"
    )]
    pub inherit_email_notification_configuration: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientPhoneAuthEditable"
    )]
    pub locked_recipient_phone_auth_editable: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientSmsEditable"
    )]
    pub locked_recipient_sms_editable: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notaryHost"
    )]
    pub notary_host: Option<NotaryHost>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "notaryId"
    )]
    pub notary_id: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub note: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteMetadata"
    )]
    pub note_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phoneAuthentication"
    )]
    pub phone_authentication: Option<RecipientPhoneAuthentication>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientAttachments"
    )]
    pub recipient_attachments: Vec<RecipientAttachment>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientAuthenticationStatus"
    )]
    pub recipient_authentication_status: Option<AuthenticationStatus>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientFeatureMetadata"
    )]
    pub recipient_feature_metadata: Vec<FeatureAvailableMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientSignatureProviders"
    )]
    pub recipient_signature_providers: Vec<RecipientSignatureProvider>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientSuppliesTabs"
    )]
    pub recipient_supplies_tabs: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientType"
    )]
    pub recipient_type: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientTypeMetadata"
    )]
    pub recipient_type_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireIdLookup"
    )]
    pub require_id_lookup: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireIdLookupMetadata"
    )]
    pub require_id_lookup_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireSignOnPaper"
    )]
    pub require_sign_on_paper: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireSignerCertificate"
    )]
    pub require_signer_certificate: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireUploadSignature"
    )]
    pub require_upload_signature: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "roleName"
    )]
    pub role_name: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "routingOrder"
    )]
    pub routing_order: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routingOrderMetadata"
    )]
    pub routing_order_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentDateTime"
    )]
    pub sent_date_time: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signInEachLocation"
    )]
    pub sign_in_each_location: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signInEachLocationMetadata"
    )]
    pub sign_in_each_location_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signatureInfo"
    )]
    pub signature_info: Option<RecipientSignatureInformation>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signedDateTime"
    )]
    pub signed_date_time: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerEmail"
    )]
    pub signer_email: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signerEmailMetadata"
    )]
    pub signer_email_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerFirstName"
    )]
    pub signer_first_name: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signerFirstNameMetadata"
    )]
    pub signer_first_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerLastName"
    )]
    pub signer_last_name: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signerLastNameMetadata"
    )]
    pub signer_last_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerName"
    )]
    pub signer_name: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signerNameMetadata"
    )]
    pub signer_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupId"
    )]
    pub signing_group_id: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingGroupIdMetadata"
    )]
    pub signing_group_id_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupName"
    )]
    pub signing_group_name: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signingGroupUsers"
    )]
    pub signing_group_users: Vec<UserInfo>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smsAuthentication"
    )]
    pub sms_authentication: Option<RecipientSmsAuthentication>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "socialAuthentications"
    )]
    pub social_authentications: Vec<SocialAuthentication>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusCode"
    )]
    pub status_code: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "suppressEmails"
    )]
    pub suppress_emails: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tabs: Option<EnvelopeRecipientTabs>,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalTabCount"
    )]
    pub total_tab_count: String,
    /**
     * Contains information about an in-person recipient. This is a DocuSign user,
     *  acting as a Signing Host,
     *  who is in the same physical location as the signer.
     *  To learn about the fields used
     *  for the eNotary feature,
     *  see the [EnvelopeRecipients resource][resource].
     *  
     *  [resource]: https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipients#in-person-signer-recipient
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
}

/// A tab that allows the recipient to initial the document. May
/// be optional.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct InitialHere {
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub optional: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "optionalMetadata"
    )]
    pub optional_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "scaleValue"
    )]
    pub scale_value: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleValueMetadata"
    )]
    pub scale_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that allows the recipient to initial the document. May
     *  be optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct InlineTemplate {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customFields"
    )]
    pub custom_fields: Option<AccountCustomFields>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub documents: Vec<Document>,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub envelope: Option<Envelope>,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub recipients: Option<EnvelopeRecipients>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sequence: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct IntegratedUserInfoList {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allUsersSelected"
    )]
    pub all_users_selected: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub users: Vec<UserInfo>,
}

/// Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Intermediary {
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCode"
    )]
    pub access_code: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessCodeMetadata"
    )]
    pub access_code_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "addAccessCodeToEmail"
    )]
    pub add_access_code_to_email: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "additionalNotifications"
    )]
    pub additional_notifications: Vec<RecipientAdditionalNotification>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSystemOverrideForLockedRecipient"
    )]
    pub allow_system_override_for_locked_recipient: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "clientUserId"
    )]
    pub client_user_id: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "completedCount"
    )]
    pub completed_count: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "customFields"
    )]
    pub custom_fields: Vec<String>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedDateTime"
    )]
    pub declined_date_time: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedReason"
    )]
    pub declined_reason: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveredDateTime"
    )]
    pub delivered_date_time: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveryMethod"
    )]
    pub delivery_method: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryMethodMetadata"
    )]
    pub delivery_method_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorId"
    )]
    pub designator_id: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorIdGuid"
    )]
    pub designator_id_guid: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentVisibility"
    )]
    pub document_visibility: Vec<DocumentVisibility>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailMetadata"
    )]
    pub email_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailNotification"
    )]
    pub email_notification: Option<RecipientEmailNotification>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "embeddedRecipientStartURL"
    )]
    pub embedded_recipient_start_url: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "excludedDocuments"
    )]
    pub excluded_documents: Vec<String>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "faxNumber"
    )]
    pub fax_number: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "faxNumberMetadata"
    )]
    pub fax_number_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "firstName"
    )]
    pub first_name: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "firstNameMetadata"
    )]
    pub first_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fullName"
    )]
    pub full_name: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fullNameMetadata"
    )]
    pub full_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idCheckConfigurationName"
    )]
    pub id_check_configuration_name: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckConfigurationNameMetadata"
    )]
    pub id_check_configuration_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckInformationInput"
    )]
    pub id_check_information_input: Option<IdCheckInformationInput>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityVerification"
    )]
    pub identity_verification: Option<RecipientIdentityVerification>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "inheritEmailNotificationConfiguration"
    )]
    pub inherit_email_notification_configuration: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastName"
    )]
    pub last_name: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastNameMetadata"
    )]
    pub last_name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientPhoneAuthEditable"
    )]
    pub locked_recipient_phone_auth_editable: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientSmsEditable"
    )]
    pub locked_recipient_sms_editable: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub note: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteMetadata"
    )]
    pub note_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phoneAuthentication"
    )]
    pub phone_authentication: Option<RecipientPhoneAuthentication>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientAttachments"
    )]
    pub recipient_attachments: Vec<RecipientAttachment>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientAuthenticationStatus"
    )]
    pub recipient_authentication_status: Option<AuthenticationStatus>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientFeatureMetadata"
    )]
    pub recipient_feature_metadata: Vec<FeatureAvailableMetadata>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientType"
    )]
    pub recipient_type: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientTypeMetadata"
    )]
    pub recipient_type_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireIdLookup"
    )]
    pub require_id_lookup: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireIdLookupMetadata"
    )]
    pub require_id_lookup_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "roleName"
    )]
    pub role_name: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "routingOrder"
    )]
    pub routing_order: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routingOrderMetadata"
    )]
    pub routing_order_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentDateTime"
    )]
    pub sent_date_time: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signedDateTime"
    )]
    pub signed_date_time: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupId"
    )]
    pub signing_group_id: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingGroupIdMetadata"
    )]
    pub signing_group_id_metadata: Option<PropertyMetadata>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupName"
    )]
    pub signing_group_name: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signingGroupUsers"
    )]
    pub signing_group_users: Vec<UserInfo>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smsAuthentication"
    )]
    pub sms_authentication: Option<RecipientSmsAuthentication>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "socialAuthentications"
    )]
    pub social_authentications: Vec<SocialAuthentication>,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusCode"
    )]
    pub status_code: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "suppressEmails"
    )]
    pub suppress_emails: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalTabCount"
    )]
    pub total_tab_count: String,
    /**
     * Contains information about an intermediary recipient. An intermediary is a recipient who can, but is not required to, add name and email information for recipients at the same or subsequent level in the routing order, unless subsequent agents, editors or intermediaries are added.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
}

/// Describes the jurisdiction of a notary.
/// This is read-only object.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Jurisdiction {
    /**
     * Describes the jurisdiction of a notary.
     *  This is read-only object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSystemCreatedSeal"
    )]
    pub allow_system_created_seal: String,
    /**
     * Describes the jurisdiction of a notary.
     *  This is read-only object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowUserUploadedSeal"
    )]
    pub allow_user_uploaded_seal: String,
    /**
     * Describes the jurisdiction of a notary.
     *  This is read-only object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "commissionIdInSeal"
    )]
    pub commission_id_in_seal: String,
    /**
     * Describes the jurisdiction of a notary.
     *  This is read-only object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub county: String,
    /**
     * Describes the jurisdiction of a notary.
     *  This is read-only object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "countyInSeal"
    )]
    pub county_in_seal: String,
    /**
     * Describes the jurisdiction of a notary.
     *  This is read-only object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub enabled: String,
    /**
     * Describes the jurisdiction of a notary.
     *  This is read-only object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "jurisdictionId"
    )]
    pub jurisdiction_id: String,
    /**
     * Describes the jurisdiction of a notary.
     *  This is read-only object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Describes the jurisdiction of a notary.
     *  This is read-only object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "notaryPublicInSeal"
    )]
    pub notary_public_in_seal: String,
    /**
     * Describes the jurisdiction of a notary.
     *  This is read-only object.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stateNameInSeal"
    )]
    pub state_name_in_seal: String,
}

/// A tab that displays the recipient's last name. This tab
/// takes the recipient's name as entered in the recipient
/// information, splits it into sections based on spaces and
/// uses the last section as the last name.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct LastName {
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that displays the recipient's last name. This tab
     *  takes the recipient's name as entered in the recipient
     *  information, splits it into sections based on spaces and
     *  uses the last section as the last name.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// This tab offers a list of options to choose from.
/// The `listItems`
/// property contains a list of
/// [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
/// objects to specify the selectable options.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct List {
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "listItems"
    )]
    pub list_items: Vec<ListItem>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "listSelectedValue"
    )]
    pub list_selected_value: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "listSelectedValueMetadata"
    )]
    pub list_selected_value_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireAll"
    )]
    pub require_all: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireAllMetadata"
    )]
    pub require_all_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireInitialOnSharedChange"
    )]
    pub require_initial_on_shared_change: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireInitialOnSharedChangeMetadata"
    )]
    pub require_initial_on_shared_change_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderRequired"
    )]
    pub sender_required: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "senderRequiredMetadata"
    )]
    pub sender_required_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharedMetadata"
    )]
    pub shared_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * This tab offers a list of options to choose from.
     *  The `listItems`
     *  property contains a list of
     *  [`listItem`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/)
     *  objects to specify the selectable options.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// This object represents a list custom field from which envelope creators and senders can select custom data.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ListCustomField {
    /**
     * This object represents a list custom field from which envelope creators and senders can select custom data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "configurationType"
    )]
    pub configuration_type: String,
    /**
     * This object represents a list custom field from which envelope creators and senders can select custom data.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * This object represents a list custom field from which envelope creators and senders can select custom data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fieldId"
    )]
    pub field_id: String,
    /**
     * This object represents a list custom field from which envelope creators and senders can select custom data.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "listItems"
    )]
    pub list_items: Vec<String>,
    /**
     * This object represents a list custom field from which envelope creators and senders can select custom data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * This object represents a list custom field from which envelope creators and senders can select custom data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     * This object represents a list custom field from which envelope creators and senders can select custom data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub show: String,
    /**
     * This object represents a list custom field from which envelope creators and senders can select custom data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

/// One of the selectable items
/// in the `listItems` property
/// of a [`list`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/) tab.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ListItem {
    /**
     * One of the selectable items
     *  in the `listItems` property
     *  of a [`list`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/) tab.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub selected: String,
    /**
     * One of the selectable items
     *  in the `listItems` property
     *  of a [`list`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/) tab.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "selectedMetadata"
    )]
    pub selected_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable items
     *  in the `listItems` property
     *  of a [`list`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/) tab.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub text: String,
    /**
     * One of the selectable items
     *  in the `listItems` property
     *  of a [`list`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/) tab.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "textMetadata"
    )]
    pub text_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable items
     *  in the `listItems` property
     *  of a [`list`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/) tab.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * One of the selectable items
     *  in the `listItems` property
     *  of a [`list`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/) tab.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct LocalePolicy {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "addressFormat"
    )]
    pub address_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "addressFormatMetadata"
    )]
    pub address_format_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowRegion"
    )]
    pub allow_region: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "calendarType"
    )]
    pub calendar_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "calendarTypeMetadata"
    )]
    pub calendar_type_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "cultureName"
    )]
    pub culture_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cultureNameMetadata"
    )]
    pub culture_name_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currencyCode"
    )]
    pub currency_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "currencyCodeMetadata"
    )]
    pub currency_code_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currencyNegativeFormat"
    )]
    pub currency_negative_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "currencyNegativeFormatMetadata"
    )]
    pub currency_negative_format_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currencyPositiveFormat"
    )]
    pub currency_positive_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "currencyPositiveFormatMetadata"
    )]
    pub currency_positive_format_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customDateFormat"
    )]
    pub custom_date_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customSignDateFormat"
    )]
    pub custom_sign_date_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customSignTimeFormat"
    )]
    pub custom_sign_time_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTimeFormat"
    )]
    pub custom_time_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "dateFormat"
    )]
    pub date_format: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dateFormatMetadata"
    )]
    pub date_format_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "effectiveAddressFormat"
    )]
    pub effective_address_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "effectiveCalendarType"
    )]
    pub effective_calendar_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "effectiveCurrencyCode"
    )]
    pub effective_currency_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "effectiveCurrencyNegativeFormat"
    )]
    pub effective_currency_negative_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "effectiveCurrencyPositiveFormat"
    )]
    pub effective_currency_positive_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "effectiveCustomDateFormat"
    )]
    pub effective_custom_date_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "effectiveCustomTimeFormat"
    )]
    pub effective_custom_time_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "effectiveDateFormat"
    )]
    pub effective_date_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "effectiveInitialFormat"
    )]
    pub effective_initial_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "effectiveNameFormat"
    )]
    pub effective_name_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "effectiveTimeFormat"
    )]
    pub effective_time_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "effectiveTimeZone"
    )]
    pub effective_time_zone: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initialFormat"
    )]
    pub initial_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialFormatMetadata"
    )]
    pub initial_format_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nameFormat"
    )]
    pub name_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameFormatMetadata"
    )]
    pub name_format_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signDateFormat"
    )]
    pub sign_date_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signDateFormatMetadata"
    )]
    pub sign_date_format_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signTimeFormat"
    )]
    pub sign_time_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signTimeFormatMetadata"
    )]
    pub sign_time_format_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "timeFormat"
    )]
    pub time_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timeFormatMetadata"
    )]
    pub time_format_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "timeZone"
    )]
    pub time_zone: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timeZoneMetadata"
    )]
    pub time_zone_metadata: Option<SettingsMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct LocalePolicyTab {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "addressFormat"
    )]
    pub address_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "calendarType"
    )]
    pub calendar_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "cultureName"
    )]
    pub culture_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currencyCode"
    )]
    pub currency_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currencyNegativeFormat"
    )]
    pub currency_negative_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currencyPositiveFormat"
    )]
    pub currency_positive_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customDateFormat"
    )]
    pub custom_date_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTimeFormat"
    )]
    pub custom_time_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "dateFormat"
    )]
    pub date_format: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initialFormat"
    )]
    pub initial_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nameFormat"
    )]
    pub name_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "timeFormat"
    )]
    pub time_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "timeZone"
    )]
    pub time_zone: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct LockInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockDurationInSeconds"
    )]
    pub lock_duration_in_seconds: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockToken"
    )]
    pub lock_token: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockType"
    )]
    pub lock_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedByApp"
    )]
    pub locked_by_app: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedByUser"
    )]
    pub locked_by_user: Option<UserInfo>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedUntilDateTime"
    )]
    pub locked_until_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useScratchPad"
    )]
    pub use_scratch_pad: String,
}

/// This request object contains information about the lock that you want to create or update.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct LockRequest {
    /**
     * This request object contains information about the lock that you want to create or update.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockDurationInSeconds"
    )]
    pub lock_duration_in_seconds: String,
    /**
     * This request object contains information about the lock that you want to create or update.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockType"
    )]
    pub lock_type: String,
    /**
     * This request object contains information about the lock that you want to create or update.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedByApp"
    )]
    pub locked_by_app: String,
    /**
     * This request object contains information about the lock that you want to create or update.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templatePassword"
    )]
    pub template_password: String,
    /**
     * This request object contains information about the lock that you want to create or update.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useScratchPad"
    )]
    pub use_scratch_pad: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct LoginAccount {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountId"
    )]
    pub account_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountIdGuid"
    )]
    pub account_id_guid: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "baseUrl"
    )]
    pub base_url: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDefault"
    )]
    pub is_default: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "loginAccountSettings"
    )]
    pub login_account_settings: Vec<NameValue>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "loginUserSettings"
    )]
    pub login_user_settings: Vec<NameValue>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "siteDescription"
    )]
    pub site_description: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userName"
    )]
    pub user_name: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct LoginInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "apiPassword"
    )]
    pub api_password: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "loginAccounts"
    )]
    pub login_accounts: Vec<LoginAccount>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct MatchBox {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
}

/// Information about items shared among groups.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct MemberGroupSharedItem {
    /**
     * Information about items shared among groups.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Information about items shared among groups.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<Group>,
    /**
     * Information about items shared among groups.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
}

/// Information about shared items.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct MemberSharedItems {
    /**
     * Information about shared items.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub envelopes: Vec<SharedItem>,
    /**
     * Information about shared items.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Information about shared items.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub folders: Vec<FolderSharedItem>,
    /**
     * Information about shared items.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub templates: Vec<TemplateSharedItem>,
    /**
     * Information about shared items.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<UserInfo>,
}

/// Contains information for transfering values between Salesforce data fields and DocuSign Tabs.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct MergeField {
    /**
     * Contains information for transfering values between Salesforce data fields and DocuSign Tabs.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSenderToEdit"
    )]
    pub allow_sender_to_edit: String,
    /**
     * Contains information for transfering values between Salesforce data fields and DocuSign Tabs.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSenderToEditMetadata"
    )]
    pub allow_sender_to_edit_metadata: Option<PropertyMetadata>,
    /**
     * Contains information for transfering values between Salesforce data fields and DocuSign Tabs.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "configurationType"
    )]
    pub configuration_type: String,
    /**
     * Contains information for transfering values between Salesforce data fields and DocuSign Tabs.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "configurationTypeMetadata"
    )]
    pub configuration_type_metadata: Option<PropertyMetadata>,
    /**
     * Contains information for transfering values between Salesforce data fields and DocuSign Tabs.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub path: String,
    /**
     * Contains information for transfering values between Salesforce data fields and DocuSign Tabs.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "pathExtended"
    )]
    pub path_extended: Vec<PathExtendedElement>,
    /**
     * Contains information for transfering values between Salesforce data fields and DocuSign Tabs.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pathExtendedMetadata"
    )]
    pub path_extended_metadata: Option<PropertyMetadata>,
    /**
     * Contains information for transfering values between Salesforce data fields and DocuSign Tabs.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pathMetadata"
    )]
    pub path_metadata: Option<PropertyMetadata>,
    /**
     * Contains information for transfering values between Salesforce data fields and DocuSign Tabs.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub row: String,
    /**
     * Contains information for transfering values between Salesforce data fields and DocuSign Tabs.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rowMetadata"
    )]
    pub row_metadata: Option<PropertyMetadata>,
    /**
     * Contains information for transfering values between Salesforce data fields and DocuSign Tabs.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "writeBack"
    )]
    pub write_back: String,
    /**
     * Contains information for transfering values between Salesforce data fields and DocuSign Tabs.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeBackMetadata"
    )]
    pub write_back_metadata: Option<PropertyMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct MobileNotifierConfiguration {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deviceId"
    )]
    pub device_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub platform: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct MobileNotifierConfigurationInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "mobileNotifierConfigurations"
    )]
    pub mobile_notifier_configurations: Vec<MobileNotifierConfiguration>,
}

/// Describes information
/// about the `total` of a payment.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Money {
    /**
     * Describes information
     *  about the `total` of a payment.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "amountInBaseUnit"
    )]
    pub amount_in_base_unit: String,
    /**
     * Describes information
     *  about the `total` of a payment.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub currency: String,
    /**
     * Describes information
     *  about the `total` of a payment.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayAmount"
    )]
    pub display_amount: String,
}

/// A name-value pair that describes an item and provides a value for the item.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NameValue {
    /**
     * A name-value pair that describes an item and provides a value for the item.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A name-value pair that describes an item and provides a value for the item.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A name-value pair that describes an item and provides a value for the item.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "originalValue"
    )]
    pub original_value: String,
    /**
     * A name-value pair that describes an item and provides a value for the item.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NewAccountDefinition {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountName"
    )]
    pub account_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accountSettings"
    )]
    pub account_settings: Option<AccountSettingsInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "addressInformation"
    )]
    pub address_information: Option<AccountAddress>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "creditCardInformation"
    )]
    pub credit_card_information: Option<CreditCardInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "directDebitProcessorInformation"
    )]
    pub direct_debit_processor_information: Option<DirectDebitProcessorInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "distributorCode"
    )]
    pub distributor_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "distributorPassword"
    )]
    pub distributor_password: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopePartitionId"
    )]
    pub envelope_partition_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialUser"
    )]
    pub initial_user: Option<UserInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentMethod"
    )]
    pub payment_method: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "paymentProcessorInformation"
    )]
    pub payment_processor_information: Option<PaymentProcessorInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "planInformation"
    )]
    pub plan_information: Option<PlanInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "referralInformation"
    )]
    pub referral_information: Option<ReferralInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "socialAccountInformation"
    )]
    pub social_account_information: Option<SocialAccountInformation>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NewAccountSummary {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountId"
    )]
    pub account_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountIdGuid"
    )]
    pub account_id_guid: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountName"
    )]
    pub account_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "apiPassword"
    )]
    pub api_password: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "baseUrl"
    )]
    pub base_url: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "billingPlanPreview"
    )]
    pub billing_plan_preview: Option<BillingPlanPreview>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
}

/// Object representing a new user.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NewUser {
    /**
     * Object representing a new user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "apiPassword"
    )]
    pub api_password: String,
    /**
     * Object representing a new user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdDateTime"
    )]
    pub created_date_time: String,
    /**
     * Object representing a new user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * Object representing a new user.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Object representing a new user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "membershipId"
    )]
    pub membership_id: String,
    /**
     * Object representing a new user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "permissionProfileId"
    )]
    pub permission_profile_id: String,
    /**
     * Object representing a new user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "permissionProfileName"
    )]
    pub permission_profile_name: String,
    /**
     * Object representing a new user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uri: String,
    /**
     * Object representing a new user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
    /**
     * Object representing a new user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userName"
    )]
    pub user_name: String,
    /**
     * Object representing a new user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userStatus"
    )]
    pub user_status: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NewUsersDefinition {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "newUsers"
    )]
    pub new_users: Vec<UserInformation>,
}

/// Object representing a summary of data for new users.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NewUsersSummary {
    /**
     * Object representing a summary of data for new users.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "newUsers"
    )]
    pub new_users: Vec<NewUser>,
}

/// A tab that alerts notary recipients that
/// they must take action on the page.
/// Only one notarize tab can appear on a page.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Notarize {
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that alerts notary recipients that
     *  they must take action on the page.
     *  Only one notarize tab can appear on a page.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NotaryData {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "createdDate"
    )]
    pub created_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub searchable: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userInfo")]
    pub user_info: Option<UserInformation>,
}

/// This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
///
/// It describes information about the notary host.
/// The following information is required
/// when using the eNotary in-person signing flow:
///
/// * `name`: Specifies the notary's full legal name.
/// * `email`: Specifies the notary's email address.
/// * `recipientId`: A unique ID number for the notary signing host.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NotaryHost {
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCode"
    )]
    pub access_code: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessCodeMetadata"
    )]
    pub access_code_metadata: Option<PropertyMetadata>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "addAccessCodeToEmail"
    )]
    pub add_access_code_to_email: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSystemOverrideForLockedRecipient"
    )]
    pub allow_system_override_for_locked_recipient: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "clientUserId"
    )]
    pub client_user_id: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "completedCount"
    )]
    pub completed_count: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "customFields"
    )]
    pub custom_fields: Vec<String>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedDateTime"
    )]
    pub declined_date_time: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedReason"
    )]
    pub declined_reason: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveredDateTime"
    )]
    pub delivered_date_time: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveryMethod"
    )]
    pub delivery_method: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryMethodMetadata"
    )]
    pub delivery_method_metadata: Option<PropertyMetadata>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorId"
    )]
    pub designator_id: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorIdGuid"
    )]
    pub designator_id_guid: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentVisibility"
    )]
    pub document_visibility: Vec<DocumentVisibility>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailMetadata"
    )]
    pub email_metadata: Option<PropertyMetadata>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailNotification"
    )]
    pub email_notification: Option<RecipientEmailNotification>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "embeddedRecipientStartURL"
    )]
    pub embedded_recipient_start_url: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "faxNumber"
    )]
    pub fax_number: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "faxNumberMetadata"
    )]
    pub fax_number_metadata: Option<PropertyMetadata>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hostRecipientId"
    )]
    pub host_recipient_id: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idCheckConfigurationName"
    )]
    pub id_check_configuration_name: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckConfigurationNameMetadata"
    )]
    pub id_check_configuration_name_metadata: Option<PropertyMetadata>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckInformationInput"
    )]
    pub id_check_information_input: Option<IdCheckInformationInput>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityVerification"
    )]
    pub identity_verification: Option<RecipientIdentityVerification>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "inheritEmailNotificationConfiguration"
    )]
    pub inherit_email_notification_configuration: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientPhoneAuthEditable"
    )]
    pub locked_recipient_phone_auth_editable: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientSmsEditable"
    )]
    pub locked_recipient_sms_editable: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub note: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteMetadata"
    )]
    pub note_metadata: Option<PropertyMetadata>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phoneAuthentication"
    )]
    pub phone_authentication: Option<RecipientPhoneAuthentication>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientAttachments"
    )]
    pub recipient_attachments: Vec<RecipientAttachment>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientAuthenticationStatus"
    )]
    pub recipient_authentication_status: Option<AuthenticationStatus>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientFeatureMetadata"
    )]
    pub recipient_feature_metadata: Vec<FeatureAvailableMetadata>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientType"
    )]
    pub recipient_type: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientTypeMetadata"
    )]
    pub recipient_type_metadata: Option<PropertyMetadata>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireIdLookup"
    )]
    pub require_id_lookup: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireIdLookupMetadata"
    )]
    pub require_id_lookup_metadata: Option<PropertyMetadata>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "roleName"
    )]
    pub role_name: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "routingOrder"
    )]
    pub routing_order: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routingOrderMetadata"
    )]
    pub routing_order_metadata: Option<PropertyMetadata>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentDateTime"
    )]
    pub sent_date_time: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signedDateTime"
    )]
    pub signed_date_time: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupId"
    )]
    pub signing_group_id: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingGroupIdMetadata"
    )]
    pub signing_group_id_metadata: Option<PropertyMetadata>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupName"
    )]
    pub signing_group_name: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signingGroupUsers"
    )]
    pub signing_group_users: Vec<UserInfo>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smsAuthentication"
    )]
    pub sms_authentication: Option<RecipientSmsAuthentication>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "socialAuthentications"
    )]
    pub social_authentications: Vec<SocialAuthentication>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusCode"
    )]
    pub status_code: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "suppressEmails"
    )]
    pub suppress_emails: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tabs: Option<EnvelopeRecipientTabs>,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalTabCount"
    )]
    pub total_tab_count: String,
    /**
     * This object is used only when `inPersonSigningType` in the `inPersonSigner` object is `notary`.
     *  
     *  It describes information about the notary host.
     *  The following information is required
     *  when using the eNotary in-person signing flow:
     *  
     *  \* `name`: Specifies the notary's full legal name.
     *  \* `email`: Specifies the notary's email address.
     *  \* `recipientId`: A unique ID number for the notary signing host.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NotaryJournal {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "createdDate"
    )]
    pub created_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentName"
    )]
    pub document_name: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Jurisdiction>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "notaryJournalId"
    )]
    pub notary_journal_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notaryJournalMetaData"
    )]
    pub notary_journal_meta_data: Option<NotaryJournalMetaData>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerName"
    )]
    pub signer_name: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NotaryJournalCredibleWitness {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub address: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureImage"
    )]
    pub signature_image: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NotaryJournalList {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "notaryJournals"
    )]
    pub notary_journals: Vec<NotaryJournal>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NotaryJournalMetaData {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub comment: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "credibleWitnesses"
    )]
    pub credible_witnesses: Vec<NotaryJournalCredibleWitness>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureImage"
    )]
    pub signature_image: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerIdType"
    )]
    pub signer_id_type: String,
}

/// A notary jurisdiction.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NotaryJurisdictionData {
    /**
     * A notary jurisdiction.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "commissionExpiration"
    )]
    pub commission_expiration: String,
    /**
     * A notary jurisdiction.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "commissionId"
    )]
    pub commission_id: String,
    /**
     * A notary jurisdiction.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub county: String,
    /**
     * A notary jurisdiction.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A notary jurisdiction.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub jurisdiction: Option<Jurisdiction>,
    /**
     * A notary jurisdiction.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "registeredName"
    )]
    pub registered_name: String,
    /**
     * A notary jurisdiction.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sealType"
    )]
    pub seal_type: String,
}

/// A paged list of jurisdictions.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NotaryJurisdictionList {
    /**
     * A paged list of jurisdictions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     * A paged list of jurisdictions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     * A paged list of jurisdictions.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "notaryJurisdictions"
    )]
    pub notary_jurisdictions: Vec<NotaryJurisdictionData>,
    /**
     * A paged list of jurisdictions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     * A paged list of jurisdictions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     * A paged list of jurisdictions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     * A paged list of jurisdictions.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NotaryRecipient {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCode"
    )]
    pub access_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessCodeMetadata"
    )]
    pub access_code_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "addAccessCodeToEmail"
    )]
    pub add_access_code_to_email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "additionalNotifications"
    )]
    pub additional_notifications: Vec<RecipientAdditionalNotification>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "agentCanEditEmail"
    )]
    pub agent_can_edit_email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "agentCanEditName"
    )]
    pub agent_can_edit_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSystemOverrideForLockedRecipient"
    )]
    pub allow_system_override_for_locked_recipient: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "autoNavigation"
    )]
    pub auto_navigation: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bulkRecipientsUri"
    )]
    pub bulk_recipients_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canSignOffline"
    )]
    pub can_sign_offline: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "clientUserId"
    )]
    pub client_user_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "completedCount"
    )]
    pub completed_count: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "creationReason"
    )]
    pub creation_reason: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "customFields"
    )]
    pub custom_fields: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedDateTime"
    )]
    pub declined_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedReason"
    )]
    pub declined_reason: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "defaultRecipient"
    )]
    pub default_recipient: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveredDateTime"
    )]
    pub delivered_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveryMethod"
    )]
    pub delivery_method: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryMethodMetadata"
    )]
    pub delivery_method_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorId"
    )]
    pub designator_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorIdGuid"
    )]
    pub designator_id_guid: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentVisibility"
    )]
    pub document_visibility: Vec<DocumentVisibility>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailMetadata"
    )]
    pub email_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailNotification"
    )]
    pub email_notification: Option<RecipientEmailNotification>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "embeddedRecipientStartURL"
    )]
    pub embedded_recipient_start_url: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "excludedDocuments"
    )]
    pub excluded_documents: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "faxNumber"
    )]
    pub fax_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "faxNumberMetadata"
    )]
    pub fax_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "firstName"
    )]
    pub first_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "firstNameMetadata"
    )]
    pub first_name_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fullName"
    )]
    pub full_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fullNameMetadata"
    )]
    pub full_name_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idCheckConfigurationName"
    )]
    pub id_check_configuration_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckConfigurationNameMetadata"
    )]
    pub id_check_configuration_name_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckInformationInput"
    )]
    pub id_check_information_input: Option<IdCheckInformationInput>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityVerification"
    )]
    pub identity_verification: Option<RecipientIdentityVerification>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "inheritEmailNotificationConfiguration"
    )]
    pub inherit_email_notification_configuration: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isBulkRecipient"
    )]
    pub is_bulk_recipient: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "isBulkRecipientMetadata"
    )]
    pub is_bulk_recipient_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastName"
    )]
    pub last_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastNameMetadata"
    )]
    pub last_name_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "liveOakStartURL"
    )]
    pub live_oak_start_url: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientPhoneAuthEditable"
    )]
    pub locked_recipient_phone_auth_editable: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientSmsEditable"
    )]
    pub locked_recipient_sms_editable: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "notaryId"
    )]
    pub notary_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "notarySigners"
    )]
    pub notary_signers: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "notaryType"
    )]
    pub notary_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub note: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteMetadata"
    )]
    pub note_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "offlineAttributes"
    )]
    pub offline_attributes: Option<serde_json::Value>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phoneAuthentication"
    )]
    pub phone_authentication: Option<RecipientPhoneAuthentication>,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proofFile")]
    pub proof_file: Option<RecipientProofFile>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientAttachments"
    )]
    pub recipient_attachments: Vec<RecipientAttachment>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientAuthenticationStatus"
    )]
    pub recipient_authentication_status: Option<AuthenticationStatus>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientFeatureMetadata"
    )]
    pub recipient_feature_metadata: Vec<FeatureAvailableMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientSignatureProviders"
    )]
    pub recipient_signature_providers: Vec<RecipientSignatureProvider>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientSuppliesTabs"
    )]
    pub recipient_supplies_tabs: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientType"
    )]
    pub recipient_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientTypeMetadata"
    )]
    pub recipient_type_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireIdLookup"
    )]
    pub require_id_lookup: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireIdLookupMetadata"
    )]
    pub require_id_lookup_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireSignOnPaper"
    )]
    pub require_sign_on_paper: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireSignerCertificate"
    )]
    pub require_signer_certificate: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireUploadSignature"
    )]
    pub require_upload_signature: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "roleName"
    )]
    pub role_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "routingOrder"
    )]
    pub routing_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routingOrderMetadata"
    )]
    pub routing_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentDateTime"
    )]
    pub sent_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signInEachLocation"
    )]
    pub sign_in_each_location: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signInEachLocationMetadata"
    )]
    pub sign_in_each_location_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signatureInfo"
    )]
    pub signature_info: Option<RecipientSignatureInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signedDateTime"
    )]
    pub signed_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupId"
    )]
    pub signing_group_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingGroupIdMetadata"
    )]
    pub signing_group_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupName"
    )]
    pub signing_group_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signingGroupUsers"
    )]
    pub signing_group_users: Vec<UserInfo>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smsAuthentication"
    )]
    pub sms_authentication: Option<RecipientSmsAuthentication>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "socialAuthentications"
    )]
    pub social_authentications: Vec<SocialAuthentication>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusCode"
    )]
    pub status_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "suppressEmails"
    )]
    pub suppress_emails: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tabs: Option<EnvelopeRecipientTabs>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalTabCount"
    )]
    pub total_tab_count: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
}

/// Describes a single notary jurisdiction.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NotaryResult {
    /**
     * Describes a single notary jurisdiction.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub jurisdictions: Vec<Jurisdiction>,
    /**
     * Describes a single notary jurisdiction.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notary: Option<NotaryData>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NotarySeal {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "scaleValue"
    )]
    pub scale_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleValueMetadata"
    )]
    pub scale_value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// A tab that displays additional information, in the form of a
/// note, for the recipient.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Note {
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharedMetadata"
    )]
    pub shared_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that displays additional information, in the form of a
     *  note, for the recipient.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// A complex element that specifies the notification settings for the envelope.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Notification {
    /**
     * A complex element that specifies the notification settings for the envelope.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expirations: Option<Expirations>,
    /**
     * A complex element that specifies the notification settings for the envelope.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reminders: Option<Reminders>,
    /**
     * A complex element that specifies the notification settings for the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useAccountDefaults"
    )]
    pub use_account_defaults: String,
}

/// Contains details about the default notification settings for the envelope notifications that senders and signers receive.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NotificationDefaultSettings {
    /**
     * Contains details about the default notification settings for the envelope notifications that senders and signers receive.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "senderEmailNotifications"
    )]
    pub sender_email_notifications: Option<SenderEmailNotifications>,
    /**
     * Contains details about the default notification settings for the envelope notifications that senders and signers receive.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signerEmailNotifications"
    )]
    pub signer_email_notifications: Option<SignerEmailNotifications>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct NotificationDefaultsData {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "apiEmailNotifications"
    )]
    pub api_email_notifications: Option<NotificationDefaultSettings>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailNotifications"
    )]
    pub email_notifications: Option<NotificationDefaultSettings>,
}

/// A tab that allows the recipient to enter numbers and decimal
/// (.) points.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Number {
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "concealValueOnDocument"
    )]
    pub conceal_value_on_document: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "concealValueOnDocumentMetadata"
    )]
    pub conceal_value_on_document_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableAutoSize"
    )]
    pub disable_auto_size: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableAutoSizeMetadata"
    )]
    pub disable_auto_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub formula: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formulaMetadata"
    )]
    pub formula_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxLength"
    )]
    pub max_length: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxLengthMetadata"
    )]
    pub max_length_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "originalValue"
    )]
    pub original_value: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "originalValueMetadata"
    )]
    pub original_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireAll"
    )]
    pub require_all: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireAllMetadata"
    )]
    pub require_all_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireInitialOnSharedChange"
    )]
    pub require_initial_on_shared_change: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireInitialOnSharedChangeMetadata"
    )]
    pub require_initial_on_shared_change_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderRequired"
    )]
    pub sender_required: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "senderRequiredMetadata"
    )]
    pub sender_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharedMetadata"
    )]
    pub shared_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationMessage"
    )]
    pub validation_message: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationMessageMetadata"
    )]
    pub validation_message_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationPattern"
    )]
    pub validation_pattern: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationPatternMetadata"
    )]
    pub validation_pattern_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that allows the recipient to enter numbers and decimal
     *  (.) points.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct OauthAccess {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub access_token: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub data: Vec<NameValue>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub expires_in: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub refresh_token: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub scope: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub token_type: String,
}

/// Description of a page of a document.
#[derive(Serialize, Default, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Page {
    /**
     * The brand that envelope recipients see when a brand is not explicitly set.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub dpi: String,
    /**
     * This object describes errors that occur. It is only valid for responses and ignored in requests.
     */
    #[serde(rename = "errorDetails")]
    pub error_details: ErrorDetails,
    /**
     * The brand that envelope recipients see when a brand is not explicitly set.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * The brand that envelope recipients see when a brand is not explicitly set.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "imageBytes"
    )]
    pub image_bytes: String,
    /**
     * The brand that envelope recipients see when a brand is not explicitly set.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mimeType"
    )]
    pub mime_type: String,
    /**
     * The brand that envelope recipients see when a brand is not explicitly set.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageId"
    )]
    pub page_id: String,
    /**
     * The brand that envelope recipients see when a brand is not explicitly set.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sequence: String,
    /**
     * The brand that envelope recipients see when a brand is not explicitly set.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PageImages {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub pages: Vec<Page>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PageRequest {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub rotate: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PathExtendedElement {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "typeName"
    )]
    pub type_name: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PayPalLegacySettings {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub currency: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub partner: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userName"
    )]
    pub user_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub vendor: String,
}

/// When a formula tab
/// has a `paymentDetails` property,
/// the formula tab
/// is a payment item.
/// See [Requesting Payments Along with Signatures][paymentguide]
/// in the DocuSign Support Center
/// to learn more about payments.
///
/// [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PaymentDetails {
    /**
     * When a formula tab
     *  has a `paymentDetails` property,
     *  the formula tab
     *  is a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "allowedPaymentMethods"
    )]
    pub allowed_payment_methods: Vec<String>,
    /**
     * When a formula tab
     *  has a `paymentDetails` property,
     *  the formula tab
     *  is a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "chargeId"
    )]
    pub charge_id: String,
    /**
     * When a formula tab
     *  has a `paymentDetails` property,
     *  the formula tab
     *  is a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currencyCode"
    )]
    pub currency_code: String,
    /**
     * When a formula tab
     *  has a `paymentDetails` property,
     *  the formula tab
     *  is a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "currencyCodeMetadata"
    )]
    pub currency_code_metadata: Option<PropertyMetadata>,
    /**
     * When a formula tab
     *  has a `paymentDetails` property,
     *  the formula tab
     *  is a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customMetadata"
    )]
    pub custom_metadata: String,
    /**
     * When a formula tab
     *  has a `paymentDetails` property,
     *  the formula tab
     *  is a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "customMetadataRequired"
    )]
    pub custom_metadata_required: bool,
    /**
     * When a formula tab
     *  has a `paymentDetails` property,
     *  the formula tab
     *  is a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customerId"
    )]
    pub customer_id: String,
    /**
     * When a formula tab
     *  has a `paymentDetails` property,
     *  the formula tab
     *  is a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "gatewayAccountId"
    )]
    pub gateway_account_id: String,
    /**
     * When a formula tab
     *  has a `paymentDetails` property,
     *  the formula tab
     *  is a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gatewayAccountIdMetadata"
    )]
    pub gateway_account_id_metadata: Option<PropertyMetadata>,
    /**
     * When a formula tab
     *  has a `paymentDetails` property,
     *  the formula tab
     *  is a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "gatewayDisplayName"
    )]
    pub gateway_display_name: String,
    /**
     * When a formula tab
     *  has a `paymentDetails` property,
     *  the formula tab
     *  is a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "gatewayName"
    )]
    pub gateway_name: String,
    /**
     * When a formula tab
     *  has a `paymentDetails` property,
     *  the formula tab
     *  is a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "lineItems"
    )]
    pub line_items: Vec<PaymentLineItem>,
    /**
     * When a formula tab
     *  has a `paymentDetails` property,
     *  the formula tab
     *  is a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentOption"
    )]
    pub payment_option: String,
    /**
     * When a formula tab
     *  has a `paymentDetails` property,
     *  the formula tab
     *  is a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentSourceId"
    )]
    pub payment_source_id: String,
    /**
     * When a formula tab
     *  has a `paymentDetails` property,
     *  the formula tab
     *  is a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signerValues"
    )]
    pub signer_values: Option<PaymentSignerValues>,
    /**
     * When a formula tab
     *  has a `paymentDetails` property,
     *  the formula tab
     *  is a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * When a formula tab
     *  has a `paymentDetails` property,
     *  the formula tab
     *  is a payment item.
     *  See [Requesting Payments Along with Signatures][paymentguide]
     *  in the DocuSign Support Center
     *  to learn more about payments.
     *  
     *  [paymentguide]:     https://support.docusign.com/en/guides/requesting-payments-along-with-signatures
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total: Option<Money>,
}

/// This object contains details about a payment gateway account.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PaymentGatewayAccount {
    /**
     * This object contains details about a payment gateway account.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "allowCustomMetadata"
    )]
    pub allow_custom_metadata: bool,
    /**
     * This object contains details about a payment gateway account.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<PaymentGatewayAccountSetting>,
    /**
     * This object contains details about a payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayName"
    )]
    pub display_name: String,
    /**
     * This object contains details about a payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isEnabled"
    )]
    pub is_enabled: String,
    /**
     * This object contains details about a payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isLegacy"
    )]
    pub is_legacy: String,
    /**
     * This object contains details about a payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModified"
    )]
    pub last_modified: String,
    /**
     * This object contains details about a payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "payPalLegacySettings"
    )]
    pub pay_pal_legacy_settings: Option<PayPalLegacySettings>,
    /**
     * This object contains details about a payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentGateway"
    )]
    pub payment_gateway: String,
    /**
     * This object contains details about a payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentGatewayAccountId"
    )]
    pub payment_gateway_account_id: String,
    /**
     * This object contains details about a payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentGatewayDisplayName"
    )]
    pub payment_gateway_display_name: String,
    /**
     * This object contains details about a payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "supportedCurrencies"
    )]
    pub supported_currencies: Vec<String>,
    /**
     * This object contains details about a payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "supportedPaymentMethods"
    )]
    pub supported_payment_methods: Vec<String>,
    /**
     * This object contains details about a payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "supportedPaymentMethodsWithOptions"
    )]
    pub supported_payment_methods_with_options: Vec<PaymentMethodWithOptions>,
    /**
     * This object contains details about a payment gateway account.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "zeroDecimalCurrencies"
    )]
    pub zero_decimal_currencies: Vec<String>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PaymentGatewayAccountSetting {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "apiFields"
    )]
    pub api_fields: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authorizationCode"
    )]
    pub authorization_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "credentialStatus"
    )]
    pub credential_status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "merchantId"
    )]
    pub merchant_id: String,
}

/// Holds information about connected payment accounts.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PaymentGatewayAccountsInfo {
    /**
     * Holds information about connected payment accounts.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "paymentGatewayAccounts"
    )]
    pub payment_gateway_accounts: Vec<PaymentGatewayAccount>,
}

/// A line item describes details
/// about an individual line item
/// in a payment request.
///
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PaymentLineItem {
    /**
     * A line item describes details
     *  about an individual line item
     *  in a payment request.
     *  
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "amountReference"
    )]
    pub amount_reference: String,
    /**
     * A line item describes details
     *  about an individual line item
     *  in a payment request.
     *  
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub description: String,
    /**
     * A line item describes details
     *  about an individual line item
     *  in a payment request.
     *  
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "itemCode"
    )]
    pub item_code: String,
    /**
     * A line item describes details
     *  about an individual line item
     *  in a payment request.
     *  
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

/// This object contains information about a payment method that the gateway accepts and the payment options that are compatible with it.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PaymentMethodWithOptions {
    /**
     * This object contains information about a payment method that the gateway accepts and the payment options that are compatible with it.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "supportedOptions"
    )]
    pub supported_options: Vec<String>,
    /**
     * This object contains information about a payment method that the gateway accepts and the payment options that are compatible with it.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PaymentProcessorInformation {
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<AddressInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "billingAgreementId"
    )]
    pub billing_agreement_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PaymentSignerValues {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentOption"
    )]
    pub payment_option: String,
}

/// This object defines the account permissions for a profile that you can apply to a group of users.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PermissionProfile {
    /**
     * This object defines the account permissions for a profile that you can apply to a group of users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "modifiedByUsername"
    )]
    pub modified_by_username: String,
    /**
     * This object defines the account permissions for a profile that you can apply to a group of users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "modifiedDateTime"
    )]
    pub modified_date_time: String,
    /**
     * This object defines the account permissions for a profile that you can apply to a group of users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "permissionProfileId"
    )]
    pub permission_profile_id: String,
    /**
     * This object defines the account permissions for a profile that you can apply to a group of users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "permissionProfileName"
    )]
    pub permission_profile_name: String,
    /**
     * This object defines the account permissions for a profile that you can apply to a group of users.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<AccountRoleSettings>,
    /**
     * This object defines the account permissions for a profile that you can apply to a group of users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userCount"
    )]
    pub user_count: String,
    /**
     * This object defines the account permissions for a profile that you can apply to a group of users.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub users: Vec<UserInformation>,
}

/// Contains details about the permission profiles associated with an account.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PermissionProfileInformation {
    /**
     * Contains details about the permission profiles associated with an account.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "permissionProfiles"
    )]
    pub permission_profiles: Vec<PermissionProfile>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PhoneNumber {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "concealValueOnDocument"
    )]
    pub conceal_value_on_document: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "concealValueOnDocumentMetadata"
    )]
    pub conceal_value_on_document_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableAutoSize"
    )]
    pub disable_auto_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableAutoSizeMetadata"
    )]
    pub disable_auto_size_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxLength"
    )]
    pub max_length: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxLengthMetadata"
    )]
    pub max_length_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "originalValue"
    )]
    pub original_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "originalValueMetadata"
    )]
    pub original_value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// An object used to identify the features and attributes of the account being created.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PlanInformation {
    /**
     * An object used to identify the features and attributes of the account being created.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "addOns"
    )]
    pub add_ons: Vec<AddOn>,
    /**
     * An object used to identify the features and attributes of the account being created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currencyCode"
    )]
    pub currency_code: String,
    /**
     * An object used to identify the features and attributes of the account being created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "freeTrialDaysOverride"
    )]
    pub free_trial_days_override: String,
    /**
     * An object used to identify the features and attributes of the account being created.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "planFeatureSets"
    )]
    pub plan_feature_sets: Vec<FeatureSet>,
    /**
     * An object used to identify the features and attributes of the account being created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "planId"
    )]
    pub plan_id: String,
    /**
     * An object used to identify the features and attributes of the account being created.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientDomains"
    )]
    pub recipient_domains: Vec<RecipientDomain>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PolyLine {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "x1"
    )]
    pub x_1: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "x2"
    )]
    pub x_2: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "y1"
    )]
    pub y_1: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "y2"
    )]
    pub y_2: String,
}

/// This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PolyLineOverlay {
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "graphicsContext"
    )]
    pub graphics_context: Option<GraphicsContext>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "overlayType"
    )]
    pub overlay_type: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "overlayTypeMetadata"
    )]
    pub overlay_type_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "polyLines"
    )]
    pub poly_lines: Vec<PolyLine>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharedMetadata"
    )]
    pub shared_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * This tab enables users to strike through the text of a document. The tab is implemented as a line represented as a pair of x and y coordinates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// Contains details about a PowerForm.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PowerForm {
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdBy"
    )]
    pub created_by: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdDateTime"
    )]
    pub created_date_time: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailBody"
    )]
    pub email_body: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailSubject"
    )]
    pub email_subject: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub envelopes: Vec<Envelope>,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub instructions: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isActive"
    )]
    pub is_active: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastUsed"
    )]
    pub last_used: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "limitUseInterval"
    )]
    pub limit_use_interval: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "limitUseIntervalEnabled"
    )]
    pub limit_use_interval_enabled: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "limitUseIntervalUnits"
    )]
    pub limit_use_interval_units: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxUseEnabled"
    )]
    pub max_use_enabled: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "powerFormId"
    )]
    pub power_form_id: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "powerFormUrl"
    )]
    pub power_form_url: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub recipients: Vec<PowerFormRecipient>,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderName"
    )]
    pub sender_name: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderUserId"
    )]
    pub sender_user_id: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingMode"
    )]
    pub signing_mode: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateId"
    )]
    pub template_id: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateName"
    )]
    pub template_name: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "timesUsed"
    )]
    pub times_used: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uri: String,
    /**
     * Contains details about a PowerForm.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "usesRemaining"
    )]
    pub uses_remaining: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PowerFormDataEnvelope {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub recipients: Vec<PowerFormDataRecipient>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PowerFormDataRecipient {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "formData"
    )]
    pub form_data: Vec<NameValue>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
}

/// **Note**: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`), and omit personal details such as `email`.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PowerFormRecipient {
    /**
     * \*\*Note\*\*: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`), and omit personal details such as `email`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCode"
    )]
    pub access_code: String,
    /**
     * \*\*Note\*\*: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`), and omit personal details such as `email`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCodeLocked"
    )]
    pub access_code_locked: String,
    /**
     * \*\*Note\*\*: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`), and omit personal details such as `email`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCodeRequired"
    )]
    pub access_code_required: String,
    /**
     * \*\*Note\*\*: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`), and omit personal details such as `email`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * \*\*Note\*\*: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`), and omit personal details such as `email`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailLocked"
    )]
    pub email_locked: String,
    /**
     * \*\*Note\*\*: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`), and omit personal details such as `email`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idCheckConfigurationName"
    )]
    pub id_check_configuration_name: String,
    /**
     * \*\*Note\*\*: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`), and omit personal details such as `email`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idCheckRequired"
    )]
    pub id_check_required: String,
    /**
     * \*\*Note\*\*: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`), and omit personal details such as `email`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * \*\*Note\*\*: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`), and omit personal details such as `email`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientType"
    )]
    pub recipient_type: String,
    /**
     * \*\*Note\*\*: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`), and omit personal details such as `email`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "roleName"
    )]
    pub role_name: String,
    /**
     * \*\*Note\*\*: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`), and omit personal details such as `email`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "routingOrder"
    )]
    pub routing_order: String,
    /**
     * \*\*Note\*\*: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`), and omit personal details such as `email`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequiresIdLookup"
    )]
    pub template_requires_id_lookup: String,
    /**
     * \*\*Note\*\*: For a self-service PowerForm on a website, you can specify the intended recipients generically (for example, use `Member` as the `Name`), and omit personal details such as `email`.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userNameLocked"
    )]
    pub user_name_locked: String,
}

/// This object includes information about the users who have sent PowerForms.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PowerFormSendersResponse {
    /**
     * This object includes information about the users who have sent PowerForms.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "endPosition"
    )]
    pub end_position: i64,
    /**
     * This object includes information about the users who have sent PowerForms.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     * This object includes information about the users who have sent PowerForms.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "powerFormSenders"
    )]
    pub power_form_senders: Vec<UserInfo>,
    /**
     * This object includes information about the users who have sent PowerForms.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     * This object includes information about the users who have sent PowerForms.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: i64,
    /**
     * This object includes information about the users who have sent PowerForms.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "startPosition"
    )]
    pub start_position: i64,
    /**
     * This object includes information about the users who have sent PowerForms.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: i64,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PowerFormsFormDataResponse {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub envelopes: Vec<PowerFormDataEnvelope>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PowerFormsRequest {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "powerForms"
    )]
    pub power_forms: Vec<PowerForm>,
}

/// A list of PowerForms.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PowerFormsResponse {
    /**
     * A list of PowerForms.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "endPosition"
    )]
    pub end_position: i64,
    /**
     * A list of PowerForms.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     * A list of PowerForms.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "powerForms"
    )]
    pub power_forms: Vec<PowerForm>,
    /**
     * A list of PowerForms.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     * A list of PowerForms.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: i64,
    /**
     * A list of PowerForms.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "startPosition"
    )]
    pub start_position: i64,
    /**
     * A list of PowerForms.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: i64,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PrefillTabs {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "checkboxTabs"
    )]
    pub checkbox_tabs: Vec<Checkbox>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "radioGroupTabs"
    )]
    pub radio_group_tabs: Vec<RadioGroup>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroups"
    )]
    pub tab_groups: Vec<TabGroup>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "textTabs"
    )]
    pub text_tabs: Vec<Text>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ProofServiceResourceToken {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "proofBaseURI"
    )]
    pub proof_base_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resourceToken"
    )]
    pub resource_token: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ProofServiceViewLink {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "ViewLink"
    )]
    pub view_link: String,
}

/// Metadata about a property.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PropertyMetadata {
    /**
     * Metadata about a property.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub options: Vec<String>,
    /**
     * Metadata about a property.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub rights: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Province {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isoCode"
    )]
    pub iso_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ProvisioningInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "defaultConnectionId"
    )]
    pub default_connection_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "defaultPlanId"
    )]
    pub default_plan_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "distributorCode"
    )]
    pub distributor_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "distributorPassword"
    )]
    pub distributor_password: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordRuleText"
    )]
    pub password_rule_text: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "planPromotionText"
    )]
    pub plan_promotion_text: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "purchaseOrderOrPromAllowed"
    )]
    pub purchase_order_or_prom_allowed: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct PurchasedEnvelopesInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub amount: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "appName"
    )]
    pub app_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currencyCode"
    )]
    pub currency_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub platform: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "productId"
    )]
    pub product_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub quantity: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "receiptData"
    )]
    pub receipt_data: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "storeName"
    )]
    pub store_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "transactionId"
    )]
    pub transaction_id: String,
}

/// One of the selectable radio buttons
/// in the `radios` property
/// of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Radio {
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub selected: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "selectedMetadata"
    )]
    pub selected_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * One of the selectable radio buttons
     *  in the `radios` property
     *  of a [`radioGroup`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/) tab.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// This group tab is used to place radio buttons on a document.
/// The `radios` property
/// contains a list of
/// [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
/// objects  associated with the group. Only one radio button can
/// be selected in a group.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RadioGroup {
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupName"
    )]
    pub group_name: String,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "groupNameMetadata"
    )]
    pub group_name_metadata: Option<PropertyMetadata>,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub radios: Vec<Radio>,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireAll"
    )]
    pub require_all: String,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireAllMetadata"
    )]
    pub require_all_metadata: Option<PropertyMetadata>,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireInitialOnSharedChange"
    )]
    pub require_initial_on_shared_change: String,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireInitialOnSharedChangeMetadata"
    )]
    pub require_initial_on_shared_change_metadata: Option<PropertyMetadata>,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharedMetadata"
    )]
    pub shared_metadata: Option<PropertyMetadata>,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * This group tab is used to place radio buttons on a document.
     *  The `radios` property
     *  contains a list of
     *  [`radio`](https://developers.docusign.com/docs/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/)
     *  objects  associated with the group. Only one radio button can
     *  be selected in a group.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tooltipMetadata"
    )]
    pub tooltip_metadata: Option<PropertyMetadata>,
}

/// Describes an additional notification method.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientAdditionalNotification {
    /**
     * Describes an additional notification method.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phoneNumber"
    )]
    pub phone_number: Option<RecipientPhoneNumber>,
    /**
     * Describes an additional notification method.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "secondaryDeliveryMethod"
    )]
    pub secondary_delivery_method: String,
    /**
     * Describes an additional notification method.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secondaryDeliveryMethodMetadata"
    )]
    pub secondary_delivery_method_metadata: Option<PropertyMetadata>,
    /**
     * Describes an additional notification method.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "secondaryDeliveryStatus"
    )]
    pub secondary_delivery_status: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientAttachment {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "attachmentId"
    )]
    pub attachment_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "attachmentType"
    )]
    pub attachment_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub data: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "remoteUrl"
    )]
    pub remote_url: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientDomain {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub active: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "domainCode"
    )]
    pub domain_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "domainName"
    )]
    pub domain_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientDomainId"
    )]
    pub recipient_domain_id: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientEmailNotification {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailBody"
    )]
    pub email_body: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailBodyMetadata"
    )]
    pub email_body_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "emailSubject"
    )]
    pub email_subject: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailSubjectMetadata"
    )]
    pub email_subject_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "supportedLanguage"
    )]
    pub supported_language: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supportedLanguageMetadata"
    )]
    pub supported_language_metadata: Option<PropertyMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientEvent {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includeDocuments"
    )]
    pub include_documents: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientEventStatusCode"
    )]
    pub recipient_event_status_code: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientFormData {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "DeclinedTime"
    )]
    pub declined_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "DeliveredTime"
    )]
    pub delivered_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "SentTime"
    )]
    pub sent_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "SignedTime"
    )]
    pub signed_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "formData"
    )]
    pub form_data: Vec<FormDataItem>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
}

/// Describes a group of recipients.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientGroup {
    /**
     * Describes a group of recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupMessage"
    )]
    pub group_message: String,
    /**
     * Describes a group of recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupName"
    )]
    pub group_name: String,
    /**
     * Describes a group of recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub recipients: Vec<RecipientOption>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientIdentityInputOption {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "phoneNumberList"
    )]
    pub phone_number_list: Vec<RecipientIdentityPhoneNumber>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "valueType"
    )]
    pub value_type: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientIdentityPhoneNumber {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
}

/// Specifies ID Verification applied on an envelope by workflow ID.
/// See the [list](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications/list)
/// method in the [IdentityVerifications](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications) resource
/// for more information on how to retrieve workflow IDs available for an account.
/// This can be used in addition to other [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientIdentityVerification {
    /**
     * Specifies ID Verification applied on an envelope by workflow ID.
     *  See the [list](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications/list)
     *  method in the [IdentityVerifications](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications) resource
     *  for more information on how to retrieve workflow IDs available for an account.
     *  This can be used in addition to other [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "inputOptions"
    )]
    pub input_options: Vec<RecipientIdentityInputOption>,
    /**
     * Specifies ID Verification applied on an envelope by workflow ID.
     *  See the [list](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications/list)
     *  method in the [IdentityVerifications](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications) resource
     *  for more information on how to retrieve workflow IDs available for an account.
     *  This can be used in addition to other [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workflowId"
    )]
    pub workflow_id: String,
}

/// This response object contains a list of recipients.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientNamesResponse {
    /**
     * This response object contains a list of recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "multipleUsers"
    )]
    pub multiple_users: String,
    /**
     * This response object contains a list of recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientNames"
    )]
    pub recipient_names: Vec<String>,
    /**
     * This response object contains a list of recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reservedRecipientEmail"
    )]
    pub reserved_recipient_email: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientOption {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientLabel"
    )]
    pub recipient_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "roleName"
    )]
    pub role_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupId"
    )]
    pub signing_group_id: String,
}

/// A complex type that contains the elements:
///
/// * `recipMayProvideNumber`: A Boolean value that specifies whether the recipient can use the phone number of their choice.
/// * `senderProvidedNumbers`: A list of phone numbers that the recipient can use.
/// * `recordVoicePrint`: Reserved for DocuSign.
/// * `validateRecipProvidedNumber`: Reserved for DocuSign.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientPhoneAuthentication {
    /**
     * A complex type that contains the elements:
     *  
     *  \* `recipMayProvideNumber`: A Boolean value that specifies whether the recipient can use the phone number of their choice.
     *  \* `senderProvidedNumbers`: A list of phone numbers that the recipient can use.
     *  \* `recordVoicePrint`: Reserved for DocuSign.
     *  \* `validateRecipProvidedNumber`: Reserved for DocuSign.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipMayProvideNumber"
    )]
    pub recip_may_provide_number: String,
    /**
     * A complex type that contains the elements:
     *  
     *  \* `recipMayProvideNumber`: A Boolean value that specifies whether the recipient can use the phone number of their choice.
     *  \* `senderProvidedNumbers`: A list of phone numbers that the recipient can use.
     *  \* `recordVoicePrint`: Reserved for DocuSign.
     *  \* `validateRecipProvidedNumber`: Reserved for DocuSign.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipMayProvideNumberMetadata"
    )]
    pub recip_may_provide_number_metadata: Option<PropertyMetadata>,
    /**
     * A complex type that contains the elements:
     *  
     *  \* `recipMayProvideNumber`: A Boolean value that specifies whether the recipient can use the phone number of their choice.
     *  \* `senderProvidedNumbers`: A list of phone numbers that the recipient can use.
     *  \* `recordVoicePrint`: Reserved for DocuSign.
     *  \* `validateRecipProvidedNumber`: Reserved for DocuSign.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recordVoicePrint"
    )]
    pub record_voice_print: String,
    /**
     * A complex type that contains the elements:
     *  
     *  \* `recipMayProvideNumber`: A Boolean value that specifies whether the recipient can use the phone number of their choice.
     *  \* `senderProvidedNumbers`: A list of phone numbers that the recipient can use.
     *  \* `recordVoicePrint`: Reserved for DocuSign.
     *  \* `validateRecipProvidedNumber`: Reserved for DocuSign.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordVoicePrintMetadata"
    )]
    pub record_voice_print_metadata: Option<PropertyMetadata>,
    /**
     * A complex type that contains the elements:
     *  
     *  \* `recipMayProvideNumber`: A Boolean value that specifies whether the recipient can use the phone number of their choice.
     *  \* `senderProvidedNumbers`: A list of phone numbers that the recipient can use.
     *  \* `recordVoicePrint`: Reserved for DocuSign.
     *  \* `validateRecipProvidedNumber`: Reserved for DocuSign.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "senderProvidedNumbers"
    )]
    pub sender_provided_numbers: Vec<String>,
    /**
     * A complex type that contains the elements:
     *  
     *  \* `recipMayProvideNumber`: A Boolean value that specifies whether the recipient can use the phone number of their choice.
     *  \* `senderProvidedNumbers`: A list of phone numbers that the recipient can use.
     *  \* `recordVoicePrint`: Reserved for DocuSign.
     *  \* `validateRecipProvidedNumber`: Reserved for DocuSign.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "senderProvidedNumbersMetadata"
    )]
    pub sender_provided_numbers_metadata: Option<PropertyMetadata>,
    /**
     * A complex type that contains the elements:
     *  
     *  \* `recipMayProvideNumber`: A Boolean value that specifies whether the recipient can use the phone number of their choice.
     *  \* `senderProvidedNumbers`: A list of phone numbers that the recipient can use.
     *  \* `recordVoicePrint`: Reserved for DocuSign.
     *  \* `validateRecipProvidedNumber`: Reserved for DocuSign.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validateRecipProvidedNumber"
    )]
    pub validate_recip_provided_number: String,
    /**
     * A complex type that contains the elements:
     *  
     *  \* `recipMayProvideNumber`: A Boolean value that specifies whether the recipient can use the phone number of their choice.
     *  \* `senderProvidedNumbers`: A list of phone numbers that the recipient can use.
     *  \* `recordVoicePrint`: Reserved for DocuSign.
     *  \* `validateRecipProvidedNumber`: Reserved for DocuSign.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validateRecipProvidedNumberMetadata"
    )]
    pub validate_recip_provided_number_metadata: Option<PropertyMetadata>,
}

/// Describes the recipient phone number.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientPhoneNumber {
    /**
     * Describes the recipient phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "countryCode"
    )]
    pub country_code: String,
    /**
     * Describes the recipient phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "countryCodeMetadata"
    )]
    pub country_code_metadata: Option<PropertyMetadata>,
    /**
     * Describes the recipient phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub number: String,
    /**
     * Describes the recipient phone number.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numberMetadata"
    )]
    pub number_metadata: Option<PropertyMetadata>,
}

/// This request object contains the information necessary to create a recipient preview.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientPreviewRequest {
    /**
     * This request object contains the information necessary to create a recipient preview.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "assertionId"
    )]
    pub assertion_id: String,
    /**
     * This request object contains the information necessary to create a recipient preview.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authenticationInstant"
    )]
    pub authentication_instant: String,
    /**
     * This request object contains the information necessary to create a recipient preview.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authenticationMethod"
    )]
    pub authentication_method: String,
    /**
     * This request object contains the information necessary to create a recipient preview.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pingFrequency"
    )]
    pub ping_frequency: String,
    /**
     * This request object contains the information necessary to create a recipient preview.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pingUrl"
    )]
    pub ping_url: String,
    /**
     * This request object contains the information necessary to create a recipient preview.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * This request object contains the information necessary to create a recipient preview.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "returnUrl"
    )]
    pub return_url: String,
    /**
     * This request object contains the information necessary to create a recipient preview.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "securityDomain"
    )]
    pub security_domain: String,
    /**
     * This request object contains the information necessary to create a recipient preview.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xFrameOptions"
    )]
    pub x_frame_options: String,
    /**
     * This request object contains the information necessary to create a recipient preview.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xFrameOptionsAllowFromUrl"
    )]
    pub x_frame_options_allow_from_url: String,
}

/// The proof file of the recipient. [ID Evidence](https://developers.docusign.com/idevidence-api) uses proof files to store the identification data that recipients submit when verifying their ID with [ID Verification](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications)
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientProofFile {
    /**
     * The proof file of the recipient. [ID Evidence](https://developers.docusign.com/idevidence-api) uses proof files to store the identification data that recipients submit when verifying their ID with [ID Verification](https://developers.docusign.com/docs/esign-rest-api/reference/Accounts/IdentityVerifications)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isInProofFile"
    )]
    pub is_in_proof_file: String,
}

/// Describes the recipient routing rules.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientRouting {
    /**
     * Describes the recipient routing rules.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rules: Option<RecipientRules>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientRules {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "conditionalRecipients"
    )]
    pub conditional_recipients: Vec<ConditionalRecipientRule>,
}

/// Contains the element senderProvidedNumbers which is an Array  of phone numbers the recipient can use for SMS text authentication.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientSmsAuthentication {
    /**
     * Contains the element senderProvidedNumbers which is an Array  of phone numbers the recipient can use for SMS text authentication.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "senderProvidedNumbers"
    )]
    pub sender_provided_numbers: Vec<String>,
    /**
     * Contains the element senderProvidedNumbers which is an Array  of phone numbers the recipient can use for SMS text authentication.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "senderProvidedNumbersMetadata"
    )]
    pub sender_provided_numbers_metadata: Option<PropertyMetadata>,
}

/// Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.
///
/// Used only with recipient types In Person Signers and Signers.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientSignatureInformation {
    /**
     * Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.
     *  
     *  Used only with recipient types In Person Signers and Signers.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontStyle"
    )]
    pub font_style: String,
    /**
     * Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.
     *  
     *  Used only with recipient types In Person Signers and Signers.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureInitials"
    )]
    pub signature_initials: String,
    /**
     * Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.
     *  
     *  Used only with recipient types In Person Signers and Signers.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureName"
    )]
    pub signature_name: String,
}

/// An Electronic or Standards Based Signature (digital signature) provider for the signer to use. [More information](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientSignatureProvider {
    /**
     * An Electronic or Standards Based Signature (digital signature) provider for the signer to use. [More information](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sealDocumentsWithTabsOnly"
    )]
    pub seal_documents_with_tabs_only: String,
    /**
     * An Electronic or Standards Based Signature (digital signature) provider for the signer to use. [More information](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sealName"
    )]
    pub seal_name: String,
    /**
     * An Electronic or Standards Based Signature (digital signature) provider for the signer to use. [More information](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureProviderName"
    )]
    pub signature_provider_name: String,
    /**
     * An Electronic or Standards Based Signature (digital signature) provider for the signer to use. [More information](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signatureProviderNameMetadata"
    )]
    pub signature_provider_name_metadata: Option<PropertyMetadata>,
    /**
     * An Electronic or Standards Based Signature (digital signature) provider for the signer to use. [More information](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signatureProviderOptions"
    )]
    pub signature_provider_options: Option<RecipientSignatureProviderOptions>,
}

/// Option settings for the signature provider. Different providers require or use different options. [The current provider list and the options they require.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientSignatureProviderOptions {
    /**
     * Option settings for the signature provider. Different providers require or use different options. [The current provider list and the options they require.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "cpfNumber"
    )]
    pub cpf_number: String,
    /**
     * Option settings for the signature provider. Different providers require or use different options. [The current provider list and the options they require.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cpfNumberMetadata"
    )]
    pub cpf_number_metadata: Option<PropertyMetadata>,
    /**
     * Option settings for the signature provider. Different providers require or use different options. [The current provider list and the options they require.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "oneTimePassword"
    )]
    pub one_time_password: String,
    /**
     * Option settings for the signature provider. Different providers require or use different options. [The current provider list and the options they require.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "oneTimePasswordMetadata"
    )]
    pub one_time_password_metadata: Option<PropertyMetadata>,
    /**
     * Option settings for the signature provider. Different providers require or use different options. [The current provider list and the options they require.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerRole"
    )]
    pub signer_role: String,
    /**
     * Option settings for the signature provider. Different providers require or use different options. [The current provider list and the options they require.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signerRoleMetadata"
    )]
    pub signer_role_metadata: Option<PropertyMetadata>,
    /**
     * Option settings for the signature provider. Different providers require or use different options. [The current provider list and the options they require.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sms: String,
    /**
     * Option settings for the signature provider. Different providers require or use different options. [The current provider list and the options they require.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smsMetadata"
    )]
    pub sms_metadata: Option<PropertyMetadata>,
}

/// The recipient details that are returned after you update the recipient.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientUpdateResponse {
    /**
     * The recipient details that are returned after you update the recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub combined: String,
    /**
     * The recipient details that are returned after you update the recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * The recipient details that are returned after you update the recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * The recipient details that are returned after you update the recipient.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * The recipient details that are returned after you update the recipient.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tabs: Option<EnvelopeRecipientTabs>,
}

/// The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientViewRequest {
    /**
     * The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "assertionId"
    )]
    pub assertion_id: String,
    /**
     * The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authenticationInstant"
    )]
    pub authentication_instant: String,
    /**
     * The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authenticationMethod"
    )]
    pub authentication_method: String,
    /**
     * The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "clientUserId"
    )]
    pub client_user_id: String,
    /**
     * The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "frameAncestors"
    )]
    pub frame_ancestors: Vec<String>,
    /**
     * The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "messageOrigins"
    )]
    pub message_origins: Vec<String>,
    /**
     * The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pingFrequency"
    )]
    pub ping_frequency: String,
    /**
     * The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pingUrl"
    )]
    pub ping_url: String,
    /**
     * The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "returnUrl"
    )]
    pub return_url: String,
    /**
     * The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "securityDomain"
    )]
    pub security_domain: String,
    /**
     * The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
    /**
     * The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userName"
    )]
    pub user_name: String,
    /**
     * The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xFrameOptions"
    )]
    pub x_frame_options: String,
    /**
     * The request body for the EnvelopeViews::createRecipient and EnvelopeViews::createSharedRecipient methods.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xFrameOptionsAllowFromUrl"
    )]
    pub x_frame_options_allow_from_url: String,
}

/// Specifies the envelope recipients.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Recipients {
    /**
     * Specifies the envelope recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub agents: Vec<Agent>,
    /**
     * Specifies the envelope recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "carbonCopies"
    )]
    pub carbon_copies: Vec<CarbonCopy>,
    /**
     * Specifies the envelope recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "certifiedDeliveries"
    )]
    pub certified_deliveries: Vec<CertifiedDelivery>,
    /**
     * Specifies the envelope recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currentRoutingOrder"
    )]
    pub current_routing_order: String,
    /**
     * Specifies the envelope recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub editors: Vec<Editor>,
    /**
     * Specifies the envelope recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Specifies the envelope recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "inPersonSigners"
    )]
    pub in_person_signers: Vec<InPersonSigner>,
    /**
     * Specifies the envelope recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub intermediaries: Vec<Intermediary>,
    /**
     * Specifies the envelope recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub notaries: Vec<NotaryRecipient>,
    /**
     * Specifies the envelope recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientCount"
    )]
    pub recipient_count: String,
    /**
     * Specifies the envelope recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub seals: Vec<SealSign>,
    /**
     * Specifies the envelope recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub signers: Vec<Signer>,
    /**
     * Specifies the envelope recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub witnesses: Vec<Witness>,
}

/// This is the response that the API returns after you update recipients.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct RecipientsUpdateSummary {
    /**
     * This is the response that the API returns after you update recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientUpdateResults"
    )]
    pub recipient_update_results: Vec<RecipientUpdateResponse>,
}

/// A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
///
/// **Note**: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ReferralInformation {
    /**
     * A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
     *  
     *  \*\*Note\*\*: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "advertisementId"
    )]
    pub advertisement_id: String,
    /**
     * A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
     *  
     *  \*\*Note\*\*: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSupport"
    )]
    pub enable_support: String,
    /**
     * A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
     *  
     *  \*\*Note\*\*: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalOrgId"
    )]
    pub external_org_id: String,
    /**
     * A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
     *  
     *  \*\*Note\*\*: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupMemberId"
    )]
    pub group_member_id: String,
    /**
     * A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
     *  
     *  \*\*Note\*\*: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idType"
    )]
    pub id_type: String,
    /**
     * A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
     *  
     *  \*\*Note\*\*: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includedSeats"
    )]
    pub included_seats: String,
    /**
     * A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
     *  
     *  \*\*Note\*\*: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub industry: String,
    /**
     * A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
     *  
     *  \*\*Note\*\*: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "planStartMonth"
    )]
    pub plan_start_month: String,
    /**
     * A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
     *  
     *  \*\*Note\*\*: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "promoCode"
    )]
    pub promo_code: String,
    /**
     * A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
     *  
     *  \*\*Note\*\*: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "publisherId"
    )]
    pub publisher_id: String,
    /**
     * A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
     *  
     *  \*\*Note\*\*: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "referralCode"
    )]
    pub referral_code: String,
    /**
     * A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
     *  
     *  \*\*Note\*\*: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "referrerName"
    )]
    pub referrer_name: String,
    /**
     * A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
     *  
     *  \*\*Note\*\*: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "saleDiscountAmount"
    )]
    pub sale_discount_amount: String,
    /**
     * A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
     *  
     *  \*\*Note\*\*: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "saleDiscountFixedAmount"
    )]
    pub sale_discount_fixed_amount: String,
    /**
     * A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
     *  
     *  \*\*Note\*\*: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "saleDiscountPercent"
    )]
    pub sale_discount_percent: String,
    /**
     * A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
     *  
     *  \*\*Note\*\*: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "saleDiscountPeriods"
    )]
    pub sale_discount_periods: String,
    /**
     * A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
     *  
     *  \*\*Note\*\*: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "saleDiscountSeatPriceOverride"
    )]
    pub sale_discount_seat_price_override: String,
    /**
     * A complex type that contains the following information for entering referral and discount information. The following items are included in the referral information (all string content): enableSupport, includedSeats, saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, saleDiscountSeatPriceOverride, planStartMonth, referralCode, referrerName, advertisementId, publisherId, shopperId, promoCode, groupMemberId, idType, and industry
     *  
     *  \*\*Note\*\*: saleDiscountPercent, saleDiscountAmount, saleDiscountFixedAmount, saleDiscountPeriods, and saleDiscountSeatPriceOverride are reserved for DoucSign use only.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "shopperId"
    )]
    pub shopper_id: String,
}

/// A complex element that specifies reminder settings for the envelope.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Reminders {
    /**
     * A complex element that specifies reminder settings for the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reminderDelay"
    )]
    pub reminder_delay: String,
    /**
     * A complex element that specifies reminder settings for the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reminderEnabled"
    )]
    pub reminder_enabled: String,
    /**
     * A complex element that specifies reminder settings for the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reminderFrequency"
    )]
    pub reminder_frequency: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ReportInProductCsvRunRequest {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customFieldFilter"
    )]
    pub custom_field_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "dateRangeCustomFromDate"
    )]
    pub date_range_custom_from_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "dateRangeCustomToDate"
    )]
    pub date_range_custom_to_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "dateRangeFilter"
    )]
    pub date_range_filter: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeDateTypeFilter"
    )]
    pub envelope_date_type_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeRecipientNameContainsFilter"
    )]
    pub envelope_recipient_name_contains_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeStatusFilter"
    )]
    pub envelope_status_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeSubjectContainsFilter"
    )]
    pub envelope_subject_contains_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub fields: Vec<ReportInProductField>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "forDownload"
    )]
    pub for_download: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDashboard"
    )]
    pub is_dashboard: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "newLine"
    )]
    pub new_line: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "overrideTimezoneKey"
    )]
    pub override_timezone_key: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "periodLengthFilter"
    )]
    pub period_length_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub quote: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportCustomizedId"
    )]
    pub report_customized_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportDescription"
    )]
    pub report_description: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportId"
    )]
    pub report_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportInvocationType"
    )]
    pub report_invocation_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportName"
    )]
    pub report_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentByFilter"
    )]
    pub sent_by_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentByIds"
    )]
    pub sent_by_ids: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub separator: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sortDirection"
    )]
    pub sort_direction: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sortField"
    )]
    pub sort_field: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ReportInProductField {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayOrder"
    )]
    pub display_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fieldVersion"
    )]
    pub field_version: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub selected: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ReportInProductGet {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customFieldFilter"
    )]
    pub custom_field_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "dateRangeCustomFromDate"
    )]
    pub date_range_custom_from_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "dateRangeCustomToDate"
    )]
    pub date_range_custom_to_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "dateRangeFilter"
    )]
    pub date_range_filter: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayOrder"
    )]
    pub display_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeDateTypeFilter"
    )]
    pub envelope_date_type_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeRecipientNameContainsFilter"
    )]
    pub envelope_recipient_name_contains_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeStatusFilter"
    )]
    pub envelope_status_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeSubjectContainsFilter"
    )]
    pub envelope_subject_contains_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub fields: Vec<ReportInProductField>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "lastScheduledExecutionDate"
    )]
    pub last_scheduled_execution_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "lastScheduledExecutionSuccessDate"
    )]
    pub last_scheduled_execution_success_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxDownloadRows"
    )]
    pub max_download_rows: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxGridRows"
    )]
    pub max_grid_rows: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxScheduledRows"
    )]
    pub max_scheduled_rows: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "periodLengthFilter"
    )]
    pub period_length_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportCustomizedId"
    )]
    pub report_customized_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportDescription"
    )]
    pub report_description: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportId"
    )]
    pub report_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportName"
    )]
    pub report_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportType"
    )]
    pub report_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "runUri"
    )]
    pub run_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "saveUri"
    )]
    pub save_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "scheduleId"
    )]
    pub schedule_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sentByDetails"
    )]
    pub sent_by_details: Option<ReportInProductSentByDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentByFilter"
    )]
    pub sent_by_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentByIds"
    )]
    pub sent_by_ids: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sortFieldDirection"
    )]
    pub sort_field_direction: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sortFieldName"
    )]
    pub sort_field_name: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ReportInProductList {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub reports: Vec<ReportInProductListItem>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ReportInProductListItem {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "getUri"
    )]
    pub get_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "lastScheduledExecutionDate"
    )]
    pub last_scheduled_execution_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "lastScheduledExecutionSuccessDate"
    )]
    pub last_scheduled_execution_success_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportCustomizedId"
    )]
    pub report_customized_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportDescription"
    )]
    pub report_description: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportId"
    )]
    pub report_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportName"
    )]
    pub report_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportType"
    )]
    pub report_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "runUri"
    )]
    pub run_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "saveUri"
    )]
    pub save_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "scheduleCreateDate"
    )]
    pub schedule_create_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "scheduleEndDate"
    )]
    pub schedule_end_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "scheduleId"
    )]
    pub schedule_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "scheduleRenewDurationDays"
    )]
    pub schedule_renew_duration_days: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ReportInProductRunRequest {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customFieldFilter"
    )]
    pub custom_field_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "dateRangeCustomFromDate"
    )]
    pub date_range_custom_from_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "dateRangeCustomToDate"
    )]
    pub date_range_custom_to_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "dateRangeFilter"
    )]
    pub date_range_filter: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeDateTypeFilter"
    )]
    pub envelope_date_type_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeRecipientNameContainsFilter"
    )]
    pub envelope_recipient_name_contains_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeStatusFilter"
    )]
    pub envelope_status_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeSubjectContainsFilter"
    )]
    pub envelope_subject_contains_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub fields: Vec<ReportInProductField>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "forDownload"
    )]
    pub for_download: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDashboard"
    )]
    pub is_dashboard: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "periodLengthFilter"
    )]
    pub period_length_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportCustomizedId"
    )]
    pub report_customized_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportDescription"
    )]
    pub report_description: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportId"
    )]
    pub report_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportInvocationType"
    )]
    pub report_invocation_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportName"
    )]
    pub report_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentByFilter"
    )]
    pub sent_by_filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentByIds"
    )]
    pub sent_by_ids: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sortDirection"
    )]
    pub sort_direction: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sortField"
    )]
    pub sort_field: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ReportInProductRunResponse {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "exceededMaxResults"
    )]
    pub exceeded_max_results: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastWarehouseRefreshDateTime"
    )]
    pub last_warehouse_refresh_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub rows: Vec<ReportInProductRunResponseRow>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ReportInProductRunResponseRow {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<ReportInProductRunResponseRowFields>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ReportInProductRunResponseRowFields {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCodeRequired"
    )]
    pub access_code_required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCodesAttempted"
    )]
    pub access_codes_attempted: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCodesFailed"
    )]
    pub access_codes_failed: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountId"
    )]
    pub account_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authenticationCategory"
    )]
    pub authentication_category: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authenticationSuccess"
    )]
    pub authentication_success: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "authenticationType"
    )]
    pub authentication_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "averageTimeToCompleteSeconds"
    )]
    pub average_time_to_complete_seconds: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "avgCompleteSeconds"
    )]
    pub avg_complete_seconds: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub completed: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "completedTs"
    )]
    pub completed_ts: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "createdDate"
    )]
    pub created_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customField"
    )]
    pub custom_field: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "declinedDate"
    )]
    pub declined_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedReason"
    )]
    pub declined_reason: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "deliveredDate"
    )]
    pub delivered_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeCount"
    )]
    pub envelope_count: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeCreator"
    )]
    pub envelope_creator: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeInitialSendTs"
    )]
    pub envelope_initial_send_ts: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeVoidedReason"
    )]
    pub envelope_voided_reason: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopesBilled"
    )]
    pub envelopes_billed: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopesCompleted"
    )]
    pub envelopes_completed: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopesCompletedCount"
    )]
    pub envelopes_completed_count: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopesDeclined"
    )]
    pub envelopes_declined: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopesSent"
    )]
    pub envelopes_sent: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopesSentCount"
    )]
    pub envelopes_sent_count: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopesVoided"
    )]
    pub envelopes_voided: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "eodDocumentDescription"
    )]
    pub eod_document_description: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "eodDocumentName"
    )]
    pub eod_document_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "eodDocumentProfileId"
    )]
    pub eod_document_profile_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "eodTransactionId"
    )]
    pub eod_transaction_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "eodTransactionName"
    )]
    pub eod_transaction_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "eventDate"
    )]
    pub event_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "expirationDate"
    )]
    pub expiration_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expiredTs"
    )]
    pub expired_ts: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "failureVendorCode"
    )]
    pub failure_vendor_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "failureVendorReason"
    )]
    pub failure_vendor_reason: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub failures: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "firstSendTs"
    )]
    pub first_send_ts: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupId"
    )]
    pub group_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupName"
    )]
    pub group_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hoursToCompleteEnd"
    )]
    pub hours_to_complete_end: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "hoursToCompleteStart"
    )]
    pub hours_to_complete_start: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idChecksAttempted"
    )]
    pub id_checks_attempted: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idChecksFailed"
    )]
    pub id_checks_failed: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initialSendTs"
    )]
    pub initial_send_ts: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "ipAddress"
    )]
    pub ip_address: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastActivity"
    )]
    pub last_activity: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "lastActivityDate"
    )]
    pub last_activity_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "lastSentDate"
    )]
    pub last_sent_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "notSigned"
    )]
    pub not_signed: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "numberOfAuthenticatedRecipients"
    )]
    pub number_of_authenticated_recipients: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "numberOfCompletedSignatures"
    )]
    pub number_of_completed_signatures: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "numberOfDocuments"
    )]
    pub number_of_documents: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "numberOfPages"
    )]
    pub number_of_pages: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "numberOfRecipients"
    )]
    pub number_of_recipients: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "numberOfSends"
    )]
    pub number_of_sends: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "numberOfSigners"
    )]
    pub number_of_signers: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "numberOfTotalDocuments"
    )]
    pub number_of_total_documents: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "numberOfTotalPages"
    )]
    pub number_of_total_pages: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "numberOfTotalSigners"
    )]
    pub number_of_total_signers: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "numberOfUniqueSenders"
    )]
    pub number_of_unique_senders: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "numberTotalRecipients"
    )]
    pub number_total_recipients: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "periodEnd"
    )]
    pub period_end: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "periodStart"
    )]
    pub period_start: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "phoneCallsAttempted"
    )]
    pub phone_calls_attempted: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "phoneCallsFailed"
    )]
    pub phone_calls_failed: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reasonForDeclining"
    )]
    pub reason_for_declining: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reasonForVoiding"
    )]
    pub reason_for_voiding: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reassignReason"
    )]
    pub reassign_reason: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub received: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub recipient: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientAction"
    )]
    pub recipient_action: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientCompanyName"
    )]
    pub recipient_company_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientCountry"
    )]
    pub recipient_country: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientEmail"
    )]
    pub recipient_email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientName"
    )]
    pub recipient_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientTemplateRoleName"
    )]
    pub recipient_template_role_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientTitle"
    )]
    pub recipient_title: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientType"
    )]
    pub recipient_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientUserId"
    )]
    pub recipient_user_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "remainingSignatures"
    )]
    pub remaining_signatures: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "routingOrder"
    )]
    pub routing_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderAccountId"
    )]
    pub sender_account_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderCompanyName"
    )]
    pub sender_company_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderCountry"
    )]
    pub sender_country: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderEmail"
    )]
    pub sender_email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderIPAddress"
    )]
    pub sender_ip_address: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderJobTitle"
    )]
    pub sender_job_title: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderName"
    )]
    pub sender_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderUserId"
    )]
    pub sender_user_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "signDate"
    )]
    pub sign_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub signed: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "signedDate"
    )]
    pub signed_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signedOnMobile"
    )]
    pub signed_on_mobile: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signedOnPaper"
    )]
    pub signed_on_paper: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerList"
    )]
    pub signer_list: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "statusChangedDate"
    )]
    pub status_changed_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusChangedTs"
    )]
    pub status_changed_ts: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub subject: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub successes: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templatesCreated"
    )]
    pub templates_created: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templatesCreatedCount"
    )]
    pub templates_created_count: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "terminalStatusDate"
    )]
    pub terminal_status_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "timeToCompleteSeconds"
    )]
    pub time_to_complete_seconds: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "timeToDeliver"
    )]
    pub time_to_deliver: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalDocuments"
    )]
    pub total_documents: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalEnvelopes"
    )]
    pub total_envelopes: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalPages"
    )]
    pub total_pages: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalRecipients"
    )]
    pub total_recipients: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSigners"
    )]
    pub total_signers: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "uniqueSenders"
    )]
    pub unique_senders: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userAccountEmail"
    )]
    pub user_account_email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userAccountName"
    )]
    pub user_account_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userAccountStatus"
    )]
    pub user_account_status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userCount"
    )]
    pub user_count: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "viewDate"
    )]
    pub view_date: Option<chrono::NaiveDate>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "voidedTs"
    )]
    pub voided_ts: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ReportInProductSaveResponse {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reportCustomizedId"
    )]
    pub report_customized_id: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ReportInProductSentByDetails {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub groups: Vec<Group>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub users: Vec<UserInfo>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ResourceInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub resources: Vec<NameValue>,
}

/// The request body for the EnvelopeViews::createSender method.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ReturnUrlRequest {
    /**
     * The request body for the EnvelopeViews::createSender method.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "returnUrl"
    )]
    pub return_url: String,
}

/// Set of information related to the electronic seal used by the Trust Service Provider (TSP).
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Seal {
    /**
     * Set of information related to the electronic seal used by the Trust Service Provider (TSP).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub configuration: String,
    /**
     * Set of information related to the electronic seal used by the Trust Service Provider (TSP).
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sealIdentifier"
    )]
    pub seal_identifier: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SealIdentifier {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sealDisplayName"
    )]
    pub seal_display_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sealName"
    )]
    pub seal_name: String,
}

/// Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
///
/// Example:
///
/// ```json
/// "recipients": {
///       "seals": [
///         {
///           "recipientId": "1",
///           "routingOrder" : 1,
///           "recipientSignatureProviders": [
///             {
///               "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
///             }
///       	]
///     	}
///   	]
/// 	},
///     .
///     .
///     .
/// ```
/// For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SealSign {
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCode"
    )]
    pub access_code: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessCodeMetadata"
    )]
    pub access_code_metadata: Option<PropertyMetadata>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "addAccessCodeToEmail"
    )]
    pub add_access_code_to_email: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSystemOverrideForLockedRecipient"
    )]
    pub allow_system_override_for_locked_recipient: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "clientUserId"
    )]
    pub client_user_id: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "completedCount"
    )]
    pub completed_count: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "customFields"
    )]
    pub custom_fields: Vec<String>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedDateTime"
    )]
    pub declined_date_time: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedReason"
    )]
    pub declined_reason: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveredDateTime"
    )]
    pub delivered_date_time: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveryMethod"
    )]
    pub delivery_method: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryMethodMetadata"
    )]
    pub delivery_method_metadata: Option<PropertyMetadata>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorId"
    )]
    pub designator_id: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorIdGuid"
    )]
    pub designator_id_guid: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentVisibility"
    )]
    pub document_visibility: Vec<DocumentVisibility>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailNotification"
    )]
    pub email_notification: Option<RecipientEmailNotification>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "embeddedRecipientStartURL"
    )]
    pub embedded_recipient_start_url: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "faxNumber"
    )]
    pub fax_number: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "faxNumberMetadata"
    )]
    pub fax_number_metadata: Option<PropertyMetadata>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idCheckConfigurationName"
    )]
    pub id_check_configuration_name: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckConfigurationNameMetadata"
    )]
    pub id_check_configuration_name_metadata: Option<PropertyMetadata>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckInformationInput"
    )]
    pub id_check_information_input: Option<IdCheckInformationInput>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityVerification"
    )]
    pub identity_verification: Option<RecipientIdentityVerification>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "inheritEmailNotificationConfiguration"
    )]
    pub inherit_email_notification_configuration: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientPhoneAuthEditable"
    )]
    pub locked_recipient_phone_auth_editable: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientSmsEditable"
    )]
    pub locked_recipient_sms_editable: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub note: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteMetadata"
    )]
    pub note_metadata: Option<PropertyMetadata>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phoneAuthentication"
    )]
    pub phone_authentication: Option<RecipientPhoneAuthentication>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientAttachments"
    )]
    pub recipient_attachments: Vec<RecipientAttachment>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientAuthenticationStatus"
    )]
    pub recipient_authentication_status: Option<AuthenticationStatus>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientFeatureMetadata"
    )]
    pub recipient_feature_metadata: Vec<FeatureAvailableMetadata>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientSignatureProviders"
    )]
    pub recipient_signature_providers: Vec<RecipientSignatureProvider>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientType"
    )]
    pub recipient_type: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientTypeMetadata"
    )]
    pub recipient_type_metadata: Option<PropertyMetadata>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireIdLookup"
    )]
    pub require_id_lookup: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireIdLookupMetadata"
    )]
    pub require_id_lookup_metadata: Option<PropertyMetadata>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "roleName"
    )]
    pub role_name: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "routingOrder"
    )]
    pub routing_order: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routingOrderMetadata"
    )]
    pub routing_order_metadata: Option<PropertyMetadata>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentDateTime"
    )]
    pub sent_date_time: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signedDateTime"
    )]
    pub signed_date_time: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smsAuthentication"
    )]
    pub sms_authentication: Option<RecipientSmsAuthentication>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "socialAuthentications"
    )]
    pub social_authentications: Vec<SocialAuthentication>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusCode"
    )]
    pub status_code: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "suppressEmails"
    )]
    pub suppress_emails: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tabs: Option<EnvelopeRecipientTabs>,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalTabCount"
    )]
    pub total_tab_count: String,
    /**
     * Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.
     *  
     *  Example:
     *  
     *  ```json
     *  "recipients": {
     *        "seals": [
     *          {
     *            "recipientId": "1",
     *            "routingOrder" : 1,
     *            "recipientSignatureProviders": [
     *              {
     *                "sealName": "52e9d968-xxxx-xxxx-xxxx-4682bc45c106"
     *              }
     *        	]
     *      	}
     *    	]
     *  	},
     *      .
     *      .
     *      .
     *  ```
     *  For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
}

/// This object contains information about a seat discount.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SeatDiscount {
    /**
     * This object contains information about a seat discount.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "beginSeatCount"
    )]
    pub begin_seat_count: String,
    /**
     * This object contains information about a seat discount.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "discountPercent"
    )]
    pub discount_percent: String,
    /**
     * This object contains information about a seat discount.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endSeatCount"
    )]
    pub end_seat_count: String,
}

/// Contains the settings for the email notifications that senders receive about the envelopes that they send.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SenderEmailNotifications {
    /**
     * Contains the settings for the email notifications that senders receive about the envelopes that they send.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "changedSigner"
    )]
    pub changed_signer: String,
    /**
     * Contains the settings for the email notifications that senders receive about the envelopes that they send.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "commentsOnlyPrivateAndMention"
    )]
    pub comments_only_private_and_mention: String,
    /**
     * Contains the settings for the email notifications that senders receive about the envelopes that they send.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "commentsReceiveAll"
    )]
    pub comments_receive_all: String,
    /**
     * Contains the settings for the email notifications that senders receive about the envelopes that they send.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveryFailed"
    )]
    pub delivery_failed: String,
    /**
     * Contains the settings for the email notifications that senders receive about the envelopes that they send.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeComplete"
    )]
    pub envelope_complete: String,
    /**
     * Contains the settings for the email notifications that senders receive about the envelopes that they send.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "offlineSigningFailed"
    )]
    pub offline_signing_failed: String,
    /**
     * Contains the settings for the email notifications that senders receive about the envelopes that they send.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "powerformResponsesLimitNotificationEmail"
    )]
    pub powerform_responses_limit_notification_email: String,
    /**
     * Contains the settings for the email notifications that senders receive about the envelopes that they send.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "purgeDocuments"
    )]
    pub purge_documents: String,
    /**
     * Contains the settings for the email notifications that senders receive about the envelopes that they send.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientViewed"
    )]
    pub recipient_viewed: String,
    /**
     * Contains the settings for the email notifications that senders receive about the envelopes that they send.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderEnvelopeDeclined"
    )]
    pub sender_envelope_declined: String,
    /**
     * Contains the settings for the email notifications that senders receive about the envelopes that they send.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "withdrawnConsent"
    )]
    pub withdrawn_consent: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ServerTemplate {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub sequence: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateId"
    )]
    pub template_id: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ServiceInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "buildBranch"
    )]
    pub build_branch: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "buildBranchDeployedDateTime"
    )]
    pub build_branch_deployed_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "buildSHA"
    )]
    pub build_sha: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "buildVersion"
    )]
    pub build_version: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "linkedSites"
    )]
    pub linked_sites: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "serviceVersions"
    )]
    pub service_versions: Vec<ServiceVersion>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ServiceVersion {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub version: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "versionUrl"
    )]
    pub version_url: String,
}

/// Metadata that indicates whether a property is editable and describes setting-specific options.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SettingsMetadata {
    /**
     * Metadata that indicates whether a property is editable and describes setting-specific options.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "is21CFRPart11"
    )]
    pub is_21cfr_part_11: String,
    /**
     * Metadata that indicates whether a property is editable and describes setting-specific options.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub options: Vec<String>,
    /**
     * Metadata that indicates whether a property is editable and describes setting-specific options.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub rights: String,
    /**
     * Metadata that indicates whether a property is editable and describes setting-specific options.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "uiHint"
    )]
    pub ui_hint: String,
    /**
     * Metadata that indicates whether a property is editable and describes setting-specific options.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "uiOrder"
    )]
    pub ui_order: String,
    /**
     * Metadata that indicates whether a property is editable and describes setting-specific options.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "uiType"
    )]
    pub ui_type: String,
}

/// Information about the shared item.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SharedItem {
    /**
     * Information about the shared item.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Information about the shared item.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     * Information about the shared item.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<UserInfo>,
}

/// A tab that allows the recipient to sign a document. May be
/// optional.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SignHere {
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isSealSignTab"
    )]
    pub is_seal_sign_tab: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub optional: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "optionalMetadata"
    )]
    pub optional_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "scaleValue"
    )]
    pub scale_value: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleValueMetadata"
    )]
    pub scale_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stamp: Option<Stamp>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampType"
    )]
    pub stamp_type: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stampTypeMetadata"
    )]
    pub stamp_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that allows the recipient to sign a document. May be
     *  optional.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SignatureGroup {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupId"
    )]
    pub group_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupName"
    )]
    pub group_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub rights: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SignatureGroupDef {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupId"
    )]
    pub group_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub rights: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SignatureProperties {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub filter: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "subFilter"
    )]
    pub sub_filter: String,
}

/// Contains additional information that a specific signature provider requires.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SignatureProviderRequiredOption {
    /**
     * Contains additional information that a specific signature provider requires.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "requiredSignatureProviderOptionIds"
    )]
    pub required_signature_provider_option_ids: Vec<String>,
    /**
     * Contains additional information that a specific signature provider requires.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signerType"
    )]
    pub signer_type: String,
}

/// This object contains information about the type of signature.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SignatureType {
    /**
     * This object contains information about the type of signature.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDefault"
    )]
    pub is_default: String,
    /**
     * This object contains information about the type of signature.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SignatureUser {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDefault"
    )]
    pub is_default: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub rights: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userName"
    )]
    pub user_name: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SignatureUserDef {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDefault"
    )]
    pub is_default: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub rights: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
}

/// A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Signer {
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCode"
    )]
    pub access_code: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessCodeMetadata"
    )]
    pub access_code_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "addAccessCodeToEmail"
    )]
    pub add_access_code_to_email: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "additionalNotifications"
    )]
    pub additional_notifications: Vec<RecipientAdditionalNotification>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "agentCanEditEmail"
    )]
    pub agent_can_edit_email: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "agentCanEditName"
    )]
    pub agent_can_edit_name: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSystemOverrideForLockedRecipient"
    )]
    pub allow_system_override_for_locked_recipient: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "autoNavigation"
    )]
    pub auto_navigation: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bulkRecipientsUri"
    )]
    pub bulk_recipients_uri: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canSignOffline"
    )]
    pub can_sign_offline: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "clientUserId"
    )]
    pub client_user_id: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "completedCount"
    )]
    pub completed_count: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "creationReason"
    )]
    pub creation_reason: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "customFields"
    )]
    pub custom_fields: Vec<String>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedDateTime"
    )]
    pub declined_date_time: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedReason"
    )]
    pub declined_reason: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "defaultRecipient"
    )]
    pub default_recipient: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveredDateTime"
    )]
    pub delivered_date_time: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveryMethod"
    )]
    pub delivery_method: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryMethodMetadata"
    )]
    pub delivery_method_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorId"
    )]
    pub designator_id: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorIdGuid"
    )]
    pub designator_id_guid: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentVisibility"
    )]
    pub document_visibility: Vec<DocumentVisibility>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailMetadata"
    )]
    pub email_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailNotification"
    )]
    pub email_notification: Option<RecipientEmailNotification>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "embeddedRecipientStartURL"
    )]
    pub embedded_recipient_start_url: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "excludedDocuments"
    )]
    pub excluded_documents: Vec<String>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "faxNumber"
    )]
    pub fax_number: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "faxNumberMetadata"
    )]
    pub fax_number_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "firstName"
    )]
    pub first_name: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "firstNameMetadata"
    )]
    pub first_name_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fullName"
    )]
    pub full_name: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fullNameMetadata"
    )]
    pub full_name_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idCheckConfigurationName"
    )]
    pub id_check_configuration_name: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckConfigurationNameMetadata"
    )]
    pub id_check_configuration_name_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckInformationInput"
    )]
    pub id_check_information_input: Option<IdCheckInformationInput>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityVerification"
    )]
    pub identity_verification: Option<RecipientIdentityVerification>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "inheritEmailNotificationConfiguration"
    )]
    pub inherit_email_notification_configuration: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isBulkRecipient"
    )]
    pub is_bulk_recipient: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "isBulkRecipientMetadata"
    )]
    pub is_bulk_recipient_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastName"
    )]
    pub last_name: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastNameMetadata"
    )]
    pub last_name_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientPhoneAuthEditable"
    )]
    pub locked_recipient_phone_auth_editable: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientSmsEditable"
    )]
    pub locked_recipient_sms_editable: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "notaryId"
    )]
    pub notary_id: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub note: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteMetadata"
    )]
    pub note_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phoneAuthentication"
    )]
    pub phone_authentication: Option<RecipientPhoneAuthentication>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proofFile")]
    pub proof_file: Option<RecipientProofFile>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientAttachments"
    )]
    pub recipient_attachments: Vec<RecipientAttachment>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientAuthenticationStatus"
    )]
    pub recipient_authentication_status: Option<AuthenticationStatus>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientFeatureMetadata"
    )]
    pub recipient_feature_metadata: Vec<FeatureAvailableMetadata>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientSignatureProviders"
    )]
    pub recipient_signature_providers: Vec<RecipientSignatureProvider>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientSuppliesTabs"
    )]
    pub recipient_supplies_tabs: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientType"
    )]
    pub recipient_type: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientTypeMetadata"
    )]
    pub recipient_type_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireIdLookup"
    )]
    pub require_id_lookup: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireIdLookupMetadata"
    )]
    pub require_id_lookup_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireSignOnPaper"
    )]
    pub require_sign_on_paper: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireSignerCertificate"
    )]
    pub require_signer_certificate: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireUploadSignature"
    )]
    pub require_upload_signature: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "roleName"
    )]
    pub role_name: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "routingOrder"
    )]
    pub routing_order: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routingOrderMetadata"
    )]
    pub routing_order_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentDateTime"
    )]
    pub sent_date_time: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signInEachLocation"
    )]
    pub sign_in_each_location: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signInEachLocationMetadata"
    )]
    pub sign_in_each_location_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signatureInfo"
    )]
    pub signature_info: Option<RecipientSignatureInformation>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signedDateTime"
    )]
    pub signed_date_time: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupId"
    )]
    pub signing_group_id: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingGroupIdMetadata"
    )]
    pub signing_group_id_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupName"
    )]
    pub signing_group_name: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signingGroupUsers"
    )]
    pub signing_group_users: Vec<UserInfo>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smsAuthentication"
    )]
    pub sms_authentication: Option<RecipientSmsAuthentication>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "socialAuthentications"
    )]
    pub social_authentications: Vec<SocialAuthentication>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusCode"
    )]
    pub status_code: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "suppressEmails"
    )]
    pub suppress_emails: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tabs: Option<EnvelopeRecipientTabs>,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalTabCount"
    )]
    pub total_tab_count: String,
    /**
     * A complex type containing information about a signer recipient. A signer is a recipient who must take action on a document, such as sign, initial, date, or add data to form fields on a document.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
}

/// A tab that allows the recipient to attach supporting
/// documents to an envelope.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SignerAttachment {
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub optional: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "optionalMetadata"
    )]
    pub optional_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "scaleValue"
    )]
    pub scale_value: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleValueMetadata"
    )]
    pub scale_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that allows the recipient to attach supporting
     *  documents to an envelope.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SignerEmailNotifications {
    /**
     * An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "agentNotification"
    )]
    pub agent_notification: String,
    /**
     * An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "carbonCopyNotification"
    )]
    pub carbon_copy_notification: String,
    /**
     * An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "certifiedDeliveryNotification"
    )]
    pub certified_delivery_notification: String,
    /**
     * An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "commentsOnlyPrivateAndMention"
    )]
    pub comments_only_private_and_mention: String,
    /**
     * An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "commentsReceiveAll"
    )]
    pub comments_receive_all: String,
    /**
     * An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentMarkupActivation"
    )]
    pub document_markup_activation: String,
    /**
     * An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeActivation"
    )]
    pub envelope_activation: String,
    /**
     * An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeComplete"
    )]
    pub envelope_complete: String,
    /**
     * An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeCorrected"
    )]
    pub envelope_corrected: String,
    /**
     * An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeDeclined"
    )]
    pub envelope_declined: String,
    /**
     * An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeVoided"
    )]
    pub envelope_voided: String,
    /**
     * An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "faxReceived"
    )]
    pub fax_received: String,
    /**
     * An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "offlineSigningFailed"
    )]
    pub offline_signing_failed: String,
    /**
     * An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "purgeDocuments"
    )]
    pub purge_documents: String,
    /**
     * An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "reassignedSigner"
    )]
    pub reassigned_signer: String,
    /**
     * An array of email notifications that specifies the email the user receives when they are a sender. When the specific email notification is set to true, the user receives those types of email notifications from DocuSign. The user inherits the default account sender email notification settings when the user is created.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "whenSigningGroupMember"
    )]
    pub when_signing_group_member: String,
}

/// Contains details about a signing group. Signing groups enable you to send an envelope to a predefined group of recipients and have any one member of the group sign your documents. When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SigningGroup {
    /**
     * Contains details about a signing group. Signing groups enable you to send an envelope to a predefined group of recipients and have any one member of the group sign your documents. When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub created: String,
    /**
     * Contains details about a signing group. Signing groups enable you to send an envelope to a predefined group of recipients and have any one member of the group sign your documents. When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdBy"
    )]
    pub created_by: String,
    /**
     * Contains details about a signing group. Signing groups enable you to send an envelope to a predefined group of recipients and have any one member of the group sign your documents. When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Contains details about a signing group. Signing groups enable you to send an envelope to a predefined group of recipients and have any one member of the group sign your documents. When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupEmail"
    )]
    pub group_email: String,
    /**
     * Contains details about a signing group. Signing groups enable you to send an envelope to a predefined group of recipients and have any one member of the group sign your documents. When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupName"
    )]
    pub group_name: String,
    /**
     * Contains details about a signing group. Signing groups enable you to send an envelope to a predefined group of recipients and have any one member of the group sign your documents. When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupType"
    )]
    pub group_type: String,
    /**
     * Contains details about a signing group. Signing groups enable you to send an envelope to a predefined group of recipients and have any one member of the group sign your documents. When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub modified: String,
    /**
     * Contains details about a signing group. Signing groups enable you to send an envelope to a predefined group of recipients and have any one member of the group sign your documents. When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "modifiedBy"
    )]
    pub modified_by: String,
    /**
     * Contains details about a signing group. Signing groups enable you to send an envelope to a predefined group of recipients and have any one member of the group sign your documents. When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupId"
    )]
    pub signing_group_id: String,
    /**
     * Contains details about a signing group. Signing groups enable you to send an envelope to a predefined group of recipients and have any one member of the group sign your documents. When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub users: Vec<SigningGroupUser>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SigningGroupInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub groups: Vec<SigningGroup>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SigningGroupUser {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userName"
    )]
    pub user_name: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SigningGroupUsersData {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub users: Vec<SigningGroupUser>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SmartContractInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uri: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SmartSection {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "caseSensitive"
    )]
    pub case_sensitive: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displaySettings"
    )]
    pub display_settings: Option<SmartSectionDisplaySettings>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endAnchor"
    )]
    pub end_anchor: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endPosition"
    )]
    pub end_position: Option<SmartSectionAnchorPosition>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "overlayType"
    )]
    pub overlay_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "overlayTypeMetadata"
    )]
    pub overlay_type_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "removeEndAnchor"
    )]
    pub remove_end_anchor: bool,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "removeStartAnchor"
    )]
    pub remove_start_anchor: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharedMetadata"
    )]
    pub shared_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startAnchor"
    )]
    pub start_anchor: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startPosition"
    )]
    pub start_position: Option<SmartSectionAnchorPosition>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SmartSectionAnchorPosition {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: i64,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_f64",
        deserialize_with = "crate::utils::deserialize_null_f64::deserialize",
        rename = "xPosition"
    )]
    pub x_position: f64,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_f64",
        deserialize_with = "crate::utils::deserialize_null_f64::deserialize",
        rename = "yPosition"
    )]
    pub y_position: f64,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SmartSectionCollapsibleDisplaySettings {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "arrowClosed"
    )]
    pub arrow_closed: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "arrowColor"
    )]
    pub arrow_color: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "arrowLocation"
    )]
    pub arrow_location: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "arrowOpen"
    )]
    pub arrow_open: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "arrowSize"
    )]
    pub arrow_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "arrowStyle"
    )]
    pub arrow_style: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "containerStyle"
    )]
    pub container_style: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "labelStyle"
    )]
    pub label_style: String,
    /**
     *
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "onlyArrowIsClickable"
    )]
    pub only_arrow_is_clickable: bool,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "outerLabelAndArrowStyle"
    )]
    pub outer_label_and_arrow_style: String,
}

/// These properties define how a Smart Section displays. A Smart Section is a type of display section.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SmartSectionDisplaySettings {
    /**
     * These properties define how a Smart Section displays. A Smart Section is a type of display section.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "cellStyle"
    )]
    pub cell_style: String,
    /**
     * These properties define how a Smart Section displays. A Smart Section is a type of display section.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "collapsibleSettings"
    )]
    pub collapsible_settings: Option<SmartSectionCollapsibleDisplaySettings>,
    /**
     * These properties define how a Smart Section displays. A Smart Section is a type of display section.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub display: String,
    /**
     * These properties define how a Smart Section displays. A Smart Section is a type of display section.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayLabel"
    )]
    pub display_label: String,
    /**
     * These properties define how a Smart Section displays. A Smart Section is a type of display section.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "displayOrder"
    )]
    pub display_order: i64,
    /**
     * These properties define how a Smart Section displays. A Smart Section is a type of display section.
     */
    #[serde(
        default,
        skip_serializing_if = "crate::utils::zero_i64",
        deserialize_with = "crate::utils::deserialize_null_i64::deserialize",
        rename = "displayPageNumber"
    )]
    pub display_page_number: i64,
    /**
     * These properties define how a Smart Section displays. A Smart Section is a type of display section.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "hideLabelWhenOpened"
    )]
    pub hide_label_when_opened: bool,
    /**
     * These properties define how a Smart Section displays. A Smart Section is a type of display section.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "inlineOuterStyle"
    )]
    pub inline_outer_style: String,
    /**
     * These properties define how a Smart Section displays. A Smart Section is a type of display section.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "labelWhenOpened"
    )]
    pub label_when_opened: String,
    /**
     * These properties define how a Smart Section displays. A Smart Section is a type of display section.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "preLabel"
    )]
    pub pre_label: String,
    /**
     * These properties define how a Smart Section displays. A Smart Section is a type of display section.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "scrollToTopWhenOpened"
    )]
    pub scroll_to_top_when_opened: bool,
    /**
     * These properties define how a Smart Section displays. A Smart Section is a type of display section.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tableStyle"
    )]
    pub table_style: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SocialAccountInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub provider: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "socialId"
    )]
    pub social_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userName"
    )]
    pub user_name: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SocialAuthentication {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub authentication: String,
}

/// A one-line field that allows the recipient to enter a Social
/// Security Number. The SSN can be typed with or without
/// dashes. It uses the same parameters as a Text tab, with the
/// validation message and pattern set for SSN information.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Ssn {
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "concealValueOnDocument"
    )]
    pub conceal_value_on_document: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "concealValueOnDocumentMetadata"
    )]
    pub conceal_value_on_document_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableAutoSize"
    )]
    pub disable_auto_size: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableAutoSizeMetadata"
    )]
    pub disable_auto_size_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxLength"
    )]
    pub max_length: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxLengthMetadata"
    )]
    pub max_length_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "originalValue"
    )]
    pub original_value: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "originalValueMetadata"
    )]
    pub original_value_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireAll"
    )]
    pub require_all: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireAllMetadata"
    )]
    pub require_all_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireInitialOnSharedChange"
    )]
    pub require_initial_on_shared_change: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireInitialOnSharedChangeMetadata"
    )]
    pub require_initial_on_shared_change_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderRequired"
    )]
    pub sender_required: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "senderRequiredMetadata"
    )]
    pub sender_required_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharedMetadata"
    )]
    pub shared_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationMessage"
    )]
    pub validation_message: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationMessageMetadata"
    )]
    pub validation_message_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationPattern"
    )]
    pub validation_pattern: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationPatternMetadata"
    )]
    pub validation_pattern_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A one-line field that allows the recipient to enter a Social
     *  Security Number. The SSN can be typed with or without
     *  dashes. It uses the same parameters as a Text tab, with the
     *  validation message and pattern set for SSN information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Ssn4InformationInput {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayLevelCode"
    )]
    pub display_level_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "receiveInResponse"
    )]
    pub receive_in_response: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "ssn4"
    )]
    pub ssn_4: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Ssn9InformationInput {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayLevelCode"
    )]
    pub display_level_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "ssn9"
    )]
    pub ssn_9: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Stamp {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "adoptedDateTime"
    )]
    pub adopted_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdDateTime"
    )]
    pub created_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customField"
    )]
    pub custom_field: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dateStampProperties"
    )]
    pub date_stamp_properties: Option<DateStampProperties>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disallowUserResizeStamp"
    )]
    pub disallow_user_resize_stamp: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalID"
    )]
    pub external_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "imageBase64"
    )]
    pub image_base_64: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "imageType"
    )]
    pub image_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModifiedDateTime"
    )]
    pub last_modified_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "phoneticName"
    )]
    pub phonetic_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureName"
    )]
    pub signature_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampFormat"
    )]
    pub stamp_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampImageUri"
    )]
    pub stamp_image_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampSizeMM"
    )]
    pub stamp_size_mm: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
}

/// A list of supported languages.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct SupportedLanguages {
    /**
     * A list of supported languages.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub languages: Vec<NameValue>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TabAccountSettings {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowTabOrder"
    )]
    pub allow_tab_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowTabOrderMetadata"
    )]
    pub allow_tab_order_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "approveDeclineTabsEnabled"
    )]
    pub approve_decline_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approveDeclineTabsMetadata"
    )]
    pub approve_decline_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "calculatedFieldsEnabled"
    )]
    pub calculated_fields_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "calculatedFieldsMetadata"
    )]
    pub calculated_fields_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "checkBoxTabsMetadata"
    )]
    pub check_box_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "checkboxTabsEnabled"
    )]
    pub checkbox_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "dataFieldRegexEnabled"
    )]
    pub data_field_regex_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataFieldRegexMetadata"
    )]
    pub data_field_regex_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "dataFieldSizeEnabled"
    )]
    pub data_field_size_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataFieldSizeMetadata"
    )]
    pub data_field_size_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "drawTabsEnabled"
    )]
    pub draw_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "drawTabsMetadata"
    )]
    pub draw_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "firstLastEmailTabsEnabled"
    )]
    pub first_last_email_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "firstLastEmailTabsMetadata"
    )]
    pub first_last_email_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "listTabsEnabled"
    )]
    pub list_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "listTabsMetadata"
    )]
    pub list_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "noteTabsEnabled"
    )]
    pub note_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteTabsMetadata"
    )]
    pub note_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "prefillTabsEnabled"
    )]
    pub prefill_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "prefillTabsMetadata"
    )]
    pub prefill_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "radioTabsEnabled"
    )]
    pub radio_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "radioTabsMetadata"
    )]
    pub radio_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "savingCustomTabsEnabled"
    )]
    pub saving_custom_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "savingCustomTabsMetadata"
    )]
    pub saving_custom_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderToChangeTabAssignmentsEnabled"
    )]
    pub sender_to_change_tab_assignments_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "senderToChangeTabAssignmentsMetadata"
    )]
    pub sender_to_change_tab_assignments_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sharedCustomTabsEnabled"
    )]
    pub shared_custom_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharedCustomTabsMetadata"
    )]
    pub shared_custom_tabs_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabDataLabelEnabled"
    )]
    pub tab_data_label_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabDataLabelMetadata"
    )]
    pub tab_data_label_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLocationEnabled"
    )]
    pub tab_location_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLocationMetadata"
    )]
    pub tab_location_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLockingEnabled"
    )]
    pub tab_locking_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLockingMetadata"
    )]
    pub tab_locking_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabScaleEnabled"
    )]
    pub tab_scale_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabScaleMetadata"
    )]
    pub tab_scale_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabTextFormattingEnabled"
    )]
    pub tab_text_formatting_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTextFormattingMetadata"
    )]
    pub tab_text_formatting_metadata: Option<SettingsMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "textTabsEnabled"
    )]
    pub text_tabs_enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "textTabsMetadata"
    )]
    pub text_tabs_metadata: Option<SettingsMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TabGroup {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupLabel"
    )]
    pub group_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "groupLabelMetadata"
    )]
    pub group_label_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "groupRule"
    )]
    pub group_rule: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "groupRuleMetadata"
    )]
    pub group_rule_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maximumAllowed"
    )]
    pub maximum_allowed: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumAllowedMetadata"
    )]
    pub maximum_allowed_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "minimumRequired"
    )]
    pub minimum_required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minimumRequiredMetadata"
    )]
    pub minimum_required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabScope"
    )]
    pub tab_scope: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabScopeMetadata"
    )]
    pub tab_scope_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationMessage"
    )]
    pub validation_message: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationMessageMetadata"
    )]
    pub validation_message_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TabMetadata {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub anchor: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub collaborative: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "concealValueOnDocument"
    )]
    pub conceal_value_on_document: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdByDisplayName"
    )]
    pub created_by_display_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdByUserId"
    )]
    pub created_by_user_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableAutoSize"
    )]
    pub disable_auto_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub editable: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "includedInEmail"
    )]
    pub included_in_email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initialValue"
    )]
    pub initial_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub items: Vec<String>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModified"
    )]
    pub last_modified: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModifiedByDisplayName"
    )]
    pub last_modified_by_display_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModifiedByUserId"
    )]
    pub last_modified_by_user_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maximumLength"
    )]
    pub maximum_length: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentItemCode"
    )]
    pub payment_item_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentItemDescription"
    )]
    pub payment_item_description: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "paymentItemName"
    )]
    pub payment_item_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireAll"
    )]
    pub require_all: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireInitialOnSharedChange"
    )]
    pub require_initial_on_shared_change: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "scaleValue"
    )]
    pub scale_value: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub selected: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampType"
    )]
    pub stamp_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stampTypeMetadata"
    )]
    pub stamp_type_metadata: Option<PropertyMetadata>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationMessage"
    )]
    pub validation_message: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationPattern"
    )]
    pub validation_pattern: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TabMetadataList {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub tabs: Vec<TabMetadata>,
}

/// Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Tabs {
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "approveTabs"
    )]
    pub approve_tabs: Vec<Approve>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "checkboxTabs"
    )]
    pub checkbox_tabs: Vec<Checkbox>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commentThreadTabs"
    )]
    pub comment_thread_tabs: Vec<CommentThread>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionCountyTabs"
    )]
    pub commission_county_tabs: Vec<CommissionCounty>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionExpirationTabs"
    )]
    pub commission_expiration_tabs: Vec<CommissionExpiration>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionNumberTabs"
    )]
    pub commission_number_tabs: Vec<CommissionNumber>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionStateTabs"
    )]
    pub commission_state_tabs: Vec<CommissionState>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "companyTabs"
    )]
    pub company_tabs: Vec<Company>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "currencyTabs"
    )]
    pub currency_tabs: Vec<Currency>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "dateSignedTabs"
    )]
    pub date_signed_tabs: Vec<DateSigned>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "dateTabs"
    )]
    pub date_tabs: Vec<Date>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "declineTabs"
    )]
    pub decline_tabs: Vec<Decline>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "drawTabs"
    )]
    pub draw_tabs: Vec<Draw>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "emailAddressTabs"
    )]
    pub email_address_tabs: Vec<EmailAddress>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "emailTabs"
    )]
    pub email_tabs: Vec<Email>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeIdTabs"
    )]
    pub envelope_id_tabs: Vec<EnvelopeId>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "firstNameTabs"
    )]
    pub first_name_tabs: Vec<FirstName>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "formulaTabs"
    )]
    pub formula_tabs: Vec<FormulaTab>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "fullNameTabs"
    )]
    pub full_name_tabs: Vec<FullName>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "initialHereTabs"
    )]
    pub initial_here_tabs: Vec<InitialHere>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "lastNameTabs"
    )]
    pub last_name_tabs: Vec<LastName>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "listTabs"
    )]
    pub list_tabs: Vec<List>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "notarizeTabs"
    )]
    pub notarize_tabs: Vec<Notarize>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "notarySealTabs"
    )]
    pub notary_seal_tabs: Vec<NotarySeal>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "noteTabs"
    )]
    pub note_tabs: Vec<Note>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "numberTabs"
    )]
    pub number_tabs: Vec<Number>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "phoneNumberTabs"
    )]
    pub phone_number_tabs: Vec<PhoneNumber>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "polyLineOverlayTabs"
    )]
    pub poly_line_overlay_tabs: Vec<PolyLineOverlay>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "prefillTabs"
    )]
    pub prefill_tabs: Option<PrefillTabs>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "radioGroupTabs"
    )]
    pub radio_group_tabs: Vec<RadioGroup>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signHereTabs"
    )]
    pub sign_here_tabs: Vec<SignHere>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signerAttachmentTabs"
    )]
    pub signer_attachment_tabs: Vec<SignerAttachment>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "smartSectionTabs"
    )]
    pub smart_section_tabs: Vec<SmartSection>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "ssnTabs"
    )]
    pub ssn_tabs: Vec<Ssn>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroups"
    )]
    pub tab_groups: Vec<TabGroup>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "textTabs"
    )]
    pub text_tabs: Vec<Text>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "titleTabs"
    )]
    pub title_tabs: Vec<Title>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "viewTabs"
    )]
    pub view_tabs: Vec<View>,
    /**
     * Tabs indicate to recipients where they should sign, initial, or enter data on a document. They are represented graphically as symbols on documents at the time of signing. Tabs can also display data to the recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "zipTabs"
    )]
    pub zip_tabs: Vec<Zip>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateCustomFieldsData {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "listCustomFields"
    )]
    pub list_custom_fields: Vec<ListCustomField>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "textCustomFields"
    )]
    pub text_custom_fields: Vec<TextCustomField>,
}

/// A list of `documentVisibility` objects that specify whether the documents associated with a template are visible to recipients.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateDocumentVisibilityList {
    /**
     * A list of `documentVisibility` objects that specify whether the documents associated with a template are visible to recipients.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentVisibility"
    )]
    pub document_visibility: Vec<DocumentVisibility>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateDocumentsResult {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "templateDocuments"
    )]
    pub template_documents: Vec<EnvelopeDocument>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateId"
    )]
    pub template_id: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub templates: Vec<TemplateSummary>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateMatch {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentEndPage"
    )]
    pub document_end_page: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentStartPage"
    )]
    pub document_start_page: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "matchPercentage"
    )]
    pub match_percentage: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateNotificationRequest {
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expirations: Option<Expirations>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reminders: Option<Reminders>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useAccountDefaults"
    )]
    pub use_account_defaults: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateRecipientsData {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub agents: Vec<Agent>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "carbonCopies"
    )]
    pub carbon_copies: Vec<CarbonCopy>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "certifiedDeliveries"
    )]
    pub certified_deliveries: Vec<CertifiedDelivery>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currentRoutingOrder"
    )]
    pub current_routing_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub editors: Vec<Editor>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "inPersonSigners"
    )]
    pub in_person_signers: Vec<InPersonSigner>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub intermediaries: Vec<Intermediary>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub notaries: Vec<NotaryRecipient>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientCount"
    )]
    pub recipient_count: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub seals: Vec<SealSign>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub signers: Vec<Signer>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub witnesses: Vec<Witness>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateRole {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCode"
    )]
    pub access_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "clientUserId"
    )]
    pub client_user_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "defaultRecipient"
    )]
    pub default_recipient: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailNotification"
    )]
    pub email_notification: Option<RecipientEmailNotification>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "embeddedRecipientStartURL"
    )]
    pub embedded_recipient_start_url: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "inPersonSignerName"
    )]
    pub in_person_signer_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientSignatureProviders"
    )]
    pub recipient_signature_providers: Vec<RecipientSignatureProvider>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "roleName"
    )]
    pub role_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "routingOrder"
    )]
    pub routing_order: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupId"
    )]
    pub signing_group_id: String,
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tabs: Option<EnvelopeRecipientTabs>,
}

/// Information about shared templates.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateSharedItem {
    /**
     * Information about shared templates.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Information about shared templates.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<UserInfo>,
    /**
     * Information about shared templates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * Information about shared templates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     * Information about shared templates.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "sharedGroups"
    )]
    pub shared_groups: Vec<MemberGroupSharedItem>,
    /**
     * Information about shared templates.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "sharedUsers"
    )]
    pub shared_users: Vec<UserSharedItem>,
    /**
     * Information about shared templates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateId"
    )]
    pub template_id: String,
    /**
     * Information about shared templates.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateName"
    )]
    pub template_name: String,
}

/// Summary of a template request.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateSummary {
    /**
     * Summary of a template request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub applied: String,
    /**
     * Summary of a template request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * Summary of a template request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentName"
    )]
    pub document_name: String,
    /**
     * Summary of a template request.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Summary of a template request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * Summary of a template request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateId"
    )]
    pub template_id: String,
    /**
     * Summary of a template request.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateMatch"
    )]
    pub template_match: Option<TemplateMatch>,
    /**
     * Summary of a template request.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uri: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateTabs {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "approveTabs"
    )]
    pub approve_tabs: Vec<Approve>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "checkboxTabs"
    )]
    pub checkbox_tabs: Vec<Checkbox>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commentThreadTabs"
    )]
    pub comment_thread_tabs: Vec<CommentThread>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionCountyTabs"
    )]
    pub commission_county_tabs: Vec<CommissionCounty>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionExpirationTabs"
    )]
    pub commission_expiration_tabs: Vec<CommissionExpiration>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionNumberTabs"
    )]
    pub commission_number_tabs: Vec<CommissionNumber>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "commissionStateTabs"
    )]
    pub commission_state_tabs: Vec<CommissionState>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "companyTabs"
    )]
    pub company_tabs: Vec<Company>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "currencyTabs"
    )]
    pub currency_tabs: Vec<Currency>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "dateSignedTabs"
    )]
    pub date_signed_tabs: Vec<DateSigned>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "dateTabs"
    )]
    pub date_tabs: Vec<Date>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "declineTabs"
    )]
    pub decline_tabs: Vec<Decline>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "drawTabs"
    )]
    pub draw_tabs: Vec<Draw>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "emailAddressTabs"
    )]
    pub email_address_tabs: Vec<EmailAddress>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "emailTabs"
    )]
    pub email_tabs: Vec<Email>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "envelopeIdTabs"
    )]
    pub envelope_id_tabs: Vec<EnvelopeId>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "firstNameTabs"
    )]
    pub first_name_tabs: Vec<FirstName>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "formulaTabs"
    )]
    pub formula_tabs: Vec<FormulaTab>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "fullNameTabs"
    )]
    pub full_name_tabs: Vec<FullName>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "initialHereTabs"
    )]
    pub initial_here_tabs: Vec<InitialHere>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "lastNameTabs"
    )]
    pub last_name_tabs: Vec<LastName>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "listTabs"
    )]
    pub list_tabs: Vec<List>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "notarizeTabs"
    )]
    pub notarize_tabs: Vec<Notarize>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "notarySealTabs"
    )]
    pub notary_seal_tabs: Vec<NotarySeal>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "noteTabs"
    )]
    pub note_tabs: Vec<Note>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "numberTabs"
    )]
    pub number_tabs: Vec<Number>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "phoneNumberTabs"
    )]
    pub phone_number_tabs: Vec<PhoneNumber>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "polyLineOverlayTabs"
    )]
    pub poly_line_overlay_tabs: Vec<PolyLineOverlay>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "prefillTabs"
    )]
    pub prefill_tabs: Option<PrefillTabs>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "radioGroupTabs"
    )]
    pub radio_group_tabs: Vec<RadioGroup>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signHereTabs"
    )]
    pub sign_here_tabs: Vec<SignHere>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signerAttachmentTabs"
    )]
    pub signer_attachment_tabs: Vec<SignerAttachment>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "smartSectionTabs"
    )]
    pub smart_section_tabs: Vec<SmartSection>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "ssnTabs"
    )]
    pub ssn_tabs: Vec<Ssn>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroups"
    )]
    pub tab_groups: Vec<TabGroup>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "textTabs"
    )]
    pub text_tabs: Vec<Text>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "titleTabs"
    )]
    pub title_tabs: Vec<Title>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "viewTabs"
    )]
    pub view_tabs: Vec<View>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "zipTabs"
    )]
    pub zip_tabs: Vec<Zip>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TemplateUpdateSummary {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bulkEnvelopeStatus"
    )]
    pub bulk_envelope_status: Option<BulkEnvelopeStatus>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "envelopeId"
    )]
    pub envelope_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "listCustomFieldUpdateResults"
    )]
    pub list_custom_field_update_results: Vec<ListCustomField>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockInformation"
    )]
    pub lock_information: Option<EnvelopeLocks>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "purgeState"
    )]
    pub purge_state: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientUpdateResults"
    )]
    pub recipient_update_results: Vec<RecipientUpdateResponse>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabUpdateResults"
    )]
    pub tab_update_results: Option<EnvelopeRecipientTabs>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "textCustomFieldUpdateResults"
    )]
    pub text_custom_field_update_results: Vec<TextCustomField>,
}

/// A tab that allows the recipient to enter any type of text.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Text {
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "concealValueOnDocument"
    )]
    pub conceal_value_on_document: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "concealValueOnDocumentMetadata"
    )]
    pub conceal_value_on_document_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableAutoSize"
    )]
    pub disable_auto_size: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableAutoSizeMetadata"
    )]
    pub disable_auto_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub formula: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formulaMetadata"
    )]
    pub formula_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxLength"
    )]
    pub max_length: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxLengthMetadata"
    )]
    pub max_length_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "originalValue"
    )]
    pub original_value: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "originalValueMetadata"
    )]
    pub original_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireAll"
    )]
    pub require_all: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireAllMetadata"
    )]
    pub require_all_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireInitialOnSharedChange"
    )]
    pub require_initial_on_shared_change: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireInitialOnSharedChangeMetadata"
    )]
    pub require_initial_on_shared_change_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderRequired"
    )]
    pub sender_required: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "senderRequiredMetadata"
    )]
    pub sender_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharedMetadata"
    )]
    pub shared_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationMessage"
    )]
    pub validation_message: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationMessageMetadata"
    )]
    pub validation_message_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationPattern"
    )]
    pub validation_pattern: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationPatternMetadata"
    )]
    pub validation_pattern_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that allows the recipient to enter any type of text.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// This object represents a free text custom field where envelope creators and senders can enter custom data.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct TextCustomField {
    /**
     * This object represents a free text custom field where envelope creators and senders can enter custom data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "configurationType"
    )]
    pub configuration_type: String,
    /**
     * This object represents a free text custom field where envelope creators and senders can enter custom data.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * This object represents a free text custom field where envelope creators and senders can enter custom data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fieldId"
    )]
    pub field_id: String,
    /**
     * This object represents a free text custom field where envelope creators and senders can enter custom data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * This object represents a free text custom field where envelope creators and senders can enter custom data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     * This object represents a free text custom field where envelope creators and senders can enter custom data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub show: String,
    /**
     * This object represents a free text custom field where envelope creators and senders can enter custom data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
}

/// A tab that displays the recipient's title.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Title {
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "concealValueOnDocument"
    )]
    pub conceal_value_on_document: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "concealValueOnDocumentMetadata"
    )]
    pub conceal_value_on_document_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableAutoSize"
    )]
    pub disable_auto_size: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableAutoSizeMetadata"
    )]
    pub disable_auto_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxLength"
    )]
    pub max_length: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxLengthMetadata"
    )]
    pub max_length_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "originalValue"
    )]
    pub original_value: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "originalValueMetadata"
    )]
    pub original_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that displays the recipient's title.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

/// A complex element consisting of:
///
/// * lastSentDateTime - the date and time the user last sent an envelope.
/// * lastSignedDateTime - the date and time the user last signed an envelope.
/// * sentCount - the number of envelopes the user has sent.
/// * signedCount - the number of envelopes the user has signed.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct UsageHistory {
    /**
     * A complex element consisting of:
     *  
     *  \* lastSentDateTime - the date and time the user last sent an envelope.
     *  \* lastSignedDateTime - the date and time the user last signed an envelope.
     *  \* sentCount - the number of envelopes the user has sent.
     *  \* signedCount - the number of envelopes the user has signed.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastSentDateTime"
    )]
    pub last_sent_date_time: String,
    /**
     * A complex element consisting of:
     *  
     *  \* lastSentDateTime - the date and time the user last sent an envelope.
     *  \* lastSignedDateTime - the date and time the user last signed an envelope.
     *  \* sentCount - the number of envelopes the user has sent.
     *  \* signedCount - the number of envelopes the user has signed.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastSignedDateTime"
    )]
    pub last_signed_date_time: String,
    /**
     * A complex element consisting of:
     *  
     *  \* lastSentDateTime - the date and time the user last sent an envelope.
     *  \* lastSignedDateTime - the date and time the user last signed an envelope.
     *  \* sentCount - the number of envelopes the user has sent.
     *  \* signedCount - the number of envelopes the user has signed.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentCount"
    )]
    pub sent_count: String,
    /**
     * A complex element consisting of:
     *  
     *  \* lastSentDateTime - the date and time the user last sent an envelope.
     *  \* lastSignedDateTime - the date and time the user last signed an envelope.
     *  \* sentCount - the number of envelopes the user has sent.
     *  \* signedCount - the number of envelopes the user has signed.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signedCount"
    )]
    pub signed_count: String,
}

/// Describes which account management capabilities a user has.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct UserAccountManagementGranularInformation {
    /**
     * Describes which account management capabilities a user has.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canManageAccountSecuritySettings"
    )]
    pub can_manage_account_security_settings: String,
    /**
     * Describes which account management capabilities a user has.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canManageAccountSecuritySettingsMetadata"
    )]
    pub can_manage_account_security_settings_metadata: Option<SettingsMetadata>,
    /**
     * Describes which account management capabilities a user has.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canManageAccountSettings"
    )]
    pub can_manage_account_settings: String,
    /**
     * Describes which account management capabilities a user has.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canManageAccountSettingsMetadata"
    )]
    pub can_manage_account_settings_metadata: Option<SettingsMetadata>,
    /**
     * Describes which account management capabilities a user has.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canManageAdmins"
    )]
    pub can_manage_admins: String,
    /**
     * Describes which account management capabilities a user has.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canManageAdminsMetadata"
    )]
    pub can_manage_admins_metadata: Option<SettingsMetadata>,
    /**
     * Describes which account management capabilities a user has.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canManageEnvelopeTransfer"
    )]
    pub can_manage_envelope_transfer: String,
    /**
     * Describes which account management capabilities a user has.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canManageEnvelopeTransferMetadata"
    )]
    pub can_manage_envelope_transfer_metadata: Option<SettingsMetadata>,
    /**
     * Describes which account management capabilities a user has.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canManageReporting"
    )]
    pub can_manage_reporting: String,
    /**
     * Describes which account management capabilities a user has.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canManageReportingMetadata"
    )]
    pub can_manage_reporting_metadata: Option<SettingsMetadata>,
    /**
     * Describes which account management capabilities a user has.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canManageSharing"
    )]
    pub can_manage_sharing: String,
    /**
     * Describes which account management capabilities a user has.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canManageSharingMetadata"
    )]
    pub can_manage_sharing_metadata: Option<SettingsMetadata>,
    /**
     * Describes which account management capabilities a user has.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canManageSigningGroups"
    )]
    pub can_manage_signing_groups: String,
    /**
     * Describes which account management capabilities a user has.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canManageSigningGroupsMetadata"
    )]
    pub can_manage_signing_groups_metadata: Option<SettingsMetadata>,
    /**
     * Describes which account management capabilities a user has.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canManageUsers"
    )]
    pub can_manage_users: String,
    /**
     * Describes which account management capabilities a user has.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canManageUsersMetadata"
    )]
    pub can_manage_users_metadata: Option<SettingsMetadata>,
    /**
     * Describes which account management capabilities a user has.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canViewUsers"
    )]
    pub can_view_users: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct UserInfo {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountId"
    )]
    pub account_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountName"
    )]
    pub account_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "activationAccessCode"
    )]
    pub activation_access_code: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "loginStatus"
    )]
    pub login_status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "membershipId"
    )]
    pub membership_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sendActivationEmail"
    )]
    pub send_activation_email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userName"
    )]
    pub user_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userStatus"
    )]
    pub user_status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userType"
    )]
    pub user_type: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct UserInfoList {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub users: Vec<UserInfo>,
}

/// User information.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct UserInformation {
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "activationAccessCode"
    )]
    pub activation_access_code: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub company: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "connectConfigurations"
    )]
    pub connect_configurations: Vec<ConnectUserObject>,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "countryCode"
    )]
    pub country_code: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdDateTime"
    )]
    pub created_date_time: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "customSettings"
    )]
    pub custom_settings: Vec<NameValue>,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "defaultAccountId"
    )]
    pub default_account_id: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableConnectForUser"
    )]
    pub enable_connect_for_user: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "firstName"
    )]
    pub first_name: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forgottenPasswordInfo"
    )]
    pub forgotten_password_info: Option<ForgottenPasswordInformation>,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "groupList"
    )]
    pub group_list: Vec<Group>,
    /**
     * User information.
     */
    #[serde(
        default,
        deserialize_with = "crate::utils::deserialize_null_boolean::deserialize",
        rename = "hasRemoteNotary"
    )]
    pub has_remote_notary: bool,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "homeAddress"
    )]
    pub home_address: Option<AddressInformation>,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initialsImageUri"
    )]
    pub initials_image_uri: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isAdmin"
    )]
    pub is_admin: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isNAREnabled"
    )]
    pub is_nar_enabled: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "jobTitle"
    )]
    pub job_title: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastLogin"
    )]
    pub last_login: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastName"
    )]
    pub last_name: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "loginStatus"
    )]
    pub login_status: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "middleName"
    )]
    pub middle_name: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub password: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "passwordExpiration"
    )]
    pub password_expiration: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "permissionProfileId"
    )]
    pub permission_profile_id: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "permissionProfileName"
    )]
    pub permission_profile_name: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "profileImageUri"
    )]
    pub profile_image_uri: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sendActivationEmail"
    )]
    pub send_activation_email: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sendActivationOnInvalidLogin"
    )]
    pub send_activation_on_invalid_login: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureImageUri"
    )]
    pub signature_image_uri: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub subscribe: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "suffixName"
    )]
    pub suffix_name: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub title: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uri: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userAddedToAccountDateTime"
    )]
    pub user_added_to_account_date_time: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userName"
    )]
    pub user_name: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "userProfileLastModifiedDate"
    )]
    pub user_profile_last_modified_date: Option<chrono::NaiveDate>,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userSettings"
    )]
    pub user_settings: Option<UserSettingsInformation>,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userStatus"
    )]
    pub user_status: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userType"
    )]
    pub user_type: String,
    /**
     * User information.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workAddress"
    )]
    pub work_address: Option<AddressInformation>,
}

/// Contains a list of account users.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct UserInformationList {
    /**
     * Contains a list of account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     * Contains a list of account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     * Contains a list of account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     * Contains a list of account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     * Contains a list of account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     * Contains a list of account users.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
    /**
     * Contains a list of account users.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub users: Vec<UserInformation>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct UserPasswordInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currentPassword"
    )]
    pub current_password: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forgottenPasswordInfo"
    )]
    pub forgotten_password_info: Option<ForgottenPasswordInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "newPassword"
    )]
    pub new_password: String,
}

/// Contains details about the password rules for a user.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct UserPasswordRules {
    /**
     * Contains details about the password rules for a user.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordRules"
    )]
    pub password_rules: Option<AccountPasswordRulesData>,
    /**
     * Contains details about the password rules for a user.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct UserProfile {
    /**
     *
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<AddressInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "authenticationMethods"
    )]
    pub authentication_methods: Vec<AuthenticationMethod>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "companyName"
    )]
    pub company_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayOrganizationInfo"
    )]
    pub display_organization_info: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayPersonalInfo"
    )]
    pub display_personal_info: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayProfile"
    )]
    pub display_profile: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayUsageHistory"
    )]
    pub display_usage_history: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "profileImageUri"
    )]
    pub profile_image_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub title: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "usageHistory"
    )]
    pub usage_history: Option<UsageHistory>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userDetails"
    )]
    pub user_details: Option<UserInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "userProfileLastModifiedDate"
    )]
    pub user_profile_last_modified_date: Option<chrono::NaiveDate>,
}

/// Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
/// - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
/// - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
/// - `options`: The values supported for this setting (not all settings have this element)
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct UserSettingsInformation {
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accountManagementGranular"
    )]
    pub account_management_granular: Option<UserAccountManagementGranularInformation>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "adminOnly"
    )]
    pub admin_only: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adminOnlyMetadata"
    )]
    pub admin_only_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowAutoTagging"
    )]
    pub allow_auto_tagging: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowEnvelopeTransferTo"
    )]
    pub allow_envelope_transfer_to: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowEnvelopeTransferToMetadata"
    )]
    pub allow_envelope_transfer_to_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowEsealRecipients"
    )]
    pub allow_eseal_recipients: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowEsealRecipientsMetadata"
    )]
    pub allow_eseal_recipients_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowPowerFormsAdminToAccessAllPowerFormEnvelope"
    )]
    pub allow_power_forms_admin_to_access_all_power_form_envelope: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata"
    )]
    pub allow_power_forms_admin_to_access_all_power_form_envelope_metadata:
        Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowRecipientLanguageSelection"
    )]
    pub allow_recipient_language_selection: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowRecipientLanguageSelectionMetadata"
    )]
    pub allow_recipient_language_selection_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSendOnBehalfOf"
    )]
    pub allow_send_on_behalf_of: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSendOnBehalfOfMetadata"
    )]
    pub allow_send_on_behalf_of_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSupplementalDocuments"
    )]
    pub allow_supplemental_documents: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowSupplementalDocumentsMetadata"
    )]
    pub allow_supplemental_documents_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTagVersionedPlacementEnabled"
    )]
    pub anchor_tag_versioned_placement_enabled: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "apiAccountWideAccess"
    )]
    pub api_account_wide_access: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "apiAccountWideAccessMetadata"
    )]
    pub api_account_wide_access_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "apiCanExportAC"
    )]
    pub api_can_export_ac: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "apiCanExportACMetadata"
    )]
    pub api_can_export_ac_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bulkSend"
    )]
    pub bulk_send: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bulkSendMetadata"
    )]
    pub bulk_send_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canChargeAccount"
    )]
    pub can_charge_account: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canChargeAccountMetadata"
    )]
    pub can_charge_account_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canEditSharedAddressbook"
    )]
    pub can_edit_shared_addressbook: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canEditSharedAddressbookMetadata"
    )]
    pub can_edit_shared_addressbook_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canLockEnvelopes"
    )]
    pub can_lock_envelopes: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canLockEnvelopesMetadata"
    )]
    pub can_lock_envelopes_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canManageAccount"
    )]
    pub can_manage_account: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canManageAccountMetadata"
    )]
    pub can_manage_account_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canManageDistributor"
    )]
    pub can_manage_distributor: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canManageDistributorMetadata"
    )]
    pub can_manage_distributor_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canManageTemplates"
    )]
    pub can_manage_templates: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canManageTemplatesMetadata"
    )]
    pub can_manage_templates_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canSendAPIRequests"
    )]
    pub can_send_api_requests: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canSendAPIRequestsMetadata"
    )]
    pub can_send_api_requests_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canSendEnvelope"
    )]
    pub can_send_envelope: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canSendEnvelopeMetadata"
    )]
    pub can_send_envelope_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canSignEnvelope"
    )]
    pub can_sign_envelope: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canSignEnvelopeMetadata"
    )]
    pub can_sign_envelope_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canUseScratchpad"
    )]
    pub can_use_scratchpad: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canUseScratchpadMetadata"
    )]
    pub can_use_scratchpad_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canUseSmartContracts"
    )]
    pub can_use_smart_contracts: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "canUseSmartContractsMetadata"
    )]
    pub can_use_smart_contracts_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableDocumentUpload"
    )]
    pub disable_document_upload: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableDocumentUploadMetadata"
    )]
    pub disable_document_upload_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableOtherActions"
    )]
    pub disable_other_actions: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableOtherActionsMetadata"
    )]
    pub disable_other_actions_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableDSPro"
    )]
    pub enable_ds_pro: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableDSProMetadata"
    )]
    pub enable_ds_pro_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSequentialSigningAPI"
    )]
    pub enable_sequential_signing_api: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSequentialSigningAPIMetadata"
    )]
    pub enable_sequential_signing_api_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSequentialSigningUI"
    )]
    pub enable_sequential_signing_ui: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSequentialSigningUIMetadata"
    )]
    pub enable_sequential_signing_ui_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSignOnPaperOverride"
    )]
    pub enable_sign_on_paper_override: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSignOnPaperOverrideMetadata"
    )]
    pub enable_sign_on_paper_override_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableSignerAttachments"
    )]
    pub enable_signer_attachments: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSignerAttachmentsMetadata"
    )]
    pub enable_signer_attachments_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableTransactionPoint"
    )]
    pub enable_transaction_point: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableTransactionPointMetadata"
    )]
    pub enable_transaction_point_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "enableVaulting"
    )]
    pub enable_vaulting: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableVaultingMetadata"
    )]
    pub enable_vaulting_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "expressSendOnly"
    )]
    pub express_send_only: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locale: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localeMetadata"
    )]
    pub locale_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicy>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "manageClickwrapsMode"
    )]
    pub manage_clickwraps_mode: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "manageClickwrapsModeMetadata"
    )]
    pub manage_clickwraps_mode_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "modifiedBy"
    )]
    pub modified_by: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "modifiedByMetadata"
    )]
    pub modified_by_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "modifiedDate"
    )]
    pub modified_date: Option<chrono::NaiveDate>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "modifiedDateMetadata"
    )]
    pub modified_date_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "modifiedPage"
    )]
    pub modified_page: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "modifiedPageMetadata"
    )]
    pub modified_page_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "newSendUI"
    )]
    pub new_send_ui: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "newSendUIMetadata"
    )]
    pub new_send_ui_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "powerFormMode"
    )]
    pub power_form_mode: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "powerFormModeMetadata"
    )]
    pub power_form_mode_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientViewedNotification"
    )]
    pub recipient_viewed_notification: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientViewedNotificationMetadata"
    )]
    pub recipient_viewed_notification_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "sealIdentifiers"
    )]
    pub seal_identifiers: Vec<SealIdentifier>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "selfSignedRecipientEmailDocument"
    )]
    pub self_signed_recipient_email_document: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "selfSignedRecipientEmailDocumentMetadata"
    )]
    pub self_signed_recipient_email_document_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "senderEmailNotifications"
    )]
    pub sender_email_notifications: Option<SenderEmailNotifications>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signerEmailNotifications"
    )]
    pub signer_email_notifications: Option<SignerEmailNotifications>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "supplementalDocumentIncludeInDownload"
    )]
    pub supplemental_document_include_in_download: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "supplementalDocumentsMustAccept"
    )]
    pub supplemental_documents_must_accept: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supplementalDocumentsMustAcceptMetadata"
    )]
    pub supplemental_documents_must_accept_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "supplementalDocumentsMustRead"
    )]
    pub supplemental_documents_must_read: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supplementalDocumentsMustReadMetadata"
    )]
    pub supplemental_documents_must_read_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "supplementalDocumentsMustView"
    )]
    pub supplemental_documents_must_view: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supplementalDocumentsMustViewMetadata"
    )]
    pub supplemental_documents_must_view_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateActiveCreation"
    )]
    pub template_active_creation: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateActiveCreationMetadata"
    )]
    pub template_active_creation_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateApplyNotify"
    )]
    pub template_apply_notify: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateApplyNotifyMetadata"
    )]
    pub template_apply_notify_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateAutoMatching"
    )]
    pub template_auto_matching: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateAutoMatchingMetadata"
    )]
    pub template_auto_matching_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateMatchingSensitivity"
    )]
    pub template_matching_sensitivity: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateMatchingSensitivityMetadata"
    )]
    pub template_matching_sensitivity_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templatePageLevelMatching"
    )]
    pub template_page_level_matching: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templatePageLevelMatchingMetadata"
    )]
    pub template_page_level_matching_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "timezoneDST"
    )]
    pub timezone_dst: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timezoneDSTMetadata"
    )]
    pub timezone_dst_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "timezoneMask"
    )]
    pub timezone_mask: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timezoneMaskMetadata"
    )]
    pub timezone_mask_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "timezoneOffset"
    )]
    pub timezone_offset: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timezoneOffsetMetadata"
    )]
    pub timezone_offset_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "timezoneSendingPref"
    )]
    pub timezone_sending_pref: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timezoneSendingPrefMetadata"
    )]
    pub timezone_sending_pref_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "timezoneSigningPref"
    )]
    pub timezone_signing_pref: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "timezoneSigningPrefMetadata"
    )]
    pub timezone_signing_pref_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "transactionPointSiteNameURL"
    )]
    pub transaction_point_site_name_url: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transactionPointSiteNameURLMetadata"
    )]
    pub transaction_point_site_name_url_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "transactionPointUserName"
    )]
    pub transaction_point_user_name: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transactionPointUserNameMetadata"
    )]
    pub transaction_point_user_name_metadata: Option<SettingsMetadata>,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "vaultingMode"
    )]
    pub vaulting_mode: String,
    /**
     * Properties that configure the settings for a user. Some elements of this object have a `metadata` property, which includes the following:
     *  - `rights`: The calling users permissions to edit this setting (can be `editable` or `read_only`)
     *  - `uiHint`: Internally used to build UIs (can be `available` or `hidden`)
     *  - `options`: The values supported for this setting (not all settings have this element)
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vaultingModeMetadata"
    )]
    pub vaulting_mode_metadata: Option<SettingsMetadata>,
}

/// Information about a shared item.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct UserSharedItem {
    /**
     * Information about a shared item.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Information about a shared item.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     * Information about a shared item.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<UserInfo>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct UserSignature {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "adoptedDateTime"
    )]
    pub adopted_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdDateTime"
    )]
    pub created_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customField"
    )]
    pub custom_field: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dateStampProperties"
    )]
    pub date_stamp_properties: Option<DateStampProperties>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disallowUserResizeStamp"
    )]
    pub disallow_user_resize_stamp: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalID"
    )]
    pub external_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "imageBase64"
    )]
    pub image_base_64: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "imageType"
    )]
    pub image_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initials150ImageId"
    )]
    pub initials_150_image_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "initialsImageUri"
    )]
    pub initials_image_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDefault"
    )]
    pub is_default: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModifiedDateTime"
    )]
    pub last_modified_date_time: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nrdsId"
    )]
    pub nrds_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nrdsLastName"
    )]
    pub nrds_last_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nrdsStatus"
    )]
    pub nrds_status: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "phoneticName"
    )]
    pub phonetic_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signature150ImageId"
    )]
    pub signature_150_image_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureFont"
    )]
    pub signature_font: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureId"
    )]
    pub signature_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureImageUri"
    )]
    pub signature_image_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureInitials"
    )]
    pub signature_initials: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureName"
    )]
    pub signature_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureRights"
    )]
    pub signature_rights: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureType"
    )]
    pub signature_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampFormat"
    )]
    pub stamp_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampImageUri"
    )]
    pub stamp_image_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampSizeMM"
    )]
    pub stamp_size_mm: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampType"
    )]
    pub stamp_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct UserSignatureDefinition {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dateStampProperties"
    )]
    pub date_stamp_properties: Option<DateStampProperties>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disallowUserResizeStamp"
    )]
    pub disallow_user_resize_stamp: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "externalID"
    )]
    pub external_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "imageType"
    )]
    pub image_type: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isDefault"
    )]
    pub is_default: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nrdsId"
    )]
    pub nrds_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nrdsLastName"
    )]
    pub nrds_last_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "phoneticName"
    )]
    pub phonetic_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureFont"
    )]
    pub signature_font: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureId"
    )]
    pub signature_id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureInitials"
    )]
    pub signature_initials: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signatureName"
    )]
    pub signature_name: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampFormat"
    )]
    pub stamp_format: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "stampSizeMM"
    )]
    pub stamp_size_mm: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct UserSignaturesInformation {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "userSignatures"
    )]
    pub user_signatures: Vec<UserSignature>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct UserSocialResult {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "socialAccountInformation"
    )]
    pub social_account_information: Vec<SocialAccountInformation>,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct UsersResponse {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "nextUri"
    )]
    pub next_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "previousUri"
    )]
    pub previous_uri: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub users: Vec<UserInfo>,
}

/// This tab is used with the Approve tab to handle supplemental documents.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct View {
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "buttonText"
    )]
    pub button_text: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "buttonTextMetadata"
    )]
    pub button_text_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requiredRead"
    )]
    pub required_read: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * This tab is used with the Approve tab to handle supplemental documents.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct ViewUrl {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub url: String,
}

///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Watermark {
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "displayAngle"
    )]
    pub display_angle: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub enabled: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "imageBase64"
    )]
    pub image_base_64: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub transparency: String,
    /**
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "watermarkText"
    )]
    pub watermark_text: String,
}

/// A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Witness {
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accessCode"
    )]
    pub access_code: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessCodeMetadata"
    )]
    pub access_code_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "addAccessCodeToEmail"
    )]
    pub add_access_code_to_email: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "additionalNotifications"
    )]
    pub additional_notifications: Vec<RecipientAdditionalNotification>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "agentCanEditEmail"
    )]
    pub agent_can_edit_email: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "agentCanEditName"
    )]
    pub agent_can_edit_name: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "allowSystemOverrideForLockedRecipient"
    )]
    pub allow_system_override_for_locked_recipient: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "autoNavigation"
    )]
    pub auto_navigation: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "bulkRecipientsUri"
    )]
    pub bulk_recipients_uri: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canSignOffline"
    )]
    pub can_sign_offline: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "clientUserId"
    )]
    pub client_user_id: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "completedCount"
    )]
    pub completed_count: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "creationReason"
    )]
    pub creation_reason: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "customFields"
    )]
    pub custom_fields: Vec<String>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedDateTime"
    )]
    pub declined_date_time: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "declinedReason"
    )]
    pub declined_reason: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "defaultRecipient"
    )]
    pub default_recipient: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveredDateTime"
    )]
    pub delivered_date_time: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "deliveryMethod"
    )]
    pub delivery_method: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryMethodMetadata"
    )]
    pub delivery_method_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorId"
    )]
    pub designator_id: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "designatorIdGuid"
    )]
    pub designator_id_guid: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "documentVisibility"
    )]
    pub document_visibility: Vec<DocumentVisibility>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailMetadata"
    )]
    pub email_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emailNotification"
    )]
    pub email_notification: Option<RecipientEmailNotification>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "embeddedRecipientStartURL"
    )]
    pub embedded_recipient_start_url: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "excludedDocuments"
    )]
    pub excluded_documents: Vec<String>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "faxNumber"
    )]
    pub fax_number: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "faxNumberMetadata"
    )]
    pub fax_number_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "firstName"
    )]
    pub first_name: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "firstNameMetadata"
    )]
    pub first_name_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fullName"
    )]
    pub full_name: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fullNameMetadata"
    )]
    pub full_name_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "idCheckConfigurationName"
    )]
    pub id_check_configuration_name: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckConfigurationNameMetadata"
    )]
    pub id_check_configuration_name_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idCheckInformationInput"
    )]
    pub id_check_information_input: Option<IdCheckInformationInput>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityVerification"
    )]
    pub identity_verification: Option<RecipientIdentityVerification>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "inheritEmailNotificationConfiguration"
    )]
    pub inherit_email_notification_configuration: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isBulkRecipient"
    )]
    pub is_bulk_recipient: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "isBulkRecipientMetadata"
    )]
    pub is_bulk_recipient_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastName"
    )]
    pub last_name: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastNameMetadata"
    )]
    pub last_name_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientPhoneAuthEditable"
    )]
    pub locked_recipient_phone_auth_editable: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lockedRecipientSmsEditable"
    )]
    pub locked_recipient_sms_editable: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "notaryId"
    )]
    pub notary_id: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub note: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "noteMetadata"
    )]
    pub note_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "offlineAttributes"
    )]
    pub offline_attributes: Option<serde_json::Value>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phoneAuthentication"
    )]
    pub phone_authentication: Option<RecipientPhoneAuthentication>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proofFile")]
    pub proof_file: Option<RecipientProofFile>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientAttachments"
    )]
    pub recipient_attachments: Vec<RecipientAttachment>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientAuthenticationStatus"
    )]
    pub recipient_authentication_status: Option<AuthenticationStatus>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientFeatureMetadata"
    )]
    pub recipient_feature_metadata: Vec<FeatureAvailableMetadata>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "recipientSignatureProviders"
    )]
    pub recipient_signature_providers: Vec<RecipientSignatureProvider>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientSuppliesTabs"
    )]
    pub recipient_supplies_tabs: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientType"
    )]
    pub recipient_type: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientTypeMetadata"
    )]
    pub recipient_type_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireIdLookup"
    )]
    pub require_id_lookup: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireIdLookupMetadata"
    )]
    pub require_id_lookup_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireSignOnPaper"
    )]
    pub require_sign_on_paper: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireSignerCertificate"
    )]
    pub require_signer_certificate: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireUploadSignature"
    )]
    pub require_upload_signature: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "roleName"
    )]
    pub role_name: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "routingOrder"
    )]
    pub routing_order: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routingOrderMetadata"
    )]
    pub routing_order_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sentDateTime"
    )]
    pub sent_date_time: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signInEachLocation"
    )]
    pub sign_in_each_location: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signInEachLocationMetadata"
    )]
    pub sign_in_each_location_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signatureInfo"
    )]
    pub signature_info: Option<RecipientSignatureInformation>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signedDateTime"
    )]
    pub signed_date_time: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupId"
    )]
    pub signing_group_id: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingGroupIdMetadata"
    )]
    pub signing_group_id_metadata: Option<PropertyMetadata>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "signingGroupName"
    )]
    pub signing_group_name: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "signingGroupUsers"
    )]
    pub signing_group_users: Vec<UserInfo>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smsAuthentication"
    )]
    pub sms_authentication: Option<RecipientSmsAuthentication>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "socialAuthentications"
    )]
    pub social_authentications: Vec<SocialAuthentication>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "statusCode"
    )]
    pub status_code: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "suppressEmails"
    )]
    pub suppress_emails: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tabs: Option<EnvelopeRecipientTabs>,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalTabCount"
    )]
    pub total_tab_count: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "witnessFor"
    )]
    pub witness_for: String,
    /**
     * A complex type containing information about a witness recipient. Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "witnessForGuid"
    )]
    pub witness_for_guid: String,
}

/// Describes the workflow for an envelope.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Workflow {
    /**
     * Describes the workflow for an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "currentWorkflowStepId"
    )]
    pub current_workflow_step_id: String,
    /**
     * Describes the workflow for an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workflowStatus"
    )]
    pub workflow_status: String,
    /**
     * Describes the workflow for an envelope.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "workflowSteps"
    )]
    pub workflow_steps: Vec<WorkflowStep>,
}

/// Describes a single step in a workflow.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct WorkflowStep {
    /**
     * Describes a single step in a workflow.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub action: String,
    /**
     * Describes a single step in a workflow.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "completedDate"
    )]
    pub completed_date: Option<chrono::NaiveDate>,
    /**
     * Describes a single step in a workflow.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "itemId"
    )]
    pub item_id: String,
    /**
     * Describes a single step in a workflow.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientRouting"
    )]
    pub recipient_routing: Option<RecipientRouting>,
    /**
     * Describes a single step in a workflow.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * Describes a single step in a workflow.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "triggerOnItem"
    )]
    pub trigger_on_item: String,
    /**
     * Describes a single step in a workflow.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        deserialize_with = "crate::utils::date_format::deserialize",
        rename = "triggeredDate"
    )]
    pub triggered_date: Option<chrono::NaiveDate>,
    /**
     * Describes a single step in a workflow.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workflowStepId"
    )]
    pub workflow_step_id: String,
}

/// A DocuSign workspace is a collaboration area for sharing files and data.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Workspace {
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "billableAccountId"
    )]
    pub billable_account_id: String,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "callerInformation"
    )]
    pub caller_information: Option<WorkspaceUser>,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub created: String,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createdByInformation"
    )]
    pub created_by_information: Option<WorkspaceUser>,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModified"
    )]
    pub last_modified: String,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastModifiedByInformation"
    )]
    pub last_modified_by_information: Option<WorkspaceUser>,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<WorkspaceSettings>,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workspaceBaseUrl"
    )]
    pub workspace_base_url: String,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workspaceDescription"
    )]
    pub workspace_description: String,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workspaceId"
    )]
    pub workspace_id: String,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workspaceName"
    )]
    pub workspace_name: String,
    /**
     * A DocuSign workspace is a collaboration area for sharing files and data.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workspaceUri"
    )]
    pub workspace_uri: String,
}

/// This object's properties describe the contents of a workspace folder.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct WorkspaceFolderContents {
    /**
     * This object's properties describe the contents of a workspace folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     * This object's properties describe the contents of a workspace folder.
     */
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub folder: Option<WorkspaceItem>,
    /**
     * This object's properties describe the contents of a workspace folder.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub items: Vec<WorkspaceItem>,
    /**
     * This object's properties describe the contents of a workspace folder.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "parentFolders"
    )]
    pub parent_folders: Vec<WorkspaceItem>,
    /**
     * This object's properties describe the contents of a workspace folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     * This object's properties describe the contents of a workspace folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     * This object's properties describe the contents of a workspace folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
    /**
     * This object's properties describe the contents of a workspace folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workspaceId"
    )]
    pub workspace_id: String,
}

/// This object represents an item in a workspace, which can be either a file or folder.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct WorkspaceItem {
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "callerAuthorization"
    )]
    pub caller_authorization: Option<WorkspaceUserAuthorization>,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "contentType"
    )]
    pub content_type: String,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub created: String,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdById"
    )]
    pub created_by_id: String,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createdByInformation"
    )]
    pub created_by_information: Option<WorkspaceUser>,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub extension: String,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fileSize"
    )]
    pub file_size: String,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fileUri"
    )]
    pub file_uri: String,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub id: String,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "isPublic"
    )]
    pub is_public: String,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModified"
    )]
    pub last_modified: String,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModifiedById"
    )]
    pub last_modified_by_id: String,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastModifiedByInformation"
    )]
    pub last_modified_by_information: Option<WorkspaceUser>,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageCount"
    )]
    pub page_count: String,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "parentFolderId"
    )]
    pub parent_folder_id: String,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "parentFolderUri"
    )]
    pub parent_folder_uri: String,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "sha256"
    )]
    pub sha_256: String,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "thumbHeight"
    )]
    pub thumb_height: String,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "thumbWidth"
    )]
    pub thumb_width: String,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(default)]
    pub thumbnail: Page,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub uri: String,
    /**
     * This object represents an item in a workspace, which can be either a file or folder.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userAuthorization"
    )]
    pub user_authorization: Option<WorkspaceUserAuthorization>,
}

/// An array of objects that describe the items in a workspace.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct WorkspaceItemList {
    /**
     * An array of objects that describe the items in a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub items: Vec<WorkspaceItem>,
}

/// This object contains a list of available workspaces.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct WorkspaceList {
    /**
     * This object contains a list of available workspaces.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "endPosition"
    )]
    pub end_position: String,
    /**
     * This object contains a list of available workspaces.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "resultSetSize"
    )]
    pub result_set_size: String,
    /**
     * This object contains a list of available workspaces.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "startPosition"
    )]
    pub start_position: String,
    /**
     * This object contains a list of available workspaces.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "totalSetSize"
    )]
    pub total_set_size: String,
    /**
     * This object contains a list of available workspaces.
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize"
    )]
    pub workspaces: Vec<Workspace>,
}

/// This object provides information about the settings for the workspace.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct WorkspaceSettings {
    /**
     * This object provides information about the settings for the workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "commentsAllowed"
    )]
    pub comments_allowed: String,
}

/// This object represents the workspace user. This property is only returned in response to user specific GET call.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct WorkspaceUser {
    /**
     * This object represents the workspace user. This property is only returned in response to user specific GET call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountId"
    )]
    pub account_id: String,
    /**
     * This object represents the workspace user. This property is only returned in response to user specific GET call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "accountName"
    )]
    pub account_name: String,
    /**
     * This object represents the workspace user. This property is only returned in response to user specific GET call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "activeSince"
    )]
    pub active_since: String,
    /**
     * This object represents the workspace user. This property is only returned in response to user specific GET call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub created: String,
    /**
     * This object represents the workspace user. This property is only returned in response to user specific GET call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdById"
    )]
    pub created_by_id: String,
    /**
     * This object represents the workspace user. This property is only returned in response to user specific GET call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub email: String,
    /**
     * This object represents the workspace user. This property is only returned in response to user specific GET call.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * This object represents the workspace user. This property is only returned in response to user specific GET call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "invitationEmailBlurb"
    )]
    pub invitation_email_blurb: String,
    /**
     * This object represents the workspace user. This property is only returned in response to user specific GET call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "invitationEmailSubject"
    )]
    pub invitation_email_subject: String,
    /**
     * This object represents the workspace user. This property is only returned in response to user specific GET call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModified"
    )]
    pub last_modified: String,
    /**
     * This object represents the workspace user. This property is only returned in response to user specific GET call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "lastModifiedById"
    )]
    pub last_modified_by_id: String,
    /**
     * This object represents the workspace user. This property is only returned in response to user specific GET call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * This object represents the workspace user. This property is only returned in response to user specific GET call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "type"
    )]
    pub type_: String,
    /**
     * This object represents the workspace user. This property is only returned in response to user specific GET call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userId"
    )]
    pub user_id: String,
    /**
     * This object represents the workspace user. This property is only returned in response to user specific GET call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "userName"
    )]
    pub user_name: String,
    /**
     * This object represents the workspace user. This property is only returned in response to user specific GET call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workspaceId"
    )]
    pub workspace_id: String,
    /**
     * This object represents the workspace user. This property is only returned in response to user specific GET call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workspaceUserBaseUrl"
    )]
    pub workspace_user_base_url: String,
    /**
     * This object represents the workspace user. This property is only returned in response to user specific GET call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workspaceUserId"
    )]
    pub workspace_user_id: String,
    /**
     * This object represents the workspace user. This property is only returned in response to user specific GET call.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workspaceUserUri"
    )]
    pub workspace_user_uri: String,
}

/// Provides properties that describe user authorization to a workspace.
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct WorkspaceUserAuthorization {
    /**
     * Provides properties that describe user authorization to a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canDelete"
    )]
    pub can_delete: String,
    /**
     * Provides properties that describe user authorization to a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canMove"
    )]
    pub can_move: String,
    /**
     * Provides properties that describe user authorization to a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canTransact"
    )]
    pub can_transact: String,
    /**
     * Provides properties that describe user authorization to a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "canView"
    )]
    pub can_view: String,
    /**
     * Provides properties that describe user authorization to a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub created: String,
    /**
     * Provides properties that describe user authorization to a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "createdById"
    )]
    pub created_by_id: String,
    /**
     * Provides properties that describe user authorization to a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * Provides properties that describe user authorization to a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub modified: String,
    /**
     * Provides properties that describe user authorization to a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "modifiedById"
    )]
    pub modified_by_id: String,
    /**
     * Provides properties that describe user authorization to a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "workspaceUserId"
    )]
    pub workspace_user_id: String,
    /**
     * Provides properties that describe user authorization to a workspace.
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workspaceUserInformation"
    )]
    pub workspace_user_information: Option<WorkspaceUser>,
}

/// A tab that allows the recipient to enter a ZIP code. The ZIP
/// code can be five digits or nine digits in the ZIP+4 format.
/// The zip code can be typed with or without dashes. It uses
/// the same parameters as a Text tab, with the validation
/// message and pattern set for ZIP code information.
///
#[derive(Serialize, Deserialize, PartialEq, Debug, Clone, JsonSchema)]
pub struct Zip {
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorAllowWhiteSpaceInCharacters"
    )]
    pub anchor_allow_white_space_in_characters: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorAllowWhiteSpaceInCharactersMetadata"
    )]
    pub anchor_allow_white_space_in_characters_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorCaseSensitive"
    )]
    pub anchor_case_sensitive: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorCaseSensitiveMetadata"
    )]
    pub anchor_case_sensitive_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorHorizontalAlignment"
    )]
    pub anchor_horizontal_alignment: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorHorizontalAlignmentMetadata"
    )]
    pub anchor_horizontal_alignment_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorIgnoreIfNotPresent"
    )]
    pub anchor_ignore_if_not_present: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorIgnoreIfNotPresentMetadata"
    )]
    pub anchor_ignore_if_not_present_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorMatchWholeWord"
    )]
    pub anchor_match_whole_word: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorMatchWholeWordMetadata"
    )]
    pub anchor_match_whole_word_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorString"
    )]
    pub anchor_string: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorStringMetadata"
    )]
    pub anchor_string_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorTabProcessorVersion"
    )]
    pub anchor_tab_processor_version: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorTabProcessorVersionMetadata"
    )]
    pub anchor_tab_processor_version_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorUnits"
    )]
    pub anchor_units: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorUnitsMetadata"
    )]
    pub anchor_units_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorXOffset"
    )]
    pub anchor_x_offset: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorXOffsetMetadata"
    )]
    pub anchor_x_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "anchorYOffset"
    )]
    pub anchor_y_offset: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "anchorYOffsetMetadata"
    )]
    pub anchor_y_offset_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub bold: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "boldMetadata"
    )]
    pub bold_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "concealValueOnDocument"
    )]
    pub conceal_value_on_document: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "concealValueOnDocumentMetadata"
    )]
    pub conceal_value_on_document_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentLabel"
    )]
    pub conditional_parent_label: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentLabelMetadata"
    )]
    pub conditional_parent_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "conditionalParentValue"
    )]
    pub conditional_parent_value: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conditionalParentValueMetadata"
    )]
    pub conditional_parent_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "customTabId"
    )]
    pub custom_tab_id: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customTabIdMetadata"
    )]
    pub custom_tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "disableAutoSize"
    )]
    pub disable_auto_size: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableAutoSizeMetadata"
    )]
    pub disable_auto_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "documentId"
    )]
    pub document_id: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentIdMetadata"
    )]
    pub document_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "errorDetails"
    )]
    pub error_details: Option<ErrorDetails>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub font: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontColor"
    )]
    pub font_color: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontColorMetadata"
    )]
    pub font_color_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontMetadata"
    )]
    pub font_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "fontSize"
    )]
    pub font_size: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fontSizeMetadata"
    )]
    pub font_size_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formOrder"
    )]
    pub form_order: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formOrderMetadata"
    )]
    pub form_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageLabel"
    )]
    pub form_page_label: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageLabelMetadata"
    )]
    pub form_page_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "formPageNumber"
    )]
    pub form_page_number: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "formPageNumberMetadata"
    )]
    pub form_page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub height: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heightMetadata"
    )]
    pub height_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub italic: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "italicMetadata"
    )]
    pub italic_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localePolicy"
    )]
    pub locale_policy: Option<LocalePolicyTab>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub locked: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lockedMetadata"
    )]
    pub locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "maxLength"
    )]
    pub max_length: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxLengthMetadata"
    )]
    pub max_length_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mergeField"
    )]
    pub merge_field: Option<MergeField>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "mergeFieldXml"
    )]
    pub merge_field_xml: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub name: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameMetadata"
    )]
    pub name_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "originalValue"
    )]
    pub original_value: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "originalValueMetadata"
    )]
    pub original_value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "pageNumber"
    )]
    pub page_number: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pageNumberMetadata"
    )]
    pub page_number_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientId"
    )]
    pub recipient_id: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "recipientIdGuid"
    )]
    pub recipient_id_guid: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdGuidMetadata"
    )]
    pub recipient_id_guid_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recipientIdMetadata"
    )]
    pub recipient_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireAll"
    )]
    pub require_all: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireAllMetadata"
    )]
    pub require_all_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "requireInitialOnSharedChange"
    )]
    pub require_initial_on_shared_change: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requireInitialOnSharedChangeMetadata"
    )]
    pub require_initial_on_shared_change_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub required: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiredMetadata"
    )]
    pub required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "senderRequired"
    )]
    pub sender_required: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "senderRequiredMetadata"
    )]
    pub sender_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub shared: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharedMetadata"
    )]
    pub shared_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "smartContractInformation"
    )]
    pub smart_contract_information: Option<SmartContractInformation>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub status: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMetadata"
    )]
    pub status_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Vec::is_empty",
        deserialize_with = "crate::utils::deserialize_null_vector::deserialize",
        rename = "tabGroupLabels"
    )]
    pub tab_group_labels: Vec<String>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabGroupLabelsMetadata"
    )]
    pub tab_group_labels_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabId"
    )]
    pub tab_id: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabIdMetadata"
    )]
    pub tab_id_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabLabel"
    )]
    pub tab_label: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabLabelMetadata"
    )]
    pub tab_label_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabOrder"
    )]
    pub tab_order: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabOrderMetadata"
    )]
    pub tab_order_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "tabType"
    )]
    pub tab_type: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tabTypeMetadata"
    )]
    pub tab_type_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateLocked"
    )]
    pub template_locked: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateLockedMetadata"
    )]
    pub template_locked_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "templateRequired"
    )]
    pub template_required: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateRequiredMetadata"
    )]
    pub template_required_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "toolTipMetadata"
    )]
    pub tool_tip_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub tooltip: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub underline: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "underlineMetadata"
    )]
    pub underline_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "useDash4"
    )]
    pub use_dash_4: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "useDash4Metadata"
    )]
    pub use_dash_4_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationMessage"
    )]
    pub validation_message: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationMessageMetadata"
    )]
    pub validation_message_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "validationPattern"
    )]
    pub validation_pattern: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validationPatternMetadata"
    )]
    pub validation_pattern_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub value: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valueMetadata"
    )]
    pub value_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize"
    )]
    pub width: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "widthMetadata"
    )]
    pub width_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "xPosition"
    )]
    pub x_position: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xPositionMetadata"
    )]
    pub x_position_metadata: Option<PropertyMetadata>,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "String::is_empty",
        deserialize_with = "crate::utils::deserialize_null_string::deserialize",
        rename = "yPosition"
    )]
    pub y_position: String,
    /**
     * A tab that allows the recipient to enter a ZIP code. The ZIP
     *  code can be five digits or nine digits in the ZIP+4 format.
     *  The zip code can be typed with or without dashes. It uses
     *  the same parameters as a Text tab, with the validation
     *  message and pattern set for ZIP code information.
     *
     */
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "yPositionMetadata"
    )]
    pub y_position_metadata: Option<PropertyMetadata>,
}
